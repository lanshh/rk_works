From a120f38b6bb156c6f84c78cc4a701acc32658c1c Mon Sep 17 00:00:00 2001
From: lanshh <lsh@rock-chips.com>
Date: Mon, 10 Jul 2017 16:00:49 +0800
Subject: [PATCH 3/5] modify timer

Change-Id: I063ac4f6680c477ff2ff95e9cd7edcdf657a03d6
Signed-off-by: lanshh <lsh@rock-chips.com>
---
 noui/libvui/vgui_api.c | 95 ++++++++++++++++++++++++++++++++++++++------------
 parameter.c            |  6 ++--
 2 files changed, 76 insertions(+), 25 deletions(-)

diff --git a/noui/libvui/vgui_api.c b/noui/libvui/vgui_api.c
index e0e45f6..89dab95 100644
--- a/noui/libvui/vgui_api.c
+++ b/noui/libvui/vgui_api.c
@@ -2,7 +2,9 @@
 #include <signal.h>
 #include <time.h>
 #include <memory.h>
+
 static PMAINWINCREATE g_pMainWindow;
+
 HWND CreateMainWindow (PMAINWINCREATE pCreateInfo)
 {
 	DBGMSG(NI, ("CreateMainWindow\n"));
@@ -33,66 +35,113 @@ void *get_proc(void)
 {
     if(g_pMainWindow)
 		return g_pMainWindow->MainWindowProc;
+	return 0;
 }
 
-static void my_alarm_handler(union sigval v)
-{
-	int timerid = v.sival_int;
-	PostMessage((int)g_pMainWindow, MSG_TIMER, 0, 0);
-}
-
+/*
+ * timer process
+ *
+ */
+#define TIMER_PREPARE 1
+#define TIMER_INITED 2
 typedef struct _TIMER_
 {
 	int inited;
+	int id;
 	TIMERPROC pfn;
 	timer_t timer;
 } TIMER;
-static TIMER g_timer[10] = {0};
+
+static TIMER g_timer[10] = {{0}};
+#define nof_timer(x) (sizeof(x)/sizeof(x[0]))
+
+static void my_alarm_handler(union sigval v)
+{
+	int id = v.sival_int;
+	TIMER *timer;
+	int i;
+
+	for(i = 0; i < nof_timer(g_timer); i++) {
+		if (g_timer[i].inited ==  TIMER_INITED && g_timer[i].id == id) {
+			timer = &g_timer[i];
+			if (timer->pfn) {
+				timer->pfn((int)g_pMainWindow, id, MSG_TIMER);
+				DBGMSG(NI, ("timer %d fired!!!\n", id));
+			} else {
+				PostMessage((int)g_pMainWindow, MSG_TIMER, 0, 0);
+				DBGMSG(NI, ("timer %d fired, use fefault proc!!!\n", id));
+			}
+		}
+	}
+}
 
 bool SetTimerEx(HWND hWnd, int id, unsigned int speed, TIMERPROC timer_proc)
 {
 	struct sigevent evp;
 	struct itimerspec ts;
 	int ret;
-	TIMER *timer;
+	TIMER *timer = 0;
+	int i;
 
-	if(id >= sizeof(g_timer)/sizeof(g_timer[0]))
+	for(i = 0; i < nof_timer(g_timer); i++) {
+		if (timer->inited && g_timer[i].id == id) {
+			DBGMSG(NI, ("timer %d already registered!!!\n", id));
+			return -1;
+		}
+	}
+	for(i = 0; i < nof_timer(g_timer); i++) {
+		if (!g_timer[i].id) {
+			g_timer[i].inited = TIMER_PREPARE;
+			timer = &g_timer[id];
+			timer->id = id;
+			timer->pfn = timer_proc;
+			DBGMSG(NI, ("timer %d location on %d!!!\n", id, i));
+		}
+	}
+	if (!timer) {
+		DBGMSG(NI, ("there is no locatin for timer %d!!!\n", id));
 		return -1;
-	timer = &g_timer[id];
-	timer->pfn = timer_proc;
-
+	}
 	memset(&evp, 0, sizeof(struct sigevent));
 	evp.sigev_value.sival_int = id;
 	evp.sigev_notify = SIGEV_THREAD;
 	evp.sigev_notify_function = my_alarm_handler;
-
 	ret = timer_create(CLOCK_REALTIME, &evp, &timer->timer);
 	if (ret) {
+		timer->inited = 0;
 		DBGMSG(NI, ("timer_create error\n"));
+		return -1;
 	}
 	ts.it_interval.tv_sec = speed/1000;
 	ts.it_interval.tv_nsec = (speed%1000)*1000*1000;
 	ts.it_value.tv_sec = speed/1000;
 	ts.it_value.tv_nsec = (speed%1000)*1000*1000;
-
 	ret = timer_settime(timer->timer, 0, &ts, NULL);
 	if (ret) {
-		DBGMSG(NI, ("timer_settime error\n"));
+		timer_delete(timer->timer);
+		timer->inited = 0;
+		DBGMSG(NI, ("timer_settime error, delete\n"));
+		return -1;
 	}
-	timer->inited = 1;
+	timer->inited = TIMER_INITED;
 	return 0;
 }
 
 int KillTimer (HWND hWnd, int id)
 {
 	TIMER *timer;
+	int i;
 
-	if(id >= sizeof(g_timer)/sizeof(g_timer[0]))
-		return -1;
-	timer = &g_timer[id];
-	timer_delete(timer->timer);
-	timer->inited = 0;
-	return 0;
+	for(i = 0; i < nof_timer(g_timer); i++) {
+		if (g_timer[i].inited ==  TIMER_INITED && g_timer[i].id == id) {
+			timer = &g_timer[i];
+			timer_delete(timer->timer);
+			timer->inited = 0;
+			DBGMSG(NI, ("timer %d deleted!!!\n", id));
+			return 0;
+		}
+	}
+	return -1;
 }
 
 int idummy()
@@ -105,4 +154,4 @@ int vdummy()
 {
 	DBGMSG(NI, ("vdummy\n"));
 	return 0;
-}
\ No newline at end of file
+}
diff --git a/parameter.c b/parameter.c
index 89c9940..2ffe37f 100644
--- a/parameter.c
+++ b/parameter.c
@@ -685,7 +685,7 @@ int parameter_save_video_usb(char resolution)
 
 char parameter_get_video_usb(void)
 {
-    return parameter.video_usb;
+    return 2; /* parameter.video_usb; */
 }
 
 int parameter_save_video_fre(char resolution)
@@ -1079,7 +1079,9 @@ int parameter_recover(void)
     parameter.video_3dnr = 0;
     parameter.dvs_enabled = 1;
 #endif
-
+#ifdef WITHOUT_UI
+	parameter.video_usb = 2;
+#endif
     parameter.wifi_mode = 0;
     parameter.video_adas = 0;
     parameter.video_backlt = LCD_BACKLT_M;
-- 
1.9.1

