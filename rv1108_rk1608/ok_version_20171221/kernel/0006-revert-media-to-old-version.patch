From cdfb5b2b8bace933e3ec478a2711acd5f4f2b397 Mon Sep 17 00:00:00 2001
From: lanshh <lsh@rock-chips.com>
Date: Thu, 21 Dec 2017 08:54:11 +0800
Subject: [PATCH 6/6] revert media to old version

Change-Id: I820e6a8844c19bf232a7bb11814fa70be06da8cc
Signed-off-by: lanshh <lsh@rock-chips.com>
---
 drivers/media/i2c/soc_camera/rockchip/Kconfig      |   28 -
 drivers/media/i2c/soc_camera/rockchip/Makefile     |    4 -
 .../i2c/soc_camera/rockchip/aptina_camera_module.c |    4 -
 .../i2c/soc_camera/rockchip/aptina_camera_module.h |    3 -
 .../soc_camera/rockchip/ar0330cs_v4l2-i2c-subdev.c |   46 +-
 .../soc_camera/rockchip/gc2023_v4l2-i2c-subdev.c   |  953 -------
 .../soc_camera/rockchip/gc2145_v4l2-i2c-subdev.c   | 2351 -----------------
 .../i2c/soc_camera/rockchip/gc_camera_module.c     | 1297 ----------
 .../i2c/soc_camera/rockchip/gc_camera_module.h     |  298 ---
 .../soc_camera/rockchip/imx258_v4l2-i2c-subdev.c   |   37 +-
 .../soc_camera/rockchip/imx291_v4l2-i2c-subdev.c   |   38 +-
 .../soc_camera/rockchip/imx323_v4l2-i2c-subdev.c   |   26 -
 .../soc_camera/rockchip/imx327_v4l2-i2c-subdev.c   |  688 -----
 .../i2c/soc_camera/rockchip/imx_camera_module.c    |    4 -
 .../i2c/soc_camera/rockchip/imx_camera_module.h    |    3 -
 .../soc_camera/rockchip/ov2710_v4l2-i2c-subdev.c   |  170 +-
 .../soc_camera/rockchip/ov2718_v4l2-i2c-subdev.c   | 2666 --------------------
 .../soc_camera/rockchip/ov4689_v4l2-i2c-subdev.c   |   74 +-
 .../soc_camera/rockchip/ov7251bw_v4l2-i2c-subdev.c |  103 +-
 .../soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c   |   41 +-
 .../i2c/soc_camera/rockchip/ov_camera_module.c     |   24 +-
 .../i2c/soc_camera/rockchip/ov_camera_module.h     |    4 +-
 .../i2c/soc_camera/rockchip/rk_camera_module.c     |  196 +-
 .../soc_camera/rockchip/rk_camera_module_version.h |    6 +-
 .../i2c/soc_camera/rockchip/xc9080_camera_module.c |   24 +-
 .../i2c/soc_camera/rockchip/xc9080_camera_module.h |    3 -
 drivers/media/platform/preisp_driver/cif-preisp.c  |   16 +-
 drivers/media/platform/preisp_driver/cif-preisp.h  |    1 -
 drivers/media/platform/rk-cif/cif_cif10_pltfrm.h   |    1 -
 drivers/media/platform/rk-isp11/cif_isp11.c        |  158 +-
 drivers/media/platform/rk-isp11/cif_isp11.h        |    2 -
 .../rk-isp11/cif_isp11_img_src_v4l2-subdev.c       |    2 -
 drivers/media/platform/rk-isp11/cif_isp11_isp.c    |  496 ++--
 drivers/media/platform/rk-isp11/cif_isp11_isp.h    |   16 -
 drivers/media/platform/rk-isp11/cif_isp11_pltfrm.h |    1 -
 drivers/media/platform/rk-isp11/cif_isp11_rv1108.c |   37 +-
 drivers/media/platform/rk-isp11/cif_isp11_v4l2.c   |   17 +-
 .../media/platform/rk-isp11/cif_isp11_version.h    |   28 +-
 drivers/media/usb/uvc/uvc_driver.c                 |    6 +-
 drivers/media/video/adv7181.c                      |   41 +-
 drivers/media/video/rk30_camera_oneframe.c         |   20 +-
 drivers/media/video/rk30_camera_pingpong.c         |   19 +-
 drivers/media/video/rk_camsys/camsys_internal.h    |    4 +-
 drivers/media/video/rk_camsys/camsys_soc_rk3288.c  |    1 -
 44 files changed, 392 insertions(+), 9565 deletions(-)
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/gc2023_v4l2-i2c-subdev.c
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/gc2145_v4l2-i2c-subdev.c
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/gc_camera_module.c
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/gc_camera_module.h
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/imx327_v4l2-i2c-subdev.c
 delete mode 100644 drivers/media/i2c/soc_camera/rockchip/ov2718_v4l2-i2c-subdev.c

diff --git a/drivers/media/i2c/soc_camera/rockchip/Kconfig b/drivers/media/i2c/soc_camera/rockchip/Kconfig
index e0e720a..062f6fe 100644
--- a/drivers/media/i2c/soc_camera/rockchip/Kconfig
+++ b/drivers/media/i2c/soc_camera/rockchip/Kconfig
@@ -67,31 +67,3 @@ config VIDEO_IMX291
 	default n
 	---help---
 	  This is imx291 camera driver adapt to rockchip cif isp platform.
-
-config VIDEO_GC2023
-	tristate "gc2023 driver adapt to rockchip cif isp platform"
-	depends on VIDEO_V4L2 && VIDEO_RK_CIF_ISP11 && I2C
-	default n
-	---help---
-	  This is gc2023 camera driver adapt to rockchip cif isp platform.
-
-config VIDEO_OV2718
-	tristate "ov2718 driver adapt to rockchip cif isp platform"
-	depends on VIDEO_V4L2 && VIDEO_RK_CIF_ISP11 && I2C
-	default n
-	---help---
-	  This is ov2718 camera driver adapt to rockchip cif isp platform.
-
-config VIDEO_GC2145
-	tristate "gc2145 driver adapt to rockchip cif isp platform"
-	depends on VIDEO_V4L2 && VIDEO_RK_CIF_ISP11 && I2C
-	default n
-	---help---
-	  This is gc2145 camera driver adapt to rockchip cif isp platform.
-
-config VIDEO_IMX327
-	tristate "imx327 driver adapt to rockchip cif isp platform"
-	depends on VIDEO_V4L2 && VIDEO_RK_CIF_ISP11 && I2C
-	default n
-	---help---
-	  This is imx327 camera driver adapt to rockchip cif isp platform.
diff --git a/drivers/media/i2c/soc_camera/rockchip/Makefile b/drivers/media/i2c/soc_camera/rockchip/Makefile
index bce4f0c..0844429 100644
--- a/drivers/media/i2c/soc_camera/rockchip/Makefile
+++ b/drivers/media/i2c/soc_camera/rockchip/Makefile
@@ -9,7 +9,3 @@ obj-$(CONFIG_CAMERA_IRCUTTER) += rk_ircut_v4l2-plt-subdev.o
 obj-$(CONFIG_VIDEO_IMX258) += imx_camera_module.o rk_camera_module.o imx258_v4l2-i2c-subdev.o
 obj-$(CONFIG_VIDEO_XC9080_HM2131) += xc9080_camera_module.o rk_camera_module.o xc9080_hm2131_v4l2-i2c-subdev.o
 obj-$(CONFIG_VIDEO_IMX291) += imx_camera_module.o rk_camera_module.o imx291_v4l2-i2c-subdev.o
-obj-$(CONFIG_VIDEO_GC2023) += gc_camera_module.o rk_camera_module.o gc2023_v4l2-i2c-subdev.o
-obj-$(CONFIG_VIDEO_OV2718) += ov_camera_module.o rk_camera_module.o ov2718_v4l2-i2c-subdev.o
-obj-$(CONFIG_VIDEO_GC2145) += gc_camera_module.o rk_camera_module.o gc2145_v4l2-i2c-subdev.o
-obj-$(CONFIG_VIDEO_IMX327) += imx_camera_module.o rk_camera_module.o imx327_v4l2-i2c-subdev.o
diff --git a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
index 3665c35..fd55480 100644
--- a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
@@ -1040,10 +1040,6 @@ int aptina_camera_module_s_ext_ctrls(
 			ctrl_updt = APTINA_CAMERA_MODULE_CTRL_UPDT_GAIN;
 			cam_mod->exp_config.gain_percent = ctrl->value;
 			break;
-		case RK_V4L2_CID_VTS:
-			ctrl_updt = APTINA_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE;
-			cam_mod->exp_config.vts_value = ctrl->value;
-			break;
 		case V4L2_CID_FLASH_LED_MODE:
 			ret = flash_light_ctrl(sd, cam_mod, ctrl->value);
 			if (ret == 0) {
diff --git a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.h b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.h
index f07a0d3..8c3cbeb 100644
--- a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.h
+++ b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.h
@@ -38,8 +38,6 @@
 #define APTINA_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP 0x20
 #define APTINA_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE 0x40
 #define APTINA_CAMERA_MODULE_CTRL_UPDT_PRESET_WB 0x80
-#define APTINA_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE 0x100
-
 
 enum aptina_camera_module_state {
 	APTINA_CAMERA_MODULE_POWER_OFF = 0,
@@ -98,7 +96,6 @@ struct aptina_camera_module_exp_config {
 	u16 gain_percent;
 	bool auto_gain;
 	enum v4l2_flash_led_mode flash_mode;
-	u32 vts_value;
 };
 
 struct aptina_camera_module_wb_config {
diff --git a/drivers/media/i2c/soc_camera/rockchip/ar0330cs_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ar0330cs_v4l2-i2c-subdev.c
index 9f74109..541299e 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ar0330cs_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ar0330cs_v4l2-i2c-subdev.c
@@ -171,8 +171,11 @@ static int ar0330cs_auto_adjust_fps(struct aptina_camera_module *cam_mod,
 	int ret;
 	u32 vts;
 
-	if ((exp_time + AR0330CS_COARSE_INTG_TIME_MAX_MARGIN) > cam_mod->vts_min)
-		vts = exp_time + AR0330CS_COARSE_INTG_TIME_MAX_MARGIN;
+	if ((cam_mod->exp_config.exp_time +
+		AR0330CS_COARSE_INTG_TIME_MAX_MARGIN)
+		> cam_mod->vts_min)
+		vts = cam_mod->exp_config.exp_time+
+			AR0330CS_COARSE_INTG_TIME_MAX_MARGIN;
 	else
 		vts = cam_mod->vts_min;
 
@@ -181,33 +184,12 @@ static int ar0330cs_auto_adjust_fps(struct aptina_camera_module *cam_mod,
 		vts & 0xFFFF);
 
 	if (IS_ERR_VALUE(ret)) {
-		aptina_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		aptina_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int ar0330cs_set_vts(struct aptina_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = aptina_camera_module_write_reg(cam_mod,
-		AR0330CS_TIMING_VTS_REG,
-		vts & 0xFFFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		aptina_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+		aptina_camera_module_pr_err(cam_mod,
+			"failed with error (%d)\n", ret);
 	} else {
-		aptina_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
+		aptina_camera_module_pr_debug(cam_mod,
+			"updated vts = %d,vts_min=%d\n",
+			vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
 
@@ -269,9 +251,6 @@ static int ar0330cs_write_aec(struct aptina_camera_module *cam_mod)
 			AR0330CS_AEC_PK_LONG_EXPO_REG,
 			AR0330CS_FETCH_BYTE_EXP(exp_time));
 
-		if (!cam_mod->auto_adjust_fps)
-			ret |= ar0330cs_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-
 		/* GROUPED_PARAMETER_HOLD*/
 		ret |= aptina_camera_module_write_reg(cam_mod,
 			0x0104, 0x00);
@@ -389,14 +368,13 @@ static int ar0330cs_g_timings(struct aptina_camera_module *cam_mod,
 	if (cam_mod->frm_intrvl_valid)
 		timings->vt_pix_clk_freq_hz =
 			cam_mod->frm_intrvl.interval.denominator
-			* vts
+			* timings->frame_length_lines
 			* timings->line_length_pck;
 	else
 		timings->vt_pix_clk_freq_hz =
 			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
+			* timings->frame_length_lines
 			* timings->line_length_pck;
-
 	timings->frame_length_lines = vts;
 
 	return ret;
diff --git a/drivers/media/i2c/soc_camera/rockchip/gc2023_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/gc2023_v4l2-i2c-subdev.c
deleted file mode 100644
index 4725e78..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/gc2023_v4l2-i2c-subdev.c
+++ /dev/null
@@ -1,953 +0,0 @@
-/*
- * drivers/media/i2c/soc_camera/xgold/gc2023.c
- *
- * gc2023 sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- * Note:
- *
- *v0.1.0:
- *1. Initialize version;
- *
- */
-
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/delay.h>
-#include <linux/module.h>
-#include <media/v4l2-subdev.h>
-#include <media/videobuf-core.h>
-#include <linux/slab.h>
-#include <media/v4l2-controls_rockchip.h>
-#include "gc_camera_module.h"
-#include <linux/gpio.h>
-
-#define GC2023_DRIVER_NAME "gc2023"
-
-#define GC2023_FETCH_GAIN(VAL) (VAL & 0xFF)       /* gain[7:0] */
-#define GC2023_AEC_ANALOG_GAIN_REG	 0xb6	/* Bits 0 -7 */
-#define GC2023_AEC_DIGITAL_INT_GAIN_REG	 0xb1	/* Bits 0 -3 */
-#define GC2023_AEC_DIGITAL_FRAC_GAIN_REG 0xb2	/* Bits 2 -7 */
-
-#define GC2023_AEC_EXPO_HIGH_REG 0x03	/* Exposure Bits 8-12 */
-#define GC2023_AEC_EXPO_LOW_REG 0x04	/* Exposure Bits 0-7 */
-
-#define GC2023_FETCH_HIGH_BYTE_EXP(VAL) ((VAL >> 8) & 0x1F)	/* 5 Bits */
-#define GC2023_FETCH_LOW_BYTE_EXP(VAL) (VAL & 0xFF)	/* 8 Bits */
-
-#define GC2023_PIDH_ADDR     0xF0
-#define GC2023_PIDL_ADDR     0xF1
-
-/* High byte of product ID */
-#define GC2023_PIDH_MAGIC 0x20
-/* Low byte of product ID  */
-#define GC2023_PIDL_MAGIC 0x23
-
-#define GC2023_EXT_CLK 24000000
-#define GC2023_TIMING_VB_HIGH_REG 0x07
-#define GC2023_TIMING_VB_LOW_REG 0x08
-#define GC2023_TIMING_HB_HIGH_REG 0x09
-#define GC2023_TIMING_HB_LOW_REG 0x0a
-#define GC2023_TIMING_WINV_HIGH_REG 0x0d
-#define GC2023_TIMING_WINV_LOW_REG 0x0e
-#define GC2023_TIMING_WINH_HIGH_REG 0x0f
-#define GC2023_TIMING_WINH_LOW_REG 0x10
-#define GC2023_FINE_INTG_TIME_MIN 0
-#define GC2023_FINE_INTG_TIME_MAX_MARGIN 0
-#define GC2023_COARSE_INTG_TIME_MIN 1
-#define GC2023_COARSE_INTG_TIME_MAX_MARGIN 4
-#define GC2023_HORIZONTAL_OUTPUT_SIZE_HIGH_REG 0x97
-#define GC2023_HORIZONTAL_OUTPUT_SIZE_LOW_REG 0x98
-#define GC2023_VERTICAL_OUTPUT_SIZE_HIGH_REG 0x95
-#define GC2023_VERTICAL_OUTPUT_SIZE_LOW_REG 0x96
-#define GC2023_H_WIN_OFF_HIGH_REG 0x93
-#define GC2023_H_WIN_OFF_LOW_REG 0x94
-#define GC2023_V_WIN_OFF_HIGH_REG 0x91
-#define GC2023_V_WIN_OFF_LOW_REG 0x92
-
-#define GC2023_UPDOWN_MIRROR 0x17
-
-static u32 GC2023_AGAIN_TBL[][2] = {
-	{0xFF, 0},
-	{0x00, 100}, /* 1x */
-	{0x01, 142}, /* 1.42x */
-	{0x02, 199}, /* 1.99x */
-	{0x03, 286}, /* 2.86x */
-	{0x04, 405}, /* 4.05x */
-	{0x05, 578}, /* 5.78x */
-	{0x06, 823}, /* 8.23x */
-	{0x07, 1172}, /* 11.72x */
-	{0x08, 1655}, /* 16.55x */
-	{0x09, 2328}, /* 23.28x */
-	{0x0a, 3327}, /* 33.27x */
-};
-
-/* ======================================================================== */
-/* Base sensor configs */
-/* ======================================================================== */
-/* Actual_window_size=1920*1080 */
-/* mclk=24Mhz,mipi_clock=768mhz,frame_rate=30fps */
-/* pixel_line_total=2840,line_frame_total=1125,row_time=29.58us */
-static struct gc_camera_module_reg gc2023_init_tab_1920_1080_30fps_1lane[] = {
-	/*  SYS */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf2, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf6, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfc, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf7, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf8, 0x0f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf9, 0x0e}, /* [0] pll enable */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfc, 0x1e},
-
-	/*  ANALOG & CISCTL */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0xf6},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x02}, /* HB */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0xc6},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x00}, /* VB */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x00}, /* row start */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x00}, /* col start */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0d, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0e, 0x40}, /* height 1088 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0f, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x88}, /* width 1928 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x54},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x18},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x54},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0xc1},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x18},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x64},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0xf4},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2f, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x99},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x38, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3b, 0x12},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3d, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcc, 0x8a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcd, 0x99},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcf, 0x70},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd0, 0x9a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd2, 0xc1},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xda, 0x28},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdc, 0x24},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe1, 0x14},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe3, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe4, 0xfa},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe6, 0x1f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe8, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe9, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xea, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xeb, 0x03},
-
-	/*  ISP */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x80, 0x5c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x88, 0x73},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x89, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00}, /* crop win y */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00}, /* crop win x */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x04}, /* crop win height */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0x38},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x07}, /* crop win width 1920 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x80},
-
-	/*  BLK */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0x22},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x3c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x60, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x61, 0x80},
-
-	/*  GAIN */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb0, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb1, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb2, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x16},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x1e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x36},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x3e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0d, 0x56},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0e, 0x5e},
-
-	/*  DNDD */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x81, 0x05},
-
-	/* dark sun */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x54, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x58, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5a, 0x05},
-
-	/* MIPI */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x5b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0xaa},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x2b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x60}, /* lwc 1920*5/4 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x09},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x36, 0x88},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x12},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-};
-
-/* ======================================================================== */
-static struct gc_camera_module_config gc2023_configs[] = {
-	{
-		.name = "1920x1080_30fps",
-		.frm_fmt = {
-			.width = 1920,
-			.height = 1080,
-			.code = V4L2_MBUS_FMT_SRGGB10_1X10
-		},
-		.frm_intrvl = {
-			.interval = {
-				.numerator = 1,
-				.denominator = 30
-			}
-		},
-		.auto_exp_enabled = false,
-		.auto_gain_enabled = false,
-		.auto_wb_enabled = false,
-		.reg_table = (void *)gc2023_init_tab_1920_1080_30fps_1lane,
-		.reg_table_num_entries =
-			sizeof(gc2023_init_tab_1920_1080_30fps_1lane) /
-			sizeof(gc2023_init_tab_1920_1080_30fps_1lane[0]),
-		.v_blanking_time_us = 5000,
-		.ignore_measurement_check = 1,
-		PLTFRM_CAM_ITF_MIPI_CFG(0, 1, 768, 24000000)
-	}
-};
-
-/*--------------------------------------------------------------------------*/
-static int gc2023_g_VTS(struct gc_camera_module *cam_mod, u32 *vts)
-{
-	u32 msb, lsb;
-	u32 vb, winv;
-	int ret;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	vb = (msb << 8) | lsb;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	winv = (msb << 8) | lsb;
-
-	*vts = winv + vb + 16;
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int gc2023_auto_adjust_fps(struct gc_camera_module *cam_mod,
-	u32 exp_time)
-{
-	int ret;
-	u32 vts;
-	u32 vb, winv;
-	u32 msb, lsb;
-
-	if ((exp_time + GC2023_COARSE_INTG_TIME_MAX_MARGIN)
-		> cam_mod->vts_min)
-		vts = exp_time + GC2023_COARSE_INTG_TIME_MAX_MARGIN;
-	else
-		vts = cam_mod->vts_min;
-
-	if (vts > 0xfff)
-		vts = 0xfff;
-	else
-		vts = vts;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	winv = (msb << 8) | lsb;
-	vb = vts - winv - 16;
-
-	ret = gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_LOW_REG,
-		vb & 0xFF);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_HIGH_REG,
-		(vb >> 8) & 0x0F);
-
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_pr_err(cam_mod,
-				"failed with error (%d)\n", ret);
-	} else {
-		gc_camera_module_pr_info(cam_mod,
-				"updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-err:
-	return ret;
-}
-
-static int gc2023_set_vts(struct gc_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-	u32 vb, winv;
-	u32 msb, lsb;
-
-	if (vts > 0xfff)
-		vts = 0xfff;
-	else
-		vts = vts;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_WINH_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	winv = (msb << 8) | lsb;
-	vb = vts - winv - 16;
-
-	ret = gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_LOW_REG,
-		vb & 0xFF);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2023_TIMING_VB_HIGH_REG,
-		(vb >> 8) & 0x0F);
-
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_pr_err(cam_mod,
-				"failed with error (%d)\n", ret);
-	} else {
-		gc_camera_module_pr_debug(cam_mod,
-				"updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-err:
-	return ret;
-}
-
-static int gc2023_write_aec(struct gc_camera_module *cam_mod)
-{
-	int i;
-	int ret = 0;
-
-	gc_camera_module_pr_info(cam_mod,
-		"exp_time = %d lines, gain = %d, flash_mode = %d\n",
-		cam_mod->exp_config.exp_time,
-		cam_mod->exp_config.gain,
-		cam_mod->exp_config.flash_mode);
-
-	if ((cam_mod->state == GC_CAMERA_MODULE_SW_STANDBY) ||
-		(cam_mod->state == GC_CAMERA_MODULE_STREAMING)) {
-		u32 a_gain_code, d_gain_code;
-		u32 gain = cam_mod->exp_config.gain;
-		u32 exp_time = cam_mod->exp_config.exp_time;
-
-		gain = gain * cam_mod->exp_config.gain_percent / 100;
-
-		if (!IS_ERR_VALUE(ret) && cam_mod->auto_adjust_fps)
-			ret |= gc2023_auto_adjust_fps(cam_mod,
-				cam_mod->exp_config.exp_time);
-
-		for (i = 11; i >= 0; i--) {
-			if (GC2023_AGAIN_TBL[i][1] < gain)
-				break;
-		}
-
-		if (i == 0)
-			i = 1;
-		if (i > 11)
-			i = 11;
-
-		a_gain_code = GC2023_AGAIN_TBL[i][0];
-		d_gain_code = gain * 64 / GC2023_AGAIN_TBL[i][1];
-
-		ret |= gc_camera_module_write_reg(cam_mod,
-			PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-			GC2023_AEC_ANALOG_GAIN_REG, a_gain_code);
-		ret |= gc_camera_module_write_reg(cam_mod,
-			PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-			GC2023_AEC_DIGITAL_INT_GAIN_REG, d_gain_code >> 6);
-		ret |= gc_camera_module_write_reg(cam_mod,
-			PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-			GC2023_AEC_DIGITAL_FRAC_GAIN_REG, (d_gain_code << 2) & 0xFC);
-
-		gc_camera_module_pr_info(cam_mod,
-			"gain = 0x%x, a_gain_code = 0x%x, d_gain_code = 0x%x\n",
-			gain, a_gain_code, d_gain_code);
-
-		if (exp_time < 1)
-			exp_time = 1;
-		if (exp_time > 8191)
-			exp_time = 8191;
-
-		ret |= gc_camera_module_write_reg(cam_mod,
-			PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-			GC2023_AEC_EXPO_HIGH_REG,
-			GC2023_FETCH_HIGH_BYTE_EXP(exp_time));
-		ret |= gc_camera_module_write_reg(cam_mod,
-			PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-			GC2023_AEC_EXPO_LOW_REG,
-			GC2023_FETCH_LOW_BYTE_EXP(exp_time));
-
-		if (!cam_mod->auto_adjust_fps)
-			ret |= gc2023_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-	}
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_err(cam_mod,
-			"failed with error (%d)\n", ret);
-
-	return ret;
-}
-
-static int gc2023_g_ctrl(struct gc_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-	case V4L2_CID_FLASH_LED_MODE:
-		/* nothing to be done here */
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_debug(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_filltimings(struct gc_camera_module_custom_config *custom)
-{
-	int i, j;
-	u32 win_h_off = 0, win_v_off = 0;
-	u32 vb = 0, hb = 0, winv = 0, winh = 0;
-	struct gc_camera_module_config *config;
-	struct gc_camera_module_timings *timings;
-	struct gc_camera_module_reg *reg_table;
-	int reg_table_num_entries;
-
-	for (i = 0; i < custom->num_configs; i++) {
-		config = &custom->configs[i];
-		reg_table = config->reg_table;
-		reg_table_num_entries = config->reg_table_num_entries;
-		timings = &config->timings;
-
-		memset(timings, 0x00, sizeof(*timings));
-		for (j = 0; j < reg_table_num_entries; j++) {
-			switch (reg_table[j].reg) {
-			case GC2023_TIMING_VB_HIGH_REG:
-				vb = ((reg_table[j].val << 8) |
-					 (vb & 0xff));
-				break;
-			case GC2023_TIMING_VB_LOW_REG:
-				vb = (reg_table[j].val |
-					 (vb & 0xff00));
-				break;
-			case GC2023_TIMING_HB_HIGH_REG:
-				hb = ((reg_table[j].val << 8) |
-					 hb);
-				break;
-			case GC2023_TIMING_HB_LOW_REG:
-				hb = (reg_table[j].val |
-					 (hb & 0xff00));
-				break;
-			case GC2023_TIMING_WINV_HIGH_REG:
-				winv = ((reg_table[j].val << 8) |
-					   (winv & 0xff));
-				break;
-			case GC2023_TIMING_WINV_LOW_REG:
-				winv = (reg_table[j].val |
-					   (winv & 0xff00));
-				break;
-			case GC2023_TIMING_WINH_HIGH_REG:
-				winh = ((reg_table[j].val << 8) |
-					   winh);
-				break;
-			case GC2023_TIMING_WINH_LOW_REG:
-				winh = (reg_table[j].val |
-					   (winh & 0xff00));
-				break;
-			case GC2023_H_WIN_OFF_HIGH_REG:
-				win_h_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case GC2023_H_WIN_OFF_LOW_REG:
-				win_h_off |= (reg_table[j].val & 0xff);
-				break;
-			case GC2023_V_WIN_OFF_HIGH_REG:
-				win_v_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case GC2023_V_WIN_OFF_LOW_REG:
-				win_v_off |= (reg_table[j].val & 0xff);
-				break;
-			case GC2023_HORIZONTAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_width =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_width & 0xff));
-				break;
-			case GC2023_HORIZONTAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_width =
-					(reg_table[j].val |
-					(timings->sensor_output_width & 0xff00));
-				break;
-			case GC2023_VERTICAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_height =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_height & 0xff));
-				break;
-			case GC2023_VERTICAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_height =
-					(reg_table[j].val |
-					(timings->sensor_output_height & 0xff00));
-				break;
-			}
-		}
-
-		/* timings->frame_length_lines = winv + 16 + vb;
-		timings->line_length_pck = winh + 202 + hb; */
-		timings->frame_length_lines = 1120;
-		timings->line_length_pck = 2840;
-
-		timings->crop_horizontal_start = win_h_off;
-		timings->crop_horizontal_end = win_h_off + timings->sensor_output_width;
-		timings->crop_vertical_start = win_v_off;
-		timings->crop_vertical_end = win_v_off + timings->sensor_output_height;
-
-		timings->exp_time >>= 4;
-		timings->vt_pix_clk_freq_hz =
-			config->frm_intrvl.interval.denominator
-			* timings->frame_length_lines
-			* timings->line_length_pck;
-
-		timings->coarse_integration_time_min =
-			GC2023_COARSE_INTG_TIME_MIN;
-		timings->coarse_integration_time_max_margin =
-			GC2023_COARSE_INTG_TIME_MAX_MARGIN;
-
-		/* OV Sensor do not use fine integration time. */
-		timings->fine_integration_time_min =
-			GC2023_FINE_INTG_TIME_MIN;
-		timings->fine_integration_time_max_margin =
-			GC2023_FINE_INTG_TIME_MAX_MARGIN;
-
-		timings->binning_factor_x = 1;
-		timings->binning_factor_y = 1;
-	}
-
-	return 0;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_g_timings(struct gc_camera_module *cam_mod,
-			    struct gc_camera_module_timings *timings)
-{
-	int ret = 0;
-	unsigned int vts;
-
-	if (IS_ERR_OR_NULL(cam_mod->active_config))
-		goto err;
-
-	*timings = cam_mod->active_config->timings;
-
-	vts = (!cam_mod->vts_cur) ?
-		timings->frame_length_lines :
-		cam_mod->vts_cur;
-
-	if (cam_mod->frm_intrvl_valid)
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-	else
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-
-	timings->frame_length_lines = vts;
-
-	return ret;
-err:
-	gc_camera_module_pr_err(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_s_ctrl(struct gc_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-		ret = gc2023_write_aec(cam_mod);
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_err(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_s_ext_ctrls(struct gc_camera_module *cam_mod,
-				 struct gc_camera_module_ext_ctrls *ctrls)
-{
-	int ret = 0;
-
-	if ((ctrls->ctrls[0].id == V4L2_CID_GAIN ||
-		ctrls->ctrls[0].id == V4L2_CID_EXPOSURE))
-		ret = gc2023_write_aec(cam_mod);
-	else
-		ret = -EINVAL;
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_debug(cam_mod,
-			"failed with error (%d)\n", ret);
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-static int gc2023_start_streaming(struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_info(cam_mod, "active config=%s\n",
-		cam_mod->active_config->name);
-
-	ret = gc2023_g_VTS(cam_mod, &cam_mod->vts_min);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x03);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0x10, 0x90);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n",
-		ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_stop_streaming(struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_info(cam_mod, "\n");
-	ret = gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x03);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0x10, 0x00);
-	ret |= gc_camera_module_write_reg(cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2023_check_camera_id(struct gc_camera_module *cam_mod)
-{
-	u32 pidh, pidl;
-	int ret = 0;
-
-	gc_camera_module_pr_err(cam_mod, "\n");
-
-	ret |= gc_camera_module_read_reg(cam_mod, 1,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, GC2023_PIDH_ADDR, &pidh);
-	ret |= gc_camera_module_read_reg(cam_mod, 1,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, GC2023_PIDL_ADDR, &pidl);
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_pr_err(cam_mod,
-			"register read failed, camera module powered off?\n");
-		goto err;
-	}
-
-	if ((pidh == GC2023_PIDH_MAGIC) && (pidl == GC2023_PIDL_MAGIC)) {
-		gc_camera_module_pr_info(cam_mod,
-			"successfully detected camera ID 0x%02x%02x\n",
-			pidh, pidl);
-	} else {
-		gc_camera_module_pr_err(cam_mod,
-			"wrong camera ID, expected 0x%02x%02x, detected 0x%02x%02x\n",
-			GC2023_PIDH_MAGIC, GC2023_PIDL_MAGIC, pidh, pidl);
-		ret = -EINVAL;
-		goto err;
-	}
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-int gc_camera_gc2023_module_s_ctrl(
-	struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	return 0;
-}
-
-int gc_camera_gc2023_module_s_ext_ctrls(
-	struct v4l2_subdev *sd,
-	struct v4l2_ext_controls *ctrls)
-{
-	return 0;
-}
-
-long gc_camera_gc2023_module_ioctl(struct v4l2_subdev *sd,
-	unsigned int cmd,
-	void *arg)
-{
-	return 0;
-}
-
-
-/* ======================================================================== */
-/* This part is platform dependent */
-/* ======================================================================== */
-static struct v4l2_subdev_core_ops gc2023_camera_module_core_ops = {
-	.g_ctrl = gc_camera_module_g_ctrl,
-	.s_ctrl = gc_camera_module_s_ctrl,
-	.s_ext_ctrls = gc_camera_module_s_ext_ctrls,
-	.s_power = gc_camera_module_s_power,
-	.ioctl = gc_camera_module_ioctl
-};
-
-static struct v4l2_subdev_video_ops gc2023_camera_module_video_ops = {
-	.enum_frameintervals = gc_camera_module_enum_frameintervals,
-	.s_mbus_fmt = gc_camera_module_s_fmt,
-	.g_mbus_fmt = gc_camera_module_g_fmt,
-	.try_mbus_fmt = gc_camera_module_try_fmt,
-	.s_frame_interval = gc_camera_module_s_frame_interval,
-	.g_frame_interval = gc_camera_module_g_frame_interval,
-	.s_stream = gc_camera_module_s_stream
-};
-
-static struct v4l2_subdev_ops gc2023_camera_module_ops = {
-	.core = &gc2023_camera_module_core_ops,
-	.video = &gc2023_camera_module_video_ops
-};
-
-static struct gc_camera_module gc2023;
-
-static struct gc_camera_module_custom_config gc2023_custom_config = {
-	.start_streaming = gc2023_start_streaming,
-	.stop_streaming = gc2023_stop_streaming,
-	.s_ctrl = gc2023_s_ctrl,
-	.g_ctrl = gc2023_g_ctrl,
-	.s_ext_ctrls = gc2023_s_ext_ctrls,
-	.g_timings = gc2023_g_timings,
-	.check_camera_id = gc2023_check_camera_id,
-	.s_vts = gc2023_auto_adjust_fps,
-	.configs = gc2023_configs,
-	.num_configs = sizeof(gc2023_configs) / sizeof(gc2023_configs[0]),
-	.power_up_delays_ms = {5, 30, 30},
-	.exposure_valid_frame = {4, 4}
-};
-
-static int gc2023_probe(
-	struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	dev_info(&client->dev, "probing...\n");
-
-	gc2023_filltimings(&gc2023_custom_config);
-
-	v4l2_i2c_subdev_init(&gc2023.sd, client,
-				&gc2023_camera_module_ops);
-	gc2023.sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-
-	gc2023.custom = gc2023_custom_config;
-
-	dev_info(&client->dev, "probing successful\n");
-	return 0;
-}
-
-/* ======================================================================== */
-static int gc2023_remove(
-	struct i2c_client *client)
-{
-	struct gc_camera_module *cam_mod = i2c_get_clientdata(client);
-
-	dev_info(&client->dev, "removing device...\n");
-
-	if (!client->adapter)
-		return -ENODEV;	/* our client isn't attached */
-
-	gc_camera_module_release(cam_mod);
-
-	dev_info(&client->dev, "removed\n");
-	return 0;
-}
-
-static const struct i2c_device_id gc2023_id[] = {
-	{ GC2023_DRIVER_NAME, 0 },
-	{ }
-};
-
-static struct of_device_id gc2023_of_match[] = {
-	{.compatible = "galaxycore,gc2023-v4l2-i2c-subdev"},
-	{},
-};
-
-MODULE_DEVICE_TABLE(i2c, gc2023_id);
-
-static struct i2c_driver gc2023_i2c_driver = {
-	.driver = {
-		.name = GC2023_DRIVER_NAME,
-		.owner = THIS_MODULE,
-		.of_match_table = gc2023_of_match
-	},
-	.probe = gc2023_probe,
-	.remove = gc2023_remove,
-	.id_table = gc2023_id,
-};
-
-module_i2c_driver(gc2023_i2c_driver);
-
-MODULE_DESCRIPTION("SoC Camera driver for gc2023");
-MODULE_AUTHOR("Eike Grimpe");
-MODULE_LICENSE("GPL");
-
diff --git a/drivers/media/i2c/soc_camera/rockchip/gc2145_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/gc2145_v4l2-i2c-subdev.c
deleted file mode 100644
index 2981bba..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/gc2145_v4l2-i2c-subdev.c
+++ /dev/null
@@ -1,2351 +0,0 @@
-/*
- * drivers/media/i2c/soc_camera/xgold/gc2145.c
- *
- * gc2145 sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- * Note:
- *
- *v0.1.0:
- *1. Initialize version;
- *
- */
-
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/delay.h>
-#include <linux/module.h>
-#include <media/v4l2-subdev.h>
-#include <media/videobuf-core.h>
-#include <linux/slab.h>
-#include <media/v4l2-controls_rockchip.h>
-#include "gc_camera_module.h"
-#include <linux/gpio.h>
-
-#define GC2145_DRIVER_NAME "gc2145"
-
-#define GC2145_FETCH_GAIN(VAL) (VAL & 0xFF)       /* gain[7:0] */
-#define GC2145_AEC_ANALOG_GAIN_REG	 0xb6	/* Bits 0 -7 */
-#define GC2145_AEC_DIGITAL_INT_GAIN_REG	 0xb1	/* Bits 0 -3 */
-#define GC2145_AEC_DIGITAL_FRAC_GAIN_REG 0xb2	/* Bits 2 -7 */
-
-#define GC2145_AEC_EXPO_HIGH_REG 0x03	/* Exposure Bits 8-12 */
-#define GC2145_AEC_EXPO_LOW_REG 0x04	/* Exposure Bits 0-7 */
-
-#define GC2145_FETCH_HIGH_BYTE_EXP(VAL) ((VAL >> 8) & 0x1F)	/* 5 Bits */
-#define GC2145_FETCH_LOW_BYTE_EXP(VAL) (VAL & 0xFF)	/* 8 Bits */
-
-#define GC2145_PIDH_ADDR     0xF0
-#define GC2145_PIDL_ADDR     0xF1
-
-/* High byte of product ID */
-#define GC2145_PIDH_MAGIC 0x21
-/* Low byte of product ID  */
-#define GC2145_PIDL_MAGIC 0x45
-
-#define GC2145_EXT_CLK 24000000
-#define GC2145_TIMING_VB_HIGH_REG 0x07
-#define GC2145_TIMING_VB_LOW_REG 0x08
-#define GC2145_TIMING_HB_HIGH_REG 0x09
-#define GC2145_TIMING_HB_LOW_REG 0x0a
-#define GC2145_TIMING_WINH_HIGH_REG 0x0d
-#define GC2145_TIMING_WINH_LOW_REG 0x0e
-#define GC2145_TIMING_WINV_HIGH_REG 0x0f
-#define GC2145_TIMING_WINV_LOW_REG 0x10
-#define GC2145_FINE_INTG_TIME_MIN 0
-#define GC2145_FINE_INTG_TIME_MAX_MARGIN 0
-#define GC2145_COARSE_INTG_TIME_MIN 1
-#define GC2145_COARSE_INTG_TIME_MAX_MARGIN 4
-#define GC2145_HORIZONTAL_OUTPUT_SIZE_HIGH_REG 0x97
-#define GC2145_HORIZONTAL_OUTPUT_SIZE_LOW_REG 0x98
-#define GC2145_VERTICAL_OUTPUT_SIZE_HIGH_REG 0x95
-#define GC2145_VERTICAL_OUTPUT_SIZE_LOW_REG 0x96
-#define GC2145_H_WIN_OFF_HIGH_REG 0x93
-#define GC2145_H_WIN_OFF_LOW_REG 0x94
-#define GC2145_V_WIN_OFF_HIGH_REG 0x91
-#define GC2145_V_WIN_OFF_LOW_REG 0x92
-
-#define GC2145_UPDOWN_MIRROR 0x17
-
-#if 1
-/* ======================================================================== */
-/* Base sensor configs */
-/* ======================================================================== */
-/* Actual_window_size=1600*1200 */
-/* mclk=24Mhz, DCLK=120mhz, frame_rate=*fps */
-/* line_frame_total=1200, row_time=160us */
-static struct gc_camera_module_reg gc2145_init_tab_1600_1200_cif[] = {
-	/*SENSORDB("GC2145_Sensor_Init"},*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfc, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf6, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf7, 0x1d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf8, 0x84},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf9, 0xfe},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf2, 0x00},
-
-	/*  ANALOG & CISCTL */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0d, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0e, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0f, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x52},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x2e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x14}, /*mirror*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x22},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x4b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0x88},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0x78},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xa0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0x16},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x60},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0x01},
-
-	/*  ISP reg */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x80, 0x7f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x81, 0x26},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x82, 0xfa},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x83, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x84, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x86, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x88, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x89, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x85, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8a, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8b, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb0, 0x55},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x3b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x46},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x60},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x40},
-
-	/*  BLK */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0x42},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x41, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x43, 0x5b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5e, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5f, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x60, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x61, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x62, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x63, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x64, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x65, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x66, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x67, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x68, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x69, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x00},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6a, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6b, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6c, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6d, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6e, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6f, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x70, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x71, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x72, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7e, 0x3c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7f, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x48, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x49, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x0b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/*  AEC */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x82},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x11},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x7b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0x11},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0x61},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0x35},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0f, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x35},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x31},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3e, 0x28},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3f, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x41, 0x0f},
-
-	/*  INTPEE */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x6c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0xcb},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x33},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x84},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x65},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa2, 0x11},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/*  DNDD */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x80, 0xc1},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x81, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x82, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x83, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x84, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x86, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x87, 0x50},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x88, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x89, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8a, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8b, 0x10},
-
-	/*  ASDE */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa3, 0x50},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa4, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa5, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa6, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xab, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xae, 0x0c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb3, 0x46},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb4, 0x64},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x38},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb7, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb9, 0x2b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3c, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3d, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/*  GAMMA */
-	/* gamma1 */
-	#if 1
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x09},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x13},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x19},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x14, 0x27},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0x37},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x16, 0x45},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x53},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x69},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x7d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x8f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x9d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0xa9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0xbd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0xcd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0xd9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0xe3},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0xea},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xef},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0xf5},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0xf9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0xff},
-	#else
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x12},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x19},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x1f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x14, 0x2c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0x38},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x16, 0x42},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x4e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x63},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x76},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x87},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x96},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0xa2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0xb8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0xcb},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0xd8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0xe9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0xf8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0xfd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0xff},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	#endif
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x2b},
-
-	/* gamma2 */
-	#if 1
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x0f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x14},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0x19},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x1e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x27},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x33},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0x3b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x45},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0x59},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2f, 0x69},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x7c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x89},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x32, 0x98},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0xae},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x35, 0xcf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x36, 0xda},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x37, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x38, 0xe9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x39, 0xf3},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3a, 0xf9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3b, 0xff},
-	#else
-
-	/* Gamma outdoor */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x17},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x18},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0x1c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x28},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x34},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x49},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0x5b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2f, 0x6d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x7d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x89},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x32, 0x97},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0xac},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x35, 0xcf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x36, 0xda},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x37, 0xe5},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x38, 0xec},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x39, 0xf8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3a, 0xfd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3b, 0xff},
-	#endif
-
-	/* YCP */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd1, 0x32},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd2, 0x32},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd3, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd6, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd7, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0xda},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdd, 0x14},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xde, 0x86},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x3f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0xd8},
-
-	/* abs */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9f, 0x40},
-
-	/* LSC */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc2, 0x14},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0x0c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc8, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc9, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xca, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbc, 0x24},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbd, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbe, 0x0b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x25},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb7, 0x16},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb8, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcb, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcc, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcd, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbf, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc0, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc1, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb9, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xba, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbb, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xaa, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xab, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xac, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xad, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xae, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xaf, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb0, 0x0b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb1, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb2, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb3, 0x17},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb4, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb5, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd0, 0x09},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd1, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd2, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd6, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd7, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd9, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xda, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdb, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd3, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd4, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd5, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa4, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa5, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa6, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa7, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa8, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa9, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa1, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa2, 0x80},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdf, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdc, 0x25},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdd, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe0, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe1, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe2, 0x77},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe3, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe6, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe7, 0xa0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe8, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe9, 0xa0},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/* AWB */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01}, /*D75 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x71},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x91},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x70},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01}, /* D65 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6f},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xaf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xd0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xef},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},/*D50*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xae},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xce},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xad},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xac},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcc},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcb},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xab},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},/*CWF*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xaa},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x89},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},/*tl84*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x0b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x0a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xeb},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xea},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x09},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x29},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x2a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-	#if 0 /* A */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	#endif
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x49},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x69},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x89},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x68},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x69},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},/*H*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe9},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x09},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa7},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc7},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe7},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x50, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x51, 0xa8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x52, 0x47},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x53, 0x38},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x54, 0xc7},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x56, 0x0e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x58, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5b, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5c, 0x74},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5d, 0x8b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x61, 0xdb},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x62, 0xb8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x63, 0x86},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x64, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x65, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x67, 0xa8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x68, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x69, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6a, 0xa8},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6b, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6c, 0xaf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6d, 0x8b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6e, 0x50},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6f, 0x18},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x73, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x70, 0x0d},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x71, 0x60},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x72, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x75, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7f, 0x0c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x70},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x77, 0x58},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x78, 0xa0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x79, 0x5e},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7a, 0x54},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7b, 0x58},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/* CC */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc0, 0x01},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc1, 0x44},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc2, 0xfd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0xF0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0xfd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x46},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc8, 0xfd},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc9, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xca, 0xe0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcb, 0x45},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcc, 0xec},
-
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcd, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xce, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcf, 0xf0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe3, 0x0c},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe4, 0x4b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe5, 0xe0},
-
-	/* ABS */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9f, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/* OUTPUT */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf2, 0x0f},
-	/* dark sun */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0xbf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x46, 0xcf},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/* frame rate 50Hz */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	#if 1/* 12fps */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x71},
-	#endif
-	#if 0/* 6fps */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x56},
-	#endif
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x32},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0xfa},
-
-	/* 12fps */
-	#if 1
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0xe2},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	#endif
-	#if 0
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0xe2}, /*20fps*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0xd6}, /*14fps*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x07},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0xd0}, /*12fps*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x0b},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0xb8}, /*8fps */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	#endif
-
-	/*************
-	***SENSORDB("GC2145_Sensor_SVGA"}****
-	***********/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfd, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00},
-
-	/* crop window */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0x58},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x20},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x99, 0x11},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9a, 0x06},
-
-	/* AWB */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9d, 0x08},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x00},
-
-	/* AEC */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0x60},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x02},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x48},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x18},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x50},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x10},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x38},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x03},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-	/* SENSORDB("GC2145_Sensor_2M"} */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* Reset related, page_select 0 */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfd, 0x00}, /* Scalar mode */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x11}, /* clk_div_mode */
-
-	/* crop window */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0xb0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x40},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x99, 0x11},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9a, 0x06},
-
-	/* AWB */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x06},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x60},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x01},
-
-	/* AEC */
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0xc0},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x04},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x90},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x30},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x80},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x82},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x15},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x15},/*if 0xfa=11,then 0x21=15;else if 0xfa=00,then 0x21=04*/
-	{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-};
-#endif
-
-#if 1
-/* ======================================================================== */
-/* Base sensor configs */
-/* ======================================================================== */
-/* Actual_window_size=800*600 */
-/* mclk=24Mhz, DCLK=60mhz, frame_rate=*fps */
-/* frame_line__total=800 pixel, row_time=80us */
-static struct gc_camera_module_reg gc2145_init_tab_800_600_cif[] = {
-		/*SENSORDB("GC2145_Sensor_Init"},*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfc, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf6, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf7, 0x1d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf8, 0x84},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf9, 0xfe},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf2, 0x00},
-
-		/*  ANALOG & CISCTL */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0d, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0e, 0xc0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0f, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x52},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x2e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x14}, /* mirror	*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x22},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x0e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x4b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0x88},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0x78},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xa0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0x16},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x60},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0x01},
-
-		/*  ISP reg */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x80, 0x7f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x81, 0x26},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x82, 0xfa},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x83, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x84, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x86, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x88, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x89, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x85, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8a, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8b, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb0, 0x55},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x3b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x46},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x60},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x40},
-
-		/*  BLK */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0x42},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x41, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x43, 0x5b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5e, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5f, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x60, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x61, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x62, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x63, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x64, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x65, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x66, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x67, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x68, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x69, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x00},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6a, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6b, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6c, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6d, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6e, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6f, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x70, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x71, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x72, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7e, 0x3c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7f, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x48, 0x15},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x49, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x0b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/*  AEC */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0xc0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x30},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x30},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x09, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x82},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0b, 0x11},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0c, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x7b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0x11},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0x61},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0x35},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0f, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x35},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x31},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3e, 0x28},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3f, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x41, 0x0f},
-
-		/*  INTPEE */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x6c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0xcb},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x33},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x84},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x65},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa2, 0x11},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/*  DNDD */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x80, 0xc1},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x81, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x82, 0x05},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x83, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x84, 0x0a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x86, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x87, 0x50},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x88, 0x15},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x89, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8a, 0x30},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x8b, 0x10},
-
-		/*  ASDE */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa3, 0x50},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa4, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa5, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa6, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xab, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xae, 0x0c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb3, 0x46},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb4, 0x64},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x38},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb7, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb9, 0x2b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3c, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3d, 0x15},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/*  GAMMA */
-		/* gamma1 */
-		#if 1
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x09},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x0d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x13},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x19},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x14, 0x27},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0x37},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x16, 0x45},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x53},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x69},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x7d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x8f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x9d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0xa9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0xbd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0xcd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0xd9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0xe3},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0xea},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xef},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0xf5},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0xf9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0xff},
-		#else
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x10, 0x0a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x11, 0x12},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x12, 0x19},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x13, 0x1f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x14, 0x2c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x15, 0x38},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x16, 0x42},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x17, 0x4e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x18, 0x63},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x19, 0x76},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1a, 0x87},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1b, 0x96},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1c, 0xa2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1d, 0xb8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1e, 0xcb},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x1f, 0xd8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0xe9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x22, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x23, 0xf8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x24, 0xfd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0xff},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		#endif
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x2b},
-
-		/* gamma2 */
-		#if 1
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x0f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x14},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0x19},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x1e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x27},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x33},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0x3b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x45},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0x59},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2f, 0x69},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x7c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x89},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x32, 0x98},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0xae},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0xc0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x35, 0xcf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x36, 0xda},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x37, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x38, 0xe9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x39, 0xf3},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3a, 0xf9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3b, 0xff},
-		#else
-
-		/* Gamma outdoor */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0x17},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x18},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0x1c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0x28},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x34},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x49},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0x5b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2f, 0x6d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x30, 0x7d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x31, 0x89},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x32, 0x97},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x33, 0xac},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x34, 0xc0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x35, 0xcf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x36, 0xda},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x37, 0xe5},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x38, 0xec},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x39, 0xf8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3a, 0xfd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x3b, 0xff},
-		#endif
-
-		/* YCP */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd1, 0x32},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd2, 0x32},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd3, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd6, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd7, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0xda},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdd, 0x14},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xde, 0x86},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x3f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0xd8},
-
-		/* abs */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9f, 0x40},
-
-		/* LSC */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc2, 0x14},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x0d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0x0c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc8, 0x15},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc9, 0x0d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xca, 0x0a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbc, 0x24},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbd, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbe, 0x0b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x25},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb7, 0x16},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb8, 0x15},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcb, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcc, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcd, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbf, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc0, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc1, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb9, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xba, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xbb, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xaa, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xab, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xac, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xad, 0x05},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xae, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xaf, 0x0e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb0, 0x0b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb1, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb2, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb3, 0x17},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb4, 0x0e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb5, 0x0e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd0, 0x09},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd1, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd2, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd6, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd7, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd8, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd9, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xda, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdb, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd3, 0x0a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd4, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xd5, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa4, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa5, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa6, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa7, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa8, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa9, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa1, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xa2, 0x80},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdf, 0x0d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdc, 0x25},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xdd, 0x30},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe0, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe1, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe2, 0x77},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe3, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe6, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe7, 0xa0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe8, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe9, 0xa0},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/* AWB */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4b, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x00},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01}, /*D75 */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x71},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x91},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x70},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01}, /* D65 */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x90},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6f},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xaf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xd0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xef},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x02},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},/*D50*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xae},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xce},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xad},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xac},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcc},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xcb},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xab},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x03},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},/*CWF*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xaa},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x89},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x04},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},/*tl84*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x0b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x0a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xeb},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xea},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x09},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x29},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x2a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x4a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x05},
-		#if 0 /* A */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x6a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		#endif
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x8a},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x49},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x69},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x89},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x48},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x68},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x69},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},/*H*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xca},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe9},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x09},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xa7},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xc7},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0xe7},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4c, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4d, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4e, 0x07},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x4f, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x50, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x51, 0xa8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x52, 0x47},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x53, 0x38},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x54, 0xc7},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x56, 0x0e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x58, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5b, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5c, 0x74},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x5d, 0x8b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x61, 0xdb},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x62, 0xb8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x63, 0x86},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x64, 0xc0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x65, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x67, 0xa8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x68, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x69, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6a, 0xa8},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6b, 0xb0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6c, 0xaf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6d, 0x8b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6e, 0x50},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x6f, 0x18},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x73, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x70, 0x0d},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x71, 0x60},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x72, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x75, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7f, 0x0c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x76, 0x70},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x77, 0x58},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x78, 0xa0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x79, 0x5e},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7a, 0x54},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x7b, 0x58},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/* CC */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc0, 0x01},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc1, 0x44},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc2, 0xfd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc3, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc4, 0xF0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc5, 0x48},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc6, 0xfd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc7, 0x46},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc8, 0xfd},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xc9, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xca, 0xe0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcb, 0x45},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcc, 0xec},
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcd, 0x48},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xce, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xcf, 0xf0},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe3, 0x0c},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe4, 0x4b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xe5, 0xe0},
-
-		/* ABS */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9f, 0x40},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/* OUTPUT */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xf2, 0x0f},
-		/* dark sun */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x40, 0xbf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x46, 0xcf},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/*frame rate 50Hz*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		#if 1 /*24fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x71},
-		#endif
-		#if 0 /*20fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x56},
-		#endif
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x32},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x25, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x26, 0xfa},
-
-		#if 1
-		/*24fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0xe2},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		#endif
-
-		#if 0
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x27, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x28, 0xe2}, /*20fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x29, 0x06},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2a, 0xd6}, /*14fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2b, 0x07},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2c, 0xd0}, /*12fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2d, 0x0b},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x2e, 0xb8}, /*8fps*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		#endif
-
-		/*/SENSORDB("GC2145_Sensor_SVGA"},*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfd, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00},
-		/*crop window*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0x58},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x99, 0x11},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9a, 0x06},
-		/*AWB*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x30},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x48},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9d, 0x08},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x00},
-		/*AEC*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0x60},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x02},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x48},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x18},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x50},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x10},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x38},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x80},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x03},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00},
-
-		/*SENSORDB("GC2145_Sensor_SVGA"}*/
-
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* Reset related */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xb6, 0x01}, /* AEC_enable	*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfd, 0x01}, /* Scalar mode */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfa, 0x00}, /* clk_div_mode */
-		/* crop window */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* page_select 0 */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x90, 0x01}, /* Crop enable*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x91, 0x00}, /* out_win_y1 =*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x92, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x93, 0x00}, /* out_win_x1 =*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x94, 0x00},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x95, 0x02}, /* out_win_heigh*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x96, 0x58},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x97, 0x03}, /* out_win_width*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x98, 0x20},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x99, 0x11}, /* subsample =*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9a, 0x06}, /* Subsample mod*/
-		/* AWB */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* page_select 0*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xec, 0x02}, /* C_big_win_x0*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xed, 0x02}, /* C_big_win_y0*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xee, 0x30}, /* C_big_win_x1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xef, 0x48}, /* C_big_win_y1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x02}, /* page_select 2*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x9d, 0x08}, /* Edge_effect_s*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01}, /* page_select 1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x74, 0x00},
-		/* AEC */
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x01}, /* page_select 1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x01, 0x04}, /* AEC_x1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x02, 0x60}, /* AEC_x2*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x03, 0x02}, /* AEC_y1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x04, 0x48}, /* AEC_y2*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x05, 0x18}, /* AEC_center_x*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x06, 0x50}, /* AEC_center_x2*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x07, 0x10}, /* AEC_center_y1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x08, 0x38}, /* AEC_center_y2*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x0a, 0x80}, /* AEC_mode1*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x21, 0x04},
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* page_select 0*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0x20, 0x03}, /* Analog mode3*/
-		{GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA, 0xfe, 0x00}, /* page_select 0*/
-
-};
-#endif
-
-/* ======================================================================== */
-static struct gc_camera_module_config gc2145_configs[] = {
-	#if 1
-	{
-		.name = "720p",
-		.frm_fmt = {
-			.width = 1280,
-			.height = 720,
-			.code = V4L2_MBUS_FMT_YUYV8_2X8
-		},
-		.frm_intrvl = {
-			.interval = {
-				.numerator = 1,
-				.denominator = 8
-			}
-		},
-		.auto_exp_enabled = false,
-		.auto_gain_enabled = false,
-		.auto_wb_enabled = false,
-		.reg_table = (void *)gc2145_init_tab_1600_1200_cif,
-		.reg_table_num_entries =
-			sizeof(gc2145_init_tab_1600_1200_cif) /
-			sizeof(gc2145_init_tab_1600_1200_cif[0]),
-		.v_blanking_time_us = 1740,
-		.ignore_measurement_check = 1,
-		PLTFRM_CAM_ITF_DVP_CFG(
-			PLTFRM_CAM_ITF_BT601_8,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SDR_POS_EDG,
-			60000000,
-			GC2145_EXT_CLK)
-	},
-	#endif
-
-	#if 1
-	{
-		.name = "480p",
-		.frm_fmt = {
-			.width = 640,
-			.height = 480,
-			.code = V4L2_MBUS_FMT_YUYV8_2X8
-		},
-		.frm_intrvl = {
-			.interval = {
-				.numerator = 1,
-				.denominator = 20
-			}
-		},
-		.auto_exp_enabled = false,
-		.auto_gain_enabled = false,
-		.auto_wb_enabled = false,
-		.reg_table = (void *)gc2145_init_tab_800_600_cif,
-		.reg_table_num_entries =
-			sizeof(gc2145_init_tab_800_600_cif) /
-			sizeof(gc2145_init_tab_800_600_cif[0]),
-		.v_blanking_time_us = 1760,
-		.ignore_measurement_check = 1,
-		PLTFRM_CAM_ITF_DVP_CFG(
-			PLTFRM_CAM_ITF_BT601_8,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SDR_POS_EDG,
-			60000000,
-			GC2145_EXT_CLK)
-	}
-	#endif
-};
-
-/*--------------------------------------------------------------------------*/
-static int gc2145_g_VTS(struct gc_camera_module *cam_mod, u32 *vts)
-{
-	u32 msb, lsb;
-	u32 vb, winv;
-	int ret;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2145_TIMING_VB_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2145_TIMING_VB_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	vb = (msb << 8) | lsb;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2145_TIMING_WINH_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = gc_camera_module_read_reg_table(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1,
-		GC2145_TIMING_WINH_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	winv = (msb << 8) | lsb;
-
-	*vts = winv + vb + 16;
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int gc2145_auto_adjust_fps(
-			struct gc_camera_module *cam_mod,
-			u32 exp_time)
-{
-	int ret = 0;
-
-	return ret;
-}
-
-static int gc2145_write_aec(struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	return ret;
-}
-
-static int gc2145_g_ctrl(struct gc_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-	case V4L2_CID_FLASH_LED_MODE:
-		/* nothing to be done here */
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_debug(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_filltimings(struct gc_camera_module_custom_config *custom)
-{
-	int i, j;
-	u32 win_h_off = 0, win_v_off = 0;
-	u32 vb = 0, hb = 0, winv = 0, winh = 0;
-	struct gc_camera_module_config *config;
-	struct gc_camera_module_timings *timings;
-	struct gc_camera_module_reg *reg_table;
-	int reg_table_num_entries;
-
-	for (i = 0; i < custom->num_configs; i++) {
-		config = &custom->configs[i];
-		reg_table = config->reg_table;
-		reg_table_num_entries = config->reg_table_num_entries;
-		timings = &config->timings;
-
-		memset(timings, 0x00, sizeof(*timings));
-		for (j = 0; j < reg_table_num_entries; j++) {
-			switch (reg_table[j].reg) {
-			case GC2145_TIMING_VB_HIGH_REG:
-				vb = ((reg_table[j].val << 8) |
-					 (vb & 0xff));
-				break;
-			case GC2145_TIMING_VB_LOW_REG:
-				vb = (reg_table[j].val |
-					 (vb & 0xff00));
-				break;
-			case GC2145_TIMING_HB_HIGH_REG:
-				hb = ((reg_table[j].val << 8) |
-					 hb);
-				break;
-			case GC2145_TIMING_HB_LOW_REG:
-				hb = (reg_table[j].val |
-					 (hb & 0xff00));
-				break;
-			case GC2145_TIMING_WINV_HIGH_REG:
-				winv = ((reg_table[j].val << 8) |
-					   (winv & 0xff));
-				break;
-			case GC2145_TIMING_WINV_LOW_REG:
-				winv = (reg_table[j].val |
-					   (winv & 0xff00));
-				break;
-			case GC2145_TIMING_WINH_HIGH_REG:
-				winh = ((reg_table[j].val << 8) |
-					   winh);
-				break;
-			case GC2145_TIMING_WINH_LOW_REG:
-				winh = (reg_table[j].val |
-					   (winh & 0xff00));
-				break;
-			case GC2145_H_WIN_OFF_HIGH_REG:
-				win_h_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case GC2145_H_WIN_OFF_LOW_REG:
-				win_h_off |= (reg_table[j].val & 0xff);
-				break;
-			case GC2145_V_WIN_OFF_HIGH_REG:
-				win_v_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case GC2145_V_WIN_OFF_LOW_REG:
-				win_v_off |= (reg_table[j].val & 0xff);
-				break;
-			case GC2145_HORIZONTAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_width =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_width & 0xff));
-				break;
-			case GC2145_HORIZONTAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_width =
-					(reg_table[j].val |
-					(timings->sensor_output_width & 0xff00));
-				break;
-			case GC2145_VERTICAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_height =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_height & 0xff));
-				break;
-			case GC2145_VERTICAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_height =
-					(reg_table[j].val |
-					(timings->sensor_output_height & 0xff00));
-				break;
-			}
-		}
-
-		/* timings->frame_length_lines = winv + vb;
-		timings->line_length_pck =  row_time = Hb + Sh_delay + win_width/2 + 4*/
-		timings->frame_length_lines = 1250;
-		timings->line_length_pck = 1992;
-
-		timings->crop_horizontal_start = win_h_off;
-		timings->crop_horizontal_end = win_h_off + timings->sensor_output_width;
-		timings->crop_vertical_start = win_v_off;
-		timings->crop_vertical_end = win_v_off + timings->sensor_output_height;
-
-		timings->exp_time >>= 4;
-		timings->vt_pix_clk_freq_hz =
-			config->frm_intrvl.interval.denominator
-			* timings->frame_length_lines
-			* timings->line_length_pck;
-
-		timings->coarse_integration_time_min =
-			GC2145_COARSE_INTG_TIME_MIN;
-		timings->coarse_integration_time_max_margin =
-			GC2145_COARSE_INTG_TIME_MAX_MARGIN;
-
-		/* OV Sensor do not use fine integration time. */
-		timings->fine_integration_time_min =
-			GC2145_FINE_INTG_TIME_MIN;
-		timings->fine_integration_time_max_margin =
-			GC2145_FINE_INTG_TIME_MAX_MARGIN;
-
-		timings->binning_factor_x = 1;
-		timings->binning_factor_y = 1;
-	}
-
-	return 0;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_g_timings(
-			struct gc_camera_module *cam_mod,
-			struct gc_camera_module_timings *timings)
-{
-	int ret = 0;
-	unsigned int vts;
-
-	/* add for debug */
-	gc_camera_module_pr_debug(cam_mod, "%s(%d) enter ...\n", __FUNCTION__, __LINE__);
-	if (IS_ERR_OR_NULL(cam_mod->active_config))
-		goto err;
-
-	*timings = cam_mod->active_config->timings;
-
-	vts = (!cam_mod->vts_cur) ?
-		timings->frame_length_lines :
-		cam_mod->vts_cur;
-
-	if (cam_mod->frm_intrvl_valid)
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-	else
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-
-	timings->frame_length_lines = vts;
-
-	return ret;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_s_ctrl(struct gc_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-		ret = gc2145_write_aec(cam_mod);
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_s_ext_ctrls(
-				struct gc_camera_module *cam_mod,
-				struct gc_camera_module_ext_ctrls *ctrls)
-{
-	int ret = 0;
-
-	if ((ctrls->ctrls[0].id == V4L2_CID_GAIN) ||
-	    (ctrls->ctrls[0].id == V4L2_CID_EXPOSURE))
-		ret = gc2145_write_aec(cam_mod);
-	else
-		ret = -EINVAL;
-
-	if (IS_ERR_VALUE(ret))
-		gc_camera_module_pr_debug(cam_mod, "failed with error (%d)\n", ret);
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-static int gc2145_start_streaming(struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_info(
-	cam_mod,
-	"active config=%s\n",
-	cam_mod->active_config->name);
-
-	ret = gc2145_g_VTS(cam_mod, &cam_mod->vts_min);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-	#if 0
-	ret = gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x03);
-	ret |= gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0x10, 0x02);
-	ret |= gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-	#endif
-	ret = gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	gc_camera_module_pr_info(cam_mod, "(%d) while here!\n", __LINE__);
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_stop_streaming(struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	gc_camera_module_pr_info(cam_mod, "\n");
-	#if 0
-	ret = gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x03);
-	ret |= gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0x10, 0x00);
-	ret |= gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-	#endif
-
-	ret = gc_camera_module_write_reg(
-		cam_mod,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, 0xfe, 0x00);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int gc2145_check_camera_id(struct gc_camera_module *cam_mod)
-{
-	u32 pidh, pidl;
-	int ret = 0;
-
-	gc_camera_module_pr_debug(cam_mod, "%s(%d) enter ...!\n", __FUNCTION__, __LINE__);
-
-	ret |= gc_camera_module_read_reg(cam_mod, 1,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, GC2145_PIDH_ADDR, &pidh);
-	ret |= gc_camera_module_read_reg(cam_mod, 1,
-		PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1, GC2145_PIDL_ADDR, &pidl);
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_pr_err(
-		cam_mod,
-		"register read failed, camera module powered off?\n");
-		goto err;
-	}
-
-	if ((pidh == GC2145_PIDH_MAGIC) && (pidl == GC2145_PIDL_MAGIC)) {
-		gc_camera_module_pr_info(
-		cam_mod,
-		"successfully detected camera ID 0x%02x%02x\n",
-		pidh, pidl);
-	} else {
-		gc_camera_module_pr_err(
-		cam_mod,
-		"wrong camera ID, expected 0x%02x%02x, detected 0x%02x%02x\n",
-		GC2145_PIDH_MAGIC, GC2145_PIDL_MAGIC, pidh, pidl);
-		ret = -EINVAL;
-		goto err;
-	}
-
-	return 0;
-err:
-	gc_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-int gc_camera_gc2145_module_s_ctrl(
-	struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	return 0;
-}
-
-int gc_camera_gc2145_module_s_ext_ctrls(
-	struct v4l2_subdev *sd,
-	struct v4l2_ext_controls *ctrls)
-{
-	return 0;
-}
-
-long gc_camera_gc2145_module_ioctl(
-	struct v4l2_subdev *sd,
-	unsigned int cmd,
-	void *arg)
-{
-	return 0;
-}
-
-
-/* ======================================================================== */
-/* This part is platform dependent */
-/* ======================================================================== */
-static struct v4l2_subdev_core_ops gc2145_camera_module_core_ops = {
-	.g_ctrl = gc_camera_module_g_ctrl,
-	.s_ctrl = gc_camera_module_s_ctrl,
-	.s_ext_ctrls = gc_camera_module_s_ext_ctrls,
-	.s_power = gc_camera_module_s_power,
-	.ioctl = gc_camera_module_ioctl
-};
-
-static struct v4l2_subdev_video_ops gc2145_camera_module_video_ops = {
-	.enum_frameintervals = gc_camera_module_enum_frameintervals,
-	.s_mbus_fmt = gc_camera_module_s_fmt,
-	.g_mbus_fmt = gc_camera_module_g_fmt,
-	.try_mbus_fmt = gc_camera_module_try_fmt,
-	.s_frame_interval = gc_camera_module_s_frame_interval,
-	.g_frame_interval = gc_camera_module_g_frame_interval,
-	.s_stream = gc_camera_module_s_stream
-};
-
-static struct v4l2_subdev_ops gc2145_camera_module_ops = {
-	.core = &gc2145_camera_module_core_ops,
-	.video = &gc2145_camera_module_video_ops
-};
-
-static struct gc_camera_module gc2145;
-
-static struct gc_camera_module_custom_config gc2145_custom_config = {
-	.start_streaming = gc2145_start_streaming,
-	.stop_streaming = gc2145_stop_streaming,
-	.s_ctrl = gc2145_s_ctrl,
-	.g_ctrl = gc2145_g_ctrl,
-	.s_ext_ctrls = gc2145_s_ext_ctrls,
-	.g_timings = gc2145_g_timings,
-	.check_camera_id = gc2145_check_camera_id,
-	.s_vts = gc2145_auto_adjust_fps,
-	.configs = gc2145_configs,
-	.num_configs = sizeof(gc2145_configs) / sizeof(gc2145_configs[0]),
-	.power_up_delays_ms = {5, 30, 30},
-	.exposure_valid_frame = {4, 4}
-};
-
-static int gc2145_probe(
-	struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	dev_info(&client->dev, "probing...\n");
-
-	gc2145_filltimings(&gc2145_custom_config);
-
-	v4l2_i2c_subdev_init(&gc2145.sd, client, &gc2145_camera_module_ops);
-
-	gc2145.sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-
-	gc2145.custom = gc2145_custom_config;
-
-	dev_info(&client->dev, "probing successful\n");
-	return 0;
-}
-
-/* ======================================================================== */
-static int gc2145_remove(
-	struct i2c_client *client)
-{
-	struct gc_camera_module *cam_mod = i2c_get_clientdata(client);
-
-	dev_info(&client->dev, "removing device...\n");
-
-	if (!client->adapter)
-		return -ENODEV;	/* our client isn't attached */
-
-	gc_camera_module_release(cam_mod);
-
-	dev_info(&client->dev, "removed\n");
-	return 0;
-}
-
-static const struct i2c_device_id gc2145_id[] = {
-	{ GC2145_DRIVER_NAME, 0 },
-	{ }
-};
-
-static struct of_device_id gc2145_of_match[] = {
-	{.compatible = "galaxycore,gc2145-v4l2-i2c-subdev"},
-	{},
-};
-
-MODULE_DEVICE_TABLE(i2c, gc2145_id);
-
-static struct i2c_driver gc2145_i2c_driver = {
-	.driver = {
-		.name = GC2145_DRIVER_NAME,
-		.owner = THIS_MODULE,
-		.of_match_table = gc2145_of_match
-	},
-	.probe = gc2145_probe,
-	.remove = gc2145_remove,
-	.id_table = gc2145_id,
-};
-
-module_i2c_driver(gc2145_i2c_driver);
-
-MODULE_DESCRIPTION("SoC Camera driver for gc2145");
-MODULE_AUTHOR("Randy");
-MODULE_LICENSE("GPL");
diff --git a/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.c
deleted file mode 100644
index 2f6cfae..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.c
+++ /dev/null
@@ -1,1297 +0,0 @@
-/*
- * gc_camera_module.c
- *
- * Generic omnivision sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- */
-
-#include <linux/delay.h>
-#include <media/v4l2-subdev.h>
-#include <media/v4l2-device.h>
-#include <media/videobuf-core.h>
-#include <linux/slab.h>
-#include <linux/gcd.h>
-#include <media/v4l2-controls_rockchip.h>
-
-#include "gc_camera_module.h"
-
-static struct gc_camera_module *to_gc_camera_module(struct v4l2_subdev *sd)
-{
-	return container_of(sd, struct gc_camera_module, sd);
-}
-
-/* ======================================================================== */
-
-static void gc_camera_module_reset(
-	struct gc_camera_module *cam_mod)
-{
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	cam_mod->inited = false;
-	cam_mod->active_config = NULL;
-	cam_mod->update_config = true;
-	cam_mod->frm_fmt_valid = false;
-	cam_mod->frm_intrvl_valid = false;
-	cam_mod->exp_config.auto_exp = false;
-	cam_mod->exp_config.auto_gain = false;
-	cam_mod->wb_config.auto_wb = false;
-	cam_mod->hflip = false;
-	cam_mod->vflip = false;
-	cam_mod->auto_adjust_fps = true;
-	cam_mod->rotation = 0;
-	cam_mod->ctrl_updt = 0;
-	cam_mod->state = GC_CAMERA_MODULE_POWER_OFF;
-	cam_mod->state_before_suspend = GC_CAMERA_MODULE_POWER_OFF;
-
-	cam_mod->exp_config.exp_time = 0;
-	cam_mod->exp_config.gain = 0;
-	cam_mod->vts_cur = 0;
-}
-/* ======================================================================== */
-
-static void gc_camera_module_set_active_config(
-	struct gc_camera_module *cam_mod,
-	struct gc_camera_module_config *new_config)
-{
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	if (IS_ERR_OR_NULL(new_config)) {
-		cam_mod->active_config = new_config;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"no active config\n");
-	} else {
-		cam_mod->ctrl_updt &= GC_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP |
-			GC_CAMERA_MODULE_CTRL_UPDT_AUTO_GAIN |
-			GC_CAMERA_MODULE_CTRL_UPDT_AUTO_WB;
-		if (new_config->auto_exp_enabled !=
-			cam_mod->exp_config.auto_exp) {
-			cam_mod->ctrl_updt |=
-				GC_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP;
-			cam_mod->exp_config.auto_exp =
-				new_config->auto_exp_enabled;
-		}
-		if (new_config->auto_gain_enabled !=
-			cam_mod->exp_config.auto_gain) {
-			cam_mod->ctrl_updt |=
-				GC_CAMERA_MODULE_CTRL_UPDT_AUTO_GAIN;
-			cam_mod->exp_config.auto_gain =
-				new_config->auto_gain_enabled;
-		}
-		if (new_config->auto_wb_enabled !=
-			cam_mod->wb_config.auto_wb) {
-			cam_mod->ctrl_updt |=
-				GC_CAMERA_MODULE_CTRL_UPDT_AUTO_WB;
-			cam_mod->wb_config.auto_wb =
-				new_config->auto_wb_enabled;
-		}
-		if (new_config != cam_mod->active_config) {
-			cam_mod->update_config = true;
-			cam_mod->active_config = new_config;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-				"activating config '%s'\n",
-				cam_mod->active_config->name);
-		}
-	}
-}
-
-/* ======================================================================== */
-
-static struct gc_camera_module_config *gc_camera_module_find_config(
-	struct gc_camera_module *cam_mod,
-	struct v4l2_mbus_framefmt *fmt,
-	struct v4l2_subdev_frame_interval *frm_intrvl)
-{
-	u32 i;
-	unsigned long gcdiv;
-	struct v4l2_subdev_frame_interval norm_interval;
-
-	if (!IS_ERR_OR_NULL(fmt))
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"%dx%d, fmt code 0x%04x\n",
-			fmt->width, fmt->height, fmt->code);
-
-	if (!IS_ERR_OR_NULL(frm_intrvl))
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"frame interval %d/%d\n",
-			frm_intrvl->interval.numerator,
-			frm_intrvl->interval.denominator);
-
-	for (i = 0; i < cam_mod->custom.num_configs; i++) {
-		if (!IS_ERR_OR_NULL(frm_intrvl)) {
-			gcdiv = gcd(cam_mod->custom.configs[i].
-				frm_intrvl.interval.numerator,
-				cam_mod->custom.configs[i].
-					frm_intrvl.interval.denominator);
-			norm_interval.interval.numerator =
-				cam_mod->custom.configs[i].
-					frm_intrvl.interval.numerator / gcdiv;
-			norm_interval.interval.denominator =
-				cam_mod->custom.configs[i].
-				frm_intrvl.interval.denominator / gcdiv;
-			if ((frm_intrvl->interval.numerator !=
-				norm_interval.interval.numerator) ||
-				(frm_intrvl->interval.denominator !=
-				norm_interval.interval.denominator))
-				continue;
-		}
-		if (!IS_ERR_OR_NULL(fmt)) {
-			if ((cam_mod->custom.configs[i].frm_fmt.width !=
-				fmt->width) ||
-				(cam_mod->custom.configs[i].frm_fmt.height !=
-				fmt->height) ||
-				(cam_mod->custom.configs[i].frm_fmt.code !=
-				fmt->code)) {
-				continue;
-			}
-		}
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"found matching config %s\n",
-			cam_mod->custom.configs[i].name);
-		return &cam_mod->custom.configs[i];
-	}
-	pltfrm_camera_module_pr_debug(&cam_mod->sd,
-		"no matching config found\n");
-
-	return ERR_PTR(-EINVAL);
-}
-
-/* ======================================================================== */
-
-static int gc_camera_module_write_config(
-	struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-	struct gc_camera_module_reg *reg_table;
-	u32 reg_table_num_entries = 0;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	if (IS_ERR_OR_NULL(cam_mod->active_config)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"no active sensor configuration");
-		ret = -EFAULT;
-		goto err;
-	}
-
-	if (cam_mod->inited == false) {
-		cam_mod->active_config->soft_reset = true;
-		reg_table = cam_mod->active_config->reg_table;
-		reg_table_num_entries = cam_mod->active_config->reg_table_num_entries;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-				"write config %s\n",
-				cam_mod->active_config->name);
-	} else {
-		if (cam_mod->active_config->reg_diff_table && cam_mod->active_config->reg_diff_table_num_entries) {
-			cam_mod->active_config->soft_reset = false;
-			reg_table = cam_mod->active_config->reg_diff_table;
-			reg_table_num_entries = cam_mod->active_config->reg_diff_table_num_entries;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-				"write config %s%s\n",
-				cam_mod->active_config->name, "_diff");
-		} else {
-			cam_mod->active_config->soft_reset = true;
-			reg_table = cam_mod->active_config->reg_table;
-			reg_table_num_entries = cam_mod->active_config->reg_table_num_entries;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-				"write config %s\n",
-				cam_mod->active_config->name);
-		}
-	}
-
-	if (!IS_ERR_OR_NULL(cam_mod->custom.set_flip))
-		cam_mod->custom.set_flip(cam_mod,
-			reg_table, reg_table_num_entries);
-
-	ret = pltfrm_camera_module_write_reglist(&cam_mod->sd,
-		reg_table, reg_table_num_entries);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-	ret = pltfrm_camera_module_patch_config(&cam_mod->sd,
-		&cam_mod->frm_fmt,
-		&cam_mod->frm_intrvl);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-static int gc_camera_module_attach(
-	struct gc_camera_module *cam_mod)
-{
-	int ret = 0;
-	struct gc_camera_module_custom_config *custom;
-
-	custom = &cam_mod->custom;
-
-	if (custom->check_camera_id) {
-		gc_camera_module_s_power(&cam_mod->sd, 1);
-		ret = (custom->check_camera_id)(cam_mod);
-		gc_camera_module_s_power(&cam_mod->sd, 0);
-		if (ret != 0)
-			goto err;
-	}
-
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	gc_camera_module_release(cam_mod);
-	return ret;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_try_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt)
-{
-	struct gc_camera_module *cam_mod = to_gc_camera_module(sd);
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%dx%d, fmt code 0x%04x\n",
-		fmt->width, fmt->height, fmt->code);
-
-	if (IS_ERR_OR_NULL(gc_camera_module_find_config(cam_mod, fmt, NULL))) {
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"format not supported\n");
-		return -EINVAL;
-	}
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "format supported\n");
-
-	return 0;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt)
-{
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	struct gc_camera_module_config *config;
-	int ret = 0;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%dx%d, fmt code 0x%04x\n",
-		fmt->width, fmt->height, fmt->code);
-
-	config = gc_camera_module_find_config(cam_mod, fmt, NULL);
-	if (IS_ERR_OR_NULL(config)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"format %dx%d, code 0x%04x, not supported\n",
-			fmt->width, fmt->height, fmt->code);
-		ret = -EINVAL;
-		goto err;
-	}
-	cam_mod->frm_fmt_valid = true;
-	cam_mod->frm_fmt = *fmt;
-
-	if (cam_mod->frm_intrvl_valid &&
-		!IS_ERR_OR_NULL(gc_camera_module_find_config(
-		cam_mod, fmt, &cam_mod->frm_intrvl))) {
-		gc_camera_module_set_active_config(cam_mod,
-			gc_camera_module_find_config(cam_mod,
-				fmt, &cam_mod->frm_intrvl));
-	} else {
-		gc_camera_module_set_active_config(cam_mod, config);
-	}
-
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_g_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt)
-{
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	if (cam_mod->active_config) {
-		fmt->code = cam_mod->active_config->frm_fmt.code;
-		fmt->width = cam_mod->active_config->frm_fmt.width;
-		fmt->height = cam_mod->active_config->frm_fmt.height;
-		return 0;
-	}
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "no active config\n");
-
-	return -1;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_frame_interval(
-	struct v4l2_subdev *sd,
-	struct v4l2_subdev_frame_interval *interval)
-{
-	struct gc_camera_module *cam_mod = to_gc_camera_module(sd);
-	unsigned long gcdiv;
-	struct v4l2_subdev_frame_interval norm_interval;
-	struct gc_camera_module_config *config;
-	unsigned int vts;
-	int ret = 0;
-
-	if ((0 == interval->interval.denominator) ||
-		(0 == interval->interval.numerator)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"invalid frame interval %d/%d\n",
-			interval->interval.numerator,
-			interval->interval.denominator);
-		ret = -EINVAL;
-		goto err;
-	}
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%d/%d (%dfps)\n",
-		interval->interval.numerator, interval->interval.denominator,
-		(interval->interval.denominator +
-		(interval->interval.numerator >> 1)) /
-		interval->interval.numerator);
-
-	/* normalize interval */
-	gcdiv = gcd(interval->interval.numerator,
-		interval->interval.denominator);
-	norm_interval.interval.numerator =
-		interval->interval.numerator / gcdiv;
-	norm_interval.interval.denominator =
-		interval->interval.denominator / gcdiv;
-
-	if (!cam_mod->frm_fmt_valid)
-		goto end;
-
-	config = gc_camera_module_find_config(
-			cam_mod,
-			&cam_mod->active_config->frm_fmt,
-			&norm_interval);
-
-	if (!IS_ERR_OR_NULL(config) &&
-		(config != cam_mod->active_config) &&
-		(cam_mod->state != GC_CAMERA_MODULE_STREAMING)) {
-		gc_camera_module_set_active_config(cam_mod, config);
-	} else {
-		if (IS_ERR_OR_NULL(cam_mod->active_config)) {
-			pltfrm_camera_module_pr_err(
-				&cam_mod->sd,
-				"no active sensor configuration");
-			ret = -EFAULT;
-			goto err;
-		}
-
-		if (cam_mod->active_config->frm_intrvl.interval.denominator <
-			norm_interval.interval.denominator) {
-			pltfrm_camera_module_pr_err(
-				&cam_mod->sd,
-				"%dx%d@%dfps isn't support!",
-				cam_mod->active_config->frm_fmt.width,
-				cam_mod->active_config->frm_fmt.height,
-				norm_interval.interval.denominator);
-			ret = -EFAULT;
-			goto err;
-		}
-
-		if (!cam_mod->custom.s_vts) {
-			pltfrm_camera_module_pr_err(
-				&cam_mod->sd,
-				"custom.s_vts isn't support!");
-			ret = -EFAULT;
-			goto err;
-		}
-
-		vts = cam_mod->active_config->timings.frame_length_lines;
-		vts *= cam_mod->active_config->frm_intrvl.interval.denominator;
-		vts /= norm_interval.interval.denominator;
-		cam_mod->vts_cur = vts;
-
-		if (cam_mod->state != GC_CAMERA_MODULE_STREAMING)
-			goto end;
-
-		cam_mod->custom.s_vts(cam_mod, vts);
-	}
-
-end:
-	cam_mod->frm_intrvl_valid = true;
-	cam_mod->frm_intrvl = norm_interval;
-	cam_mod->auto_adjust_fps = false;
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-int gc_camera_module_g_frame_interval(
-	struct v4l2_subdev *sd,
-	struct v4l2_subdev_frame_interval *interval)
-{
-	struct gc_camera_module *cam_mod = to_gc_camera_module(sd);
-
-	if (cam_mod->active_config) {
-		if (cam_mod->state == GC_CAMERA_MODULE_STREAMING) {
-			if (cam_mod->frm_intrvl_valid) {
-				*interval = cam_mod->frm_intrvl;
-				return 0;
-			} else {
-				*interval = cam_mod->active_config->frm_intrvl;
-				return 0;
-			}
-		}
-	}
-
-	return -EFAULT;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_stream(struct v4l2_subdev *sd, int enable)
-{
-	int ret = 0;
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	unsigned int vts;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%d\n", enable);
-
-	if (enable) {
-		if (cam_mod->state == GC_CAMERA_MODULE_STREAMING)
-			return 0;
-		if (IS_ERR_OR_NULL(cam_mod->active_config)) {
-			pltfrm_camera_module_pr_err(&cam_mod->sd,
-				"no active sensor configuration, cannot start streaming\n");
-			ret = -EFAULT;
-			goto err;
-		}
-		if (cam_mod->state != GC_CAMERA_MODULE_SW_STANDBY) {
-			pltfrm_camera_module_pr_err(&cam_mod->sd,
-				"sensor is not powered on (in state %d), cannot start streaming\n",
-				cam_mod->state);
-			ret = -EINVAL;
-			goto err;
-		}
-		if (cam_mod->update_config)
-			ret = gc_camera_module_write_config(cam_mod);
-			if (IS_ERR_VALUE(ret))
-				goto err;
-
-		ret = cam_mod->custom.start_streaming(cam_mod);
-		if (IS_ERR_VALUE(ret))
-			goto err;
-
-		if (cam_mod->frm_intrvl_valid) {
-			if ((cam_mod->frm_intrvl.interval.numerator !=
-				cam_mod->active_config->frm_intrvl.interval.numerator) ||
-				(cam_mod->frm_intrvl.interval.denominator !=
-				cam_mod->active_config->frm_intrvl.interval.denominator)) {
-				if (cam_mod->frm_intrvl.interval.denominator >
-					cam_mod->active_config->frm_intrvl.interval.denominator) {
-					pltfrm_camera_module_pr_warn(&cam_mod->sd,
-						"sensor is not support stream: %dx%d@(%d/%d)fps!\n",
-						cam_mod->active_config->frm_fmt.width,
-						cam_mod->active_config->frm_fmt.height,
-						cam_mod->frm_intrvl.interval.denominator,
-						cam_mod->frm_intrvl.interval.numerator);
-					goto end;
-				}
-				vts = cam_mod->active_config->timings.frame_length_lines;
-				vts *= cam_mod->active_config->frm_intrvl.interval.denominator;
-				vts /= cam_mod->frm_intrvl.interval.denominator;
-				cam_mod->custom.s_vts(cam_mod, vts);
-			}
-		}
-
-		if (!cam_mod->inited && cam_mod->update_config)
-			cam_mod->inited = true;
-		cam_mod->update_config = false;
-		cam_mod->ctrl_updt = 0;
-		mdelay(cam_mod->custom.power_up_delays_ms[2]);
-		cam_mod->state = GC_CAMERA_MODULE_STREAMING;
-
-	} else {
-		int pclk;
-		int wait_ms;
-		struct isp_supplemental_sensor_mode_data timings;
-
-		if (cam_mod->state != GC_CAMERA_MODULE_STREAMING)
-			return 0;
-		ret = cam_mod->custom.stop_streaming(cam_mod);
-		if (IS_ERR_VALUE(ret))
-			goto err;
-
-		ret = gc_camera_module_ioctl(sd,
-					RK_VIDIOC_SENSOR_MODE_DATA,
-					&timings);
-
-		cam_mod->state = GC_CAMERA_MODULE_SW_STANDBY;
-
-		if (IS_ERR_VALUE(ret))
-			goto err;
-
-		pclk = timings.vt_pix_clk_freq_hz / 1000;
-
-		if (!pclk)
-			goto err;
-
-		wait_ms =
-			(timings.line_length_pck *
-			timings.frame_length_lines) /
-			pclk;
-
-		/* wait for a frame period to make sure that there is
-			no pending frame left. */
-
-		msleep(wait_ms + 1);
-	}
-
-end:
-	cam_mod->state_before_suspend = cam_mod->state;
-
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_power(struct v4l2_subdev *sd, int on)
-{
-	int ret = 0;
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	struct v4l2_subdev *af_ctrl;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%d\n", on);
-
-	if (on) {
-		if (GC_CAMERA_MODULE_POWER_OFF == cam_mod->state) {
-			ret = pltfrm_camera_module_s_power(&cam_mod->sd, 1);
-			if (!IS_ERR_VALUE(ret)) {
-				mdelay(cam_mod->custom.power_up_delays_ms[0]);
-				cam_mod->state = GC_CAMERA_MODULE_HW_STANDBY;
-			}
-		}
-		if (GC_CAMERA_MODULE_HW_STANDBY == cam_mod->state) {
-			ret = pltfrm_camera_module_set_pin_state(&cam_mod->sd,
-				PLTFRM_CAMERA_MODULE_PIN_PD,
-				PLTFRM_CAMERA_MODULE_PIN_STATE_INACTIVE);
-			if (!IS_ERR_VALUE(ret)) {
-				mdelay(cam_mod->custom.power_up_delays_ms[1]);
-				cam_mod->state = GC_CAMERA_MODULE_SW_STANDBY;
-				if (!IS_ERR_OR_NULL(
-				    cam_mod->custom.init_common)
-				    &&
-				    cam_mod->custom.init_common(
-				    cam_mod))
-				usleep_range(1000, 1500);
-
-				af_ctrl = pltfrm_camera_module_get_af_ctrl(sd);
-				if (!IS_ERR_OR_NULL(af_ctrl)) {
-					v4l2_subdev_call(af_ctrl,
-							 core, init, 0);
-				}
-			}
-		}
-		if (cam_mod->update_config) {
-			gc_camera_module_write_config(cam_mod);
-			cam_mod->update_config = false;
-		}
-	} else {
-		if (GC_CAMERA_MODULE_STREAMING == cam_mod->state) {
-			ret = gc_camera_module_s_stream(sd, 0);
-			if (!IS_ERR_VALUE(ret))
-				cam_mod->state = GC_CAMERA_MODULE_SW_STANDBY;
-		}
-		if (GC_CAMERA_MODULE_SW_STANDBY == cam_mod->state) {
-			ret = pltfrm_camera_module_set_pin_state(
-				&cam_mod->sd,
-				PLTFRM_CAMERA_MODULE_PIN_PD,
-				PLTFRM_CAMERA_MODULE_PIN_STATE_ACTIVE);
-
-			if (!IS_ERR_VALUE(ret))
-				cam_mod->state = GC_CAMERA_MODULE_HW_STANDBY;
-		}
-		if (GC_CAMERA_MODULE_HW_STANDBY == cam_mod->state) {
-			ret = pltfrm_camera_module_s_power(&cam_mod->sd, 0);
-			if (!IS_ERR_VALUE(ret)) {
-				cam_mod->state = GC_CAMERA_MODULE_POWER_OFF;
-				gc_camera_module_reset(cam_mod);
-			}
-		}
-	}
-
-	cam_mod->state_before_suspend = cam_mod->state;
-
-	if (IS_ERR_VALUE(ret)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"%s failed, camera left in state %d\n",
-			on ? "on" : "off", cam_mod->state);
-		goto err;
-	} else
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"camera powered %s\n", on ? "on" : "off");
-
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_g_ctrl(struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	struct gc_camera_module *cam_mod = to_gc_camera_module(sd);
-	int ret;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, " id 0x%x\n", ctrl->id);
-
-	if (ctrl->id == V4L2_CID_FLASH_LED_MODE) {
-		ctrl->value = cam_mod->exp_config.flash_mode;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_FLASH_LED_MODE %d\n",
-			ctrl->value);
-		return 0;
-	}
-
-	if (IS_ERR_OR_NULL(cam_mod->active_config)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"no active configuration\n");
-		return -EFAULT;
-	}
-
-	if (ctrl->id == RK_V4L2_CID_VBLANKING) {
-		ctrl->value = cam_mod->active_config->v_blanking_time_us;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"RK_V4L2_CID_VBLANKING %d\n",
-			ctrl->value);
-		return 0;
-	}
-
-	if (ctrl->id == V4L2_CID_BAND_STOP_FILTER) {
-		struct v4l2_subdev *ircut_ctrl;
-
-		ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl(sd);
-		if (!IS_ERR_OR_NULL(ircut_ctrl)) {
-			ret = v4l2_subdev_call(ircut_ctrl, core, g_ctrl, ctrl);
-			return ret;
-		}
-	}
-
-	if ((cam_mod->state != GC_CAMERA_MODULE_SW_STANDBY) &&
-		(cam_mod->state != GC_CAMERA_MODULE_STREAMING)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"cannot get controls when camera is off\n");
-		return -EFAULT;
-	}
-
-	if (ctrl->id == V4L2_CID_FOCUS_ABSOLUTE) {
-		struct v4l2_subdev *af_ctrl;
-
-		af_ctrl = pltfrm_camera_module_get_af_ctrl(sd);
-		if (!IS_ERR_OR_NULL(af_ctrl)) {
-			ret = v4l2_subdev_call(af_ctrl, core, g_ctrl, ctrl);
-			return ret;
-		}
-	}
-
-	if (!IS_ERR_OR_NULL(cam_mod->custom.g_ctrl)) {
-		ret = cam_mod->custom.g_ctrl(cam_mod, ctrl->id);
-		if (IS_ERR_VALUE(ret))
-			return ret;
-	}
-
-	switch (ctrl->id) {
-	case V4L2_CID_GAIN:
-		ctrl->value = cam_mod->exp_config.gain;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			     "V4L2_CID_GAIN %d\n",
-			     ctrl->value);
-		break;
-	case V4L2_CID_EXPOSURE:
-		ctrl->value = cam_mod->exp_config.exp_time;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			     "V4L2_CID_EXPOSURE %d\n",
-			     ctrl->value);
-		break;
-	case V4L2_CID_WHITE_BALANCE_TEMPERATURE:
-		ctrl->value = cam_mod->wb_config.temperature;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_WHITE_BALANCE_TEMPERATURE %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE:
-		ctrl->value = cam_mod->wb_config.preset_id;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_AUTOGAIN:
-		ctrl->value = cam_mod->exp_config.auto_gain;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTOGAIN %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_EXPOSURE_AUTO:
-		ctrl->value = cam_mod->exp_config.auto_exp;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_EXPOSURE_AUTO %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_AUTO_WHITE_BALANCE:
-		ctrl->value = cam_mod->wb_config.auto_wb;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTO_WHITE_BALANCE %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_FOCUS_ABSOLUTE:
-		ctrl->value = cam_mod->af_config.abs_pos;
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_FOCUS_ABSOLUTE %d\n",
-			ctrl->value);
-		break;
-	case V4L2_CID_HFLIP:
-	case V4L2_CID_VFLIP:
-		/* TBD */
-		/* fallthrough */
-	default:
-		pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"failed, unknown ctrl %d\n", ctrl->id);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int flash_light_ctrl(
-		struct v4l2_subdev *sd,
-		struct gc_camera_module *cam_mod,
-		int value)
-{
-	return 0;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_ext_ctrls(
-	struct v4l2_subdev *sd,
-	struct v4l2_ext_controls *ctrls)
-{
-	int i;
-	int ctrl_cnt = 0;
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	int ret = 0;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-	if (ctrls->count == 0)
-		return -EINVAL;
-
-	for (i = 0; i < ctrls->count; i++) {
-		struct v4l2_ext_control *ctrl;
-		u32 ctrl_updt = 0;
-
-		ctrl = &ctrls->controls[i];
-
-		switch (ctrl->id) {
-		case V4L2_CID_GAIN:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_GAIN;
-			cam_mod->exp_config.gain = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_GAIN %d\n",
-			ctrl->value);
-			break;
-		case RK_V4L2_CID_GAIN_PERCENT:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_GAIN;
-			cam_mod->exp_config.gain_percent = ctrl->value;
-			break;
-		case RK_V4L2_CID_VTS:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE;
-			cam_mod->exp_config.vts_value = ctrl->value;
-			break;
-		case V4L2_CID_FLASH_LED_MODE:
-			ret = flash_light_ctrl(sd, cam_mod, ctrl->value);
-			if (ret == 0) {
-				cam_mod->exp_config.flash_mode = ctrl->value;
-				pltfrm_camera_module_pr_debug(&cam_mod->sd,
-					"V4L2_CID_FLASH_LED_MODE %d\n",
-					ctrl->value);
-			}
-			break;
-		case V4L2_CID_EXPOSURE:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_EXP_TIME;
-			cam_mod->exp_config.exp_time = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_EXPOSURE %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_WHITE_BALANCE_TEMPERATURE:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_WB_TEMPERATURE;
-			cam_mod->wb_config.temperature = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_WHITE_BALANCE_TEMPERATURE %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_PRESET_WB;
-			cam_mod->wb_config.preset_id = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_AUTOGAIN:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_AUTO_GAIN;
-			cam_mod->exp_config.auto_gain = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTOGAIN %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_EXPOSURE_AUTO:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP;
-			cam_mod->exp_config.auto_exp = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_EXPOSURE_AUTO %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_AUTO_WHITE_BALANCE:
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_AUTO_WB;
-			cam_mod->wb_config.auto_wb = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"V4L2_CID_AUTO_WHITE_BALANCE %d\n",
-			ctrl->value);
-			break;
-		case RK_V4L2_CID_AUTO_FPS:
-			cam_mod->auto_adjust_fps = ctrl->value;
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-			"RK_V4L2_CID_AUTO_FPS %d\n",
-			ctrl->value);
-			break;
-		case V4L2_CID_FOCUS_ABSOLUTE:
-			{
-				struct v4l2_subdev *af_ctrl;
-
-				af_ctrl = pltfrm_camera_module_get_af_ctrl(sd);
-				if (!IS_ERR_OR_NULL(af_ctrl)) {
-					struct v4l2_control single_ctrl;
-
-					single_ctrl.id =
-						V4L2_CID_FOCUS_ABSOLUTE;
-					single_ctrl.value = ctrl->value;
-					ret = v4l2_subdev_call(af_ctrl,
-						core, s_ctrl, &single_ctrl);
-					return ret;
-				}
-			}
-			ctrl_updt = GC_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE;
-			cam_mod->af_config.abs_pos = ctrl->value;
-			pltfrm_camera_module_pr_debug(
-				&cam_mod->sd,
-				"V4L2_CID_FOCUS_ABSOLUTE %d\n",
-				ctrl->value);
-			break;
-		case V4L2_CID_BAND_STOP_FILTER:
-		{
-			struct v4l2_subdev *ircut_ctrl;
-
-			ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl
-					(sd);
-			if (!IS_ERR_OR_NULL(ircut_ctrl)) {
-				struct v4l2_control single_ctrl;
-
-				single_ctrl.id =
-					V4L2_CID_BAND_STOP_FILTER;
-				single_ctrl.value = ctrl->value;
-				ret = v4l2_subdev_call(
-					ircut_ctrl,
-					core, s_ctrl, &single_ctrl);
-				return ret;
-			}
-			pltfrm_camera_module_pr_debug(
-				&cam_mod->sd,
-				"V4L2_CID_BAND_STOP_FILTER %d\n",
-				ctrl->value);
-			break;
-		}
-		case V4L2_CID_HFLIP:
-			if (ctrl->value)
-				cam_mod->hflip = true;
-			else
-				cam_mod->hflip = false;
-			break;
-		case V4L2_CID_VFLIP:
-			if (ctrl->value)
-				cam_mod->vflip = true;
-			else
-				cam_mod->vflip = false;
-			break;
-		default:
-			pltfrm_camera_module_pr_warn(&cam_mod->sd,
-			"ignoring unknown ctrl 0x%x\n", ctrl->id);
-			break;
-		}
-
-		if (cam_mod->state != GC_CAMERA_MODULE_SW_STANDBY &&
-		cam_mod->state != GC_CAMERA_MODULE_STREAMING)
-			cam_mod->ctrl_updt |= ctrl_updt;
-		else if (ctrl_updt)
-			ctrl_cnt++;
-	}
-
-	/* if camera module is already streaming, write through */
-	if (ctrl_cnt &&
-		(cam_mod->state == GC_CAMERA_MODULE_STREAMING ||
-		cam_mod->state == GC_CAMERA_MODULE_SW_STANDBY)) {
-		struct gc_camera_module_ext_ctrls gc_ctrls;
-
-		gc_ctrls.ctrls =
-		(struct gc_camera_module_ext_ctrl *)
-		kmalloc(ctrl_cnt*sizeof(struct gc_camera_module_ext_ctrl),
-			GFP_KERNEL);
-
-		if (gc_ctrls.ctrls) {
-			for (i = 0; i < ctrl_cnt; i++) {
-				gc_ctrls.ctrls[i].id = ctrls->controls[i].id;
-				gc_ctrls.ctrls[i].value =
-					ctrls->controls[i].value;
-			}
-
-			gc_ctrls.count = ctrl_cnt;
-
-			ret = cam_mod->custom.s_ext_ctrls(cam_mod, &gc_ctrls);
-
-			kfree(gc_ctrls.ctrls);
-		} else
-			ret = -ENOMEM;
-
-		if (IS_ERR_VALUE(ret))
-			pltfrm_camera_module_pr_debug(&cam_mod->sd,
-				"failed with error %d\n", ret);
-	}
-
-	return ret;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_s_ctrl(
-	struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	struct v4l2_ext_control ext_ctrl[1];
-	struct v4l2_ext_controls ext_ctrls;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd,
-		"0x%x 0x%x\n", ctrl->id, ctrl->value);
-
-	ext_ctrl[0].id = ctrl->id;
-	ext_ctrl[0].value = ctrl->value;
-
-	ext_ctrls.count = 1;
-	ext_ctrls.controls = ext_ctrl;
-
-	return gc_camera_module_s_ext_ctrls(sd, &ext_ctrls);
-}
-
-/* ======================================================================== */
-
-long gc_camera_module_ioctl(struct v4l2_subdev *sd,
-	unsigned int cmd,
-	void *arg)
-{
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-	int ret;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "cmd: 0x%x\n", cmd);
-
-	if (cmd == RK_VIDIOC_SENSOR_MODE_DATA) {
-		struct gc_camera_module_timings gc_timings;
-		struct isp_supplemental_sensor_mode_data *timings =
-		(struct isp_supplemental_sensor_mode_data *) arg;
-
-		if (cam_mod->custom.g_timings)
-			ret = cam_mod->custom.g_timings(cam_mod, &gc_timings);
-		else
-			ret = -EPERM;
-
-		if (IS_ERR_VALUE(ret)) {
-			pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"failed with error %d\n", ret);
-			return ret;
-		}
-
-		timings->sensor_output_width = gc_timings.sensor_output_width;
-		timings->sensor_output_height = gc_timings.sensor_output_height;
-		timings->crop_horizontal_start =
-			gc_timings.crop_horizontal_start;
-		timings->crop_vertical_start = gc_timings.crop_vertical_start;
-		timings->crop_horizontal_end = gc_timings.crop_horizontal_end;
-		timings->crop_vertical_end = gc_timings.crop_vertical_end;
-		timings->line_length_pck = gc_timings.line_length_pck;
-		timings->frame_length_lines = gc_timings.frame_length_lines;
-		timings->vt_pix_clk_freq_hz = gc_timings.vt_pix_clk_freq_hz;
-		timings->binning_factor_x = gc_timings.binning_factor_x;
-		timings->binning_factor_y = gc_timings.binning_factor_y;
-		timings->coarse_integration_time_max_margin =
-			gc_timings.coarse_integration_time_max_margin;
-		timings->coarse_integration_time_min =
-			gc_timings.coarse_integration_time_min;
-		timings->fine_integration_time_max_margin =
-			gc_timings.fine_integration_time_max_margin;
-		timings->fine_integration_time_min =
-			gc_timings.fine_integration_time_min;
-
-		timings->exposure_valid_frame[0] =
-			cam_mod->custom.exposure_valid_frame[0];
-		timings->exposure_valid_frame[1] =
-			cam_mod->custom.exposure_valid_frame[1];
-		if (cam_mod->exp_config.exp_time)
-			timings->exp_time = cam_mod->exp_config.exp_time;
-		else
-			timings->exp_time = gc_timings.exp_time;
-		if (cam_mod->exp_config.gain)
-			timings->gain = cam_mod->exp_config.gain;
-		else
-			timings->gain = gc_timings.gain;
-		return ret;
-	} else if (cmd == PLTFRM_CIFCAM_G_ITF_CFG) {
-		struct pltfrm_cam_itf *itf_cfg = (struct pltfrm_cam_itf *)arg;
-		struct gc_camera_module_config *config;
-
-		if (cam_mod->custom.num_configs <= 0) {
-			pltfrm_camera_module_pr_err(&cam_mod->sd,
-				"cam_mod->custom.num_configs is NULL,"
-				"Get interface config failed!\n");
-			return -EINVAL;
-		}
-
-		if (IS_ERR_OR_NULL(cam_mod->active_config))
-			config = &cam_mod->custom.configs[0];
-		else
-			config = cam_mod->active_config;
-
-		*itf_cfg = config->itf_cfg;
-
-		pltfrm_camera_module_ioctl(sd, PLTFRM_CIFCAM_G_ITF_CFG, arg);
-		return 0;
-	} else if (cmd == PLTFRM_CIFCAM_ATTACH) {
-		ret = gc_camera_module_init(cam_mod, &cam_mod->custom);
-		if (!IS_ERR_VALUE(ret)) {
-			pltfrm_camera_module_ioctl(sd, cmd, arg);
-			return gc_camera_module_attach(cam_mod);
-		} else {
-			gc_camera_module_release(cam_mod);
-			return ret;
-		}
-	} else {
-		ret = pltfrm_camera_module_ioctl(sd, cmd, arg);
-		return ret;
-	}
-}
-/* ======================================================================== */
-
-int gc_camera_module_get_flip_mirror(
-	struct gc_camera_module *cam_mod)
-{
-	return pltfrm_camera_module_get_flip_mirror(&cam_mod->sd);
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_enum_frameintervals(
-		struct v4l2_subdev *sd,
-		struct v4l2_frmivalenum *fival)
-{
-	struct gc_camera_module *cam_mod =  to_gc_camera_module(sd);
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "%d\n", fival->index);
-
-	if (fival->index >= cam_mod->custom.num_configs)
-		return -EINVAL;
-	fival->pixel_format =
-		cam_mod->custom.configs[fival->index].frm_fmt.code;
-	fival->width = cam_mod->custom.configs[fival->index].frm_fmt.width;
-	fival->height = cam_mod->custom.configs[fival->index].frm_fmt.height;
-	fival->type = V4L2_FRMIVAL_TYPE_DISCRETE;
-	fival->discrete.numerator = cam_mod->custom.
-		configs[fival->index].frm_intrvl.interval.numerator;
-	fival->discrete.denominator = cam_mod->custom.
-		configs[fival->index].frm_intrvl.interval.denominator;
-	return 0;
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_write_reglist(
-	struct gc_camera_module *cam_mod,
-	const struct gc_camera_module_reg reglist[],
-	int len)
-{
-	return pltfrm_camera_module_write_reglist(&cam_mod->sd, reglist, len);
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_write_reg(
-	struct gc_camera_module *cam_mod,
-	u32 flag,
-	u16 reg,
-	u16 val)
-{
-	return pltfrm_camera_module_write_reg_ex(&cam_mod->sd, flag, reg, val);
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_read_reg(
-	struct gc_camera_module *cam_mod,
-	u16 data_length,
-	u32 flag,
-	u16 reg,
-	u32 *val)
-{
-	return pltfrm_camera_module_read_reg_ex(&cam_mod->sd,
-			data_length, flag, reg, val);
-}
-
-/* ======================================================================== */
-
-int gc_camera_module_read_reg_table(
-	struct gc_camera_module *cam_mod,
-	u32 flag,
-	u16 reg,
-	u32 *val)
-{
-	int i;
-
-	if (cam_mod->state == GC_CAMERA_MODULE_STREAMING)
-		return pltfrm_camera_module_read_reg_ex(&cam_mod->sd,
-			1, flag, reg, val);
-
-	if (!IS_ERR_OR_NULL(cam_mod->active_config)) {
-		for (
-			i = cam_mod->active_config->reg_table_num_entries - 1;
-			i > 0;
-			i--) {
-			if (cam_mod->active_config->reg_table[i].reg == reg) {
-				*val = cam_mod->active_config->reg_table[i].val;
-				return 0;
-			}
-		}
-	}
-
-	if (cam_mod->state == GC_CAMERA_MODULE_SW_STANDBY)
-		return pltfrm_camera_module_read_reg_ex(&cam_mod->sd,
-			1, flag, reg, val);
-
-	return -EFAULT;
-}
-
-/*
-static void gc_camera_module_otp_read(struct work_struct *work)
-{
-	struct gc_camera_module_otp_work *otp_work = container_of(work, struct gc_camera_module_otp_work, work);
-	struct gc_camera_module *cam_mod =
-		(struct gc_camera_module *)otp_work->cam_mod;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "enter...");
-
-	gc_camera_module_s_power(&cam_mod->sd, 1);
-	if (cam_mod->custom.read_otp)
-		(cam_mod->custom.read_otp)(cam_mod);
-	gc_camera_module_s_power(&cam_mod->sd, 0);
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "exit...");
-	return;
-}
-*/
-
-int gc_camera_module_init(struct gc_camera_module *cam_mod,
-	struct gc_camera_module_custom_config *custom)
-{
-	int ret = 0;
-
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	gc_camera_module_reset(cam_mod);
-
-	if (IS_ERR_OR_NULL(custom->start_streaming) ||
-		IS_ERR_OR_NULL(custom->stop_streaming) ||
-		IS_ERR_OR_NULL(custom->s_ctrl) ||
-		IS_ERR_OR_NULL(custom->g_ctrl)) {
-		pltfrm_camera_module_pr_err(&cam_mod->sd,
-			"mandatory callback function is missing\n");
-		ret = -EINVAL;
-		goto err;
-	}
-
-	ret = pltfrm_camera_module_init(&cam_mod->sd, &cam_mod->pltfm_data);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = pltfrm_camera_module_set_pin_state(&cam_mod->sd,
-					PLTFRM_CAMERA_MODULE_PIN_PD,
-					PLTFRM_CAMERA_MODULE_PIN_STATE_INACTIVE);
-	ret = pltfrm_camera_module_set_pin_state(&cam_mod->sd,
-					PLTFRM_CAMERA_MODULE_PIN_RESET,
-					PLTFRM_CAMERA_MODULE_PIN_STATE_ACTIVE);
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_release(cam_mod);
-		goto err;
-	}
-
-/*
-	if (custom->check_camera_id) {
-		gc_camera_module_s_power(&cam_mod->sd, 1);
-		ret = (custom->check_camera_id)(cam_mod);
-		gc_camera_module_s_power(&cam_mod->sd, 0);
-	}
-
-	if (IS_ERR_VALUE(ret)) {
-		gc_camera_module_release(cam_mod);
-		goto err;
-	}
-
-	if (custom->read_otp) {
-		cam_mod->otp_work.wq = create_workqueue(pltfrm_dev_string(&cam_mod->sd));
-		INIT_WORK(&cam_mod->otp_work.work, gc_camera_module_otp_read);
-		cam_mod->otp_work.cam_mod = (void *)cam_mod;
-
-		queue_work_on(0, cam_mod->otp_work.wq, &cam_mod->otp_work.work);
-	}*/
-	return 0;
-err:
-	pltfrm_camera_module_pr_err(&cam_mod->sd,
-		"failed with error %d\n", ret);
-	return ret;
-}
-
-void gc_camera_module_release(struct gc_camera_module *cam_mod)
-{
-	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
-
-	if (cam_mod->otp_work.wq) {
-		flush_workqueue(cam_mod->otp_work.wq);
-		destroy_workqueue(cam_mod->otp_work.wq);
-		cam_mod->otp_work.wq = NULL;
-	}
-
-	cam_mod->custom.configs = NULL;
-
-	pltfrm_camera_module_release(&cam_mod->sd);
-	v4l2_device_unregister_subdev(&cam_mod->sd);
-}
diff --git a/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.h b/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.h
deleted file mode 100644
index 81e7015..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/gc_camera_module.h
+++ /dev/null
@@ -1,298 +0,0 @@
-/*
- * gc_camera_module.h
- *
- * Generic omnivision sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- */
-
-#ifndef GC_CAMERA_MODULE_H
-#define GC_CAMERA_MODULE_H
-#include <linux/workqueue.h>
-#include <linux/platform_data/rk_isp11_platform_camera_module.h>
-#include <linux/platform_data/rk_isp11_platform.h>
-
-/* TODO: references to v4l2 should be reomved from here and go into a
-	platform dependent wrapper */
-
-#define GC_CAMERA_MODULE_REG_TYPE_DATA PLTFRM_CAMERA_MODULE_REG_TYPE_DATA
-#define GC_CAMERA_MODULE_REG_TYPE_TIMEOUT PLTFRM_CAMERA_MODULE_REG_TYPE_TIMEOUT
-#define GC_CAMERA_MODULE_REG_SINGLE_ONE_BYTE_DATA \
-	(PLTFRM_CAMERA_MODULE_WR_SINGLE | PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1)
-
-#define gc_camera_module_csi_config
-#define gc_camera_module_reg pltfrm_camera_module_reg
-#define GC_FLIP_BIT_MASK				   (1 << PLTFRM_CAMERA_MODULE_FLIP_BIT)
-#define GC_MIRROR_BIT_MASK				   (1 << PLTFRM_CAMERA_MODULE_MIRROR_BIT)
-
-#define GC_CAMERA_MODULE_CTRL_UPDT_GAIN				0x01
-#define GC_CAMERA_MODULE_CTRL_UPDT_EXP_TIME			0x02
-#define GC_CAMERA_MODULE_CTRL_UPDT_WB_TEMPERATURE	0x04
-#define GC_CAMERA_MODULE_CTRL_UPDT_AUTO_WB			0x08
-#define GC_CAMERA_MODULE_CTRL_UPDT_AUTO_GAIN		0x10
-#define GC_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP			0x20
-#define GC_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE	0x40
-#define GC_CAMERA_MODULE_CTRL_UPDT_PRESET_WB		0x80
-#define GC_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE		0x100
-
-
-enum gc_camera_module_state {
-	GC_CAMERA_MODULE_POWER_OFF = 0,
-	GC_CAMERA_MODULE_HW_STANDBY = 1,
-	GC_CAMERA_MODULE_SW_STANDBY = 2,
-	GC_CAMERA_MODULE_STREAMING = 3
-};
-
-struct gc_camera_module;
-
-struct gc_camera_module_timings {
-	/* public */
-	u32 coarse_integration_time_min;
-	u32 coarse_integration_time_max_margin;
-	u32 fine_integration_time_min;
-	u32 fine_integration_time_max_margin;
-	u32 frame_length_lines;
-	u32 line_length_pck;
-	u32 vt_pix_clk_freq_hz;
-	u32 sensor_output_width;
-	u32 sensor_output_height;
-	u32 crop_horizontal_start; /* Sensor crop start cord. (x0,y0)*/
-	u32 crop_vertical_start;
-	u32 crop_horizontal_end; /* Sensor crop end cord. (x1,y1)*/
-	u32 crop_vertical_end;
-	u8 binning_factor_x;
-	u8 binning_factor_y;
-	u32 exp_time;
-	u32 gain;
-};
-struct gc_camera_module_config {
-	const char *name;
-	struct v4l2_mbus_framefmt frm_fmt;
-	struct v4l2_subdev_frame_interval frm_intrvl;
-	bool auto_exp_enabled;
-	bool auto_gain_enabled;
-	bool auto_wb_enabled;
-	struct gc_camera_module_reg *reg_table;
-	u32 reg_table_num_entries;
-	struct gc_camera_module_reg *reg_diff_table;
-	u32 reg_diff_table_num_entries;
-	u32 v_blanking_time_us;
-	u32 line_length_pck;
-	u32 frame_length_lines;
-	struct gc_camera_module_timings timings;
-	bool soft_reset;
-	bool ignore_measurement_check;
-
-	struct pltfrm_cam_itf itf_cfg;
-};
-
-struct gc_camera_module_exp_config {
-	s32 exp_time;
-	bool auto_exp;
-	u16 gain;
-	u16 gain_percent;
-	bool auto_gain;
-	enum v4l2_flash_led_mode flash_mode;
-	u32 vts_value;
-};
-
-struct gc_camera_module_wb_config {
-	u32 temperature;
-	u32 preset_id;
-	bool auto_wb;
-};
-
-struct gc_camera_module_af_config {
-	u32 abs_pos;
-	u32 rel_pos;
-};
-
-struct gc_camera_module_ext_ctrl {
-	/* public */
-	u32 id;
-	u32 value;
-	__u32 reserved2[1];
-};
-
-struct gc_camera_module_ext_ctrls {
-	/* public */
-	u32 count;
-	struct gc_camera_module_ext_ctrl *ctrls;
-};
-
-/*
-	start_streaming: (mandatory) will be called when sensor should be
-		put into streaming mode right after the base config has been
-		written to the sensor. After a successful call of this function
-		the sensor should start delivering frame data.
-
-	stop_streaming: (mandatory) will be called when sensor should stop
-		delivering data. After a successful call of this function the
-		sensor should not deliver any more frame data.
-
-	check_camera_id: (optional) will be called when the sensor is
-		powered on. If provided should check the sensor ID/version
-		required by the custom driver. Register access should be
-		possible when this function is invoked.
-
-	s_ctrl: (mandatory) will be called at the successful end of
-		gc_camera_module_s_ctrl with the ctrl_id as argument.
-
-	priv: (optional) for private data used by the custom driver.
-*/
-struct gc_camera_module_custom_config {
-	int (*start_streaming)(struct gc_camera_module *cam_mod);
-	int (*stop_streaming)(struct gc_camera_module *cam_mod);
-	int (*check_camera_id)(struct gc_camera_module *cam_mod);
-	int (*s_ctrl)(struct gc_camera_module *cam_mod, u32 ctrl_id);
-	int (*g_ctrl)(struct gc_camera_module *cam_mod, u32 ctrl_id);
-	int (*g_timings)(struct gc_camera_module *cam_mod,
-		struct gc_camera_module_timings *timings);
-	int (*s_vts)(struct gc_camera_module *cam_mod,
-		u32 vts);
-	int (*s_ext_ctrls)(struct gc_camera_module *cam_mod,
-		struct gc_camera_module_ext_ctrls *ctrls);
-	int (*set_flip)(
-		struct gc_camera_module *cam_mod,
-		struct pltfrm_camera_module_reg reglist[],
-		int len);
-	int (*init_common)(struct gc_camera_module *cam_mod);
-	int (*read_otp)(struct gc_camera_module *cam_mod);
-	struct gc_camera_module_config *configs;
-	u32 num_configs;
-	u32 power_up_delays_ms[3];
-	unsigned char exposure_valid_frame[2];
-	void *priv;
-};
-
-struct gc_camera_module_otp_work {
-	struct work_struct work;
-	struct workqueue_struct *wq;
-	void *cam_mod;
-};
-
-struct gc_camera_module {
-	/* public */
-	struct v4l2_subdev sd;
-	struct v4l2_mbus_framefmt frm_fmt;
-	struct v4l2_subdev_frame_interval frm_intrvl;
-	struct gc_camera_module_exp_config exp_config;
-	struct gc_camera_module_wb_config wb_config;
-	struct gc_camera_module_af_config af_config;
-	struct gc_camera_module_custom_config custom;
-	enum gc_camera_module_state state;
-	enum gc_camera_module_state state_before_suspend;
-	struct gc_camera_module_config *active_config;
-	struct gc_camera_module_otp_work otp_work;
-	u32 ctrl_updt;
-	u32 vts_cur;
-	u32 vts_min;
-	bool auto_adjust_fps;
-	bool update_config;
-	bool frm_fmt_valid;
-	bool frm_intrvl_valid;
-	bool hflip;
-	bool vflip;
-	u32 rotation;
-	void *pltfm_data;
-	bool inited;
-	struct mutex lock;
-};
-
-#define gc_camera_module_pr_info(cam_mod, fmt, arg...) \
-	pltfrm_camera_module_pr_info(&cam_mod->sd, fmt, ## arg)
-#define gc_camera_module_pr_debug(cam_mod, fmt, arg...) \
-		pltfrm_camera_module_pr_debug(&cam_mod->sd, fmt, ## arg)
-#define gc_camera_module_pr_warn(cam_mod, fmt, arg...) \
-		pltfrm_camera_module_pr_warn(&cam_mod->sd, fmt, ## arg)
-#define gc_camera_module_pr_err(cam_mod, fmt, arg...) \
-		pltfrm_camera_module_pr_err(&cam_mod->sd, fmt, ## arg)
-
-int gc_camera_module_write_reglist(
-	struct gc_camera_module *cam_mod,
-	const struct gc_camera_module_reg reglist[],
-	int len);
-
-int gc_camera_module_write_reg(
-	struct gc_camera_module *cam_mod,
-	u32 flag,
-	u16 reg,
-	u16 val);
-
-int gc_camera_module_read_reg(
-	struct gc_camera_module *cam_mod,
-	u16 data_length,
-	u32 flag,
-	u16 reg,
-	u32 *val);
-
-int gc_camera_module_read_reg_table(
-	struct gc_camera_module *cam_mod,
-	u32 flag,
-	u16 reg,
-	u32 *val);
-
-int gc_camera_module_try_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt);
-
-int gc_camera_module_s_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt);
-
-int gc_camera_module_g_fmt(struct v4l2_subdev *sd,
-	struct v4l2_mbus_framefmt *fmt);
-
-int gc_camera_module_s_frame_interval(
-	struct v4l2_subdev *sd,
-	struct v4l2_subdev_frame_interval *interval);
-
-int gc_camera_module_g_frame_interval(
-	struct v4l2_subdev *sd,
-	struct v4l2_subdev_frame_interval *interval);
-
-int gc_camera_module_s_stream(
-	struct v4l2_subdev *sd,
-	int enable);
-
-int gc_camera_module_s_power(
-	struct v4l2_subdev *sd,
-	int on);
-
-int gc_camera_module_g_ctrl(
-	struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl);
-
-int gc_camera_module_s_ctrl(
-	struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl);
-
-int gc_camera_module_s_ext_ctrls(
-	struct v4l2_subdev *sd,
-	struct v4l2_ext_controls *ctrls);
-
-int gc_camera_module_enum_frameintervals(
-	struct v4l2_subdev *sd,
-	struct v4l2_frmivalenum *fival);
-
-int gc_camera_module_init(
-	struct gc_camera_module *cam_mod,
-	struct gc_camera_module_custom_config *custom);
-
-void gc_camera_module_release(
-	struct gc_camera_module *cam_mod);
-
-long gc_camera_module_ioctl(struct v4l2_subdev *sd,
-	unsigned int cmd,
-	void *arg);
-
-int gc_camera_module_get_flip_mirror(
-	struct gc_camera_module *cam_mod);
-#endif
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx258_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/imx258_v4l2-i2c-subdev.c
index 98cf528..65a8d21 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx258_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/imx258_v4l2-i2c-subdev.c
@@ -1591,29 +1591,6 @@ static int imx258_auto_adjust_fps(struct imx_camera_module *cam_mod,
 	if (IS_ERR_VALUE(ret)) {
 		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
 	} else {
-		imx_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx258_set_vts(struct imx_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = imx_camera_module_write_reg(cam_mod, IMX258_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod, IMX258_TIMING_VTS_HIGH_REG, (vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
 		imx_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
@@ -1644,7 +1621,6 @@ static int imx258_write_aec(struct imx_camera_module *cam_mod)
 		if (!IS_ERR_VALUE(ret) && cam_mod->auto_adjust_fps)
 			ret = imx258_auto_adjust_fps(cam_mod, cam_mod->exp_config.exp_time);
 
-		mutex_lock(&cam_mod->lock);
 		// Hold
 		ret = imx_camera_module_write_reg(cam_mod, 0x0104, 1);
 
@@ -1684,11 +1660,7 @@ static int imx258_write_aec(struct imx_camera_module *cam_mod)
 		ret |= imx_camera_module_write_reg(cam_mod, IMX258_AEC_PK_EXPO_HIGH_REG, IMX258_FETCH_HIGH_BYTE_EXP(exp_time));
 		ret |= imx_camera_module_write_reg(cam_mod, IMX258_AEC_PK_EXPO_LOW_REG, IMX258_FETCH_LOW_BYTE_EXP(exp_time));
 
-		if (!cam_mod->auto_adjust_fps)
-			ret |= imx258_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-
 		ret |= imx_camera_module_write_reg(cam_mod, 0x0104, 0);
-		mutex_unlock(&cam_mod->lock);
 	}
 
 	if (IS_ERR_VALUE(ret))
@@ -1933,10 +1905,7 @@ static int imx258_start_streaming(struct imx_camera_module *cam_mod)
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
-	mutex_lock(&cam_mod->lock);
-	ret = imx_camera_module_write_reg(cam_mod, 0x0100, 1);
-	mutex_unlock(&cam_mod->lock);
-	if (IS_ERR_VALUE(ret))
+	if (IS_ERR_VALUE(imx_camera_module_write_reg(cam_mod, 0x0100, 1)))
 		goto err;
 
 	msleep(25);
@@ -1956,9 +1925,7 @@ static int imx258_stop_streaming(struct imx_camera_module *cam_mod)
 
 	imx_camera_module_pr_info(cam_mod, "\n");
 
-	mutex_lock(&cam_mod->lock);
 	ret = imx_camera_module_write_reg(cam_mod, 0x0100, 0);
-	mutex_unlock(&cam_mod->lock);
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -2058,7 +2025,6 @@ static int imx258_probe(
 	imx258.sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	imx258.custom = imx258_custom_config;
 
-	mutex_init(&imx258.lock);
 	dev_info(&client->dev, "probing successful\n");
 	return 0;
 }
@@ -2072,7 +2038,6 @@ static int imx258_remove(struct i2c_client *client)
 	if (!client->adapter)
 		return -ENODEV;	/* our client isn't attached */
 
-	mutex_destroy(&cam_mod->lock);
 	imx_camera_module_release(cam_mod);
 
 	dev_info(&client->dev, "removed\n");
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx291_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/imx291_v4l2-i2c-subdev.c
index 26c2f2c..604c93b 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx291_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/imx291_v4l2-i2c-subdev.c
@@ -54,7 +54,7 @@
 #define IMX291_FINE_INTG_TIME_MIN 0
 #define IMX291_FINE_INTG_TIME_MAX_MARGIN 0
 #define IMX291_COARSE_INTG_TIME_MIN 16
-#define IMX291_COARSE_INTG_TIME_MAX_MARGIN 2
+#define IMX291_COARSE_INTG_TIME_MAX_MARGIN 4
 
 #define IMX291_EXT_CLK 37125000
 
@@ -233,34 +233,11 @@ static int imx291_auto_adjust_fps(struct imx_camera_module *cam_mod,
 		IMX291_TIMING_VTS_HIGH_REG, (vts >> 8) & 0xFF);
 
 	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		imx_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx291_set_vts(struct imx_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = imx_camera_module_write_reg(cam_mod,
-		IMX291_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod,
-		IMX291_TIMING_VTS_HIGH_REG, (vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+		imx_camera_module_pr_err(cam_mod,
+			"failed with error (%d)\n", ret);
 	} else {
-		imx_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
+		imx_camera_module_pr_debug(cam_mod,
+			"updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
 
@@ -311,9 +288,6 @@ static int imx291_write_aec(struct imx_camera_module *cam_mod)
 		ret |= imx_camera_module_write_reg(cam_mod,
 			IMX291_AEC_PK_EXPO_LOW_REG,
 			IMX291_FETCH_LOW_BYTE_EXP(exp_time));
-
-		if (!cam_mod->auto_adjust_fps)
-			ret |= imx291_set_vts(cam_mod, cam_mod->exp_config.vts_value);
 	}
 
 	if (IS_ERR_VALUE(ret))
@@ -422,8 +396,6 @@ static int imx291_g_timings(struct imx_camera_module *cam_mod,
 			* vts
 			* timings->line_length_pck;
 
-	timings->frame_length_lines = vts;
-
 	return ret;
 err:
 	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx323_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/imx323_v4l2-i2c-subdev.c
index 847cb05..cfa8c5e 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx323_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/imx323_v4l2-i2c-subdev.c
@@ -192,29 +192,6 @@ static int imx323_auto_adjust_fps(struct imx_camera_module *cam_mod,
 	if (IS_ERR_VALUE(ret)) {
 		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
 	} else {
-		imx_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx323_set_vts(struct imx_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = imx_camera_module_write_reg(cam_mod, IMX323_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod, IMX323_TIMING_VTS_HIGH_REG, (vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
 		imx_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
@@ -276,9 +253,6 @@ static int imx323_write_aec(struct imx_camera_module *cam_mod)
 					IMX323_FETCH_LOW_BYTE_EXP(exp_time)
 					);
 		}
-
-		if (!cam_mod->auto_adjust_fps)
-			ret |= imx323_set_vts(cam_mod, cam_mod->exp_config.vts_value);
 	}
 
 	if (IS_ERR_VALUE(ret))
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx327_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/imx327_v4l2-i2c-subdev.c
deleted file mode 100644
index a633201..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/imx327_v4l2-i2c-subdev.c
+++ /dev/null
@@ -1,688 +0,0 @@
-/*
- * IMX327 sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- * Note:
- *
- *v0.1.0:
- *1. Initialize version;
- */
-
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/delay.h>
-#include <linux/module.h>
-#include <media/v4l2-subdev.h>
-#include <media/videobuf-core.h>
-#include <linux/slab.h>
-#include "imx_camera_module.h"
-
-#define IMX327_DRIVER_NAME "imx327"
-
-#define IMX327_AEC_PK_GAIN_REG 0x3014
-
-#define IMX327_AEC_PK_EXPO_HIGH_REG 0x3022
-#define IMX327_AEC_PK_EXPO_MID_REG 0x3021
-#define IMX327_AEC_PK_EXPO_LOW_REG  0x3020
-
-#define IMX327_FETCH_HIGH_BYTE_EXP(VAL) (((VAL) >> 16) & 0x03)
-#define IMX327_FETCH_MID_BYTE_EXP(VAL) (((VAL) >> 8) & 0xFF)
-#define IMX327_FETCH_LOW_BYTE_EXP(VAL) ((VAL) & 0xFF)
-
-#define IMX327_PID_ADDR 0x3008
-#define IMX327_PID_MAGIC 0xA0
-
-#define IMX327_MIRROR_FLIP_REG 0x3007
-#define IMX327_ORIENTATION_V 0x1
-#define IMX327_ORIENTATION_H 0x2
-
-#define IMX327_TIMING_VTS_HIGH_REG 0x301a
-#define IMX327_TIMING_VTS_MID_REG 0x3019
-#define IMX327_TIMING_VTS_LOW_REG 0x3018
-#define IMX327_TIMING_HTS_HIGH_REG 0x301D
-#define IMX327_TIMING_HTS_LOW_REG 0x301C
-
-#define IMX327_INTEGRATION_TIME_MARGIN 8
-#define IMX327_FINE_INTG_TIME_MIN 0
-#define IMX327_FINE_INTG_TIME_MAX_MARGIN 0
-#define IMX327_COARSE_INTG_TIME_MIN 16
-#define IMX327_COARSE_INTG_TIME_MAX_MARGIN 2
-
-#define IMX327_EXT_CLK 37125000
-
-static struct imx_camera_module imx327;
-static struct imx_camera_module_custom_config imx327_custom_config;
-
-/* ======================================================================== */
-/* Base sensor configs */
-/* ======================================================================== */
-
-/* MCLK:37.125MHz  1920x1080  30fps   4Lane   222.75Mbps/Lane */
-static struct imx_camera_module_reg imx327_init_tab_1920_1080_30fps[] = {
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3003, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_TIMEOUT, 0x0000, 0x10},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3000, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3001, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3002, 0x00},
-
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3005, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3007, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3009, 0x02},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x300a, 0xf0},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x300b, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3011, 0x0a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3012, 0x64},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3014, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3018, 0x65},/* VMAX L */
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3019, 0x04},/* VMAX M */
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x301a, 0x00},/* VMAX H b0:1 */
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x301c, 0x30},/* HMAX L */
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x301d, 0x11},/* HMAX H */
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3020, 0xfe},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3021, 0x03},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3022, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3046, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3048, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3049, 0x08},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x304b, 0x0a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x305c, 0x18},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x305d, 0x03},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x305e, 0x20},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x305f, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x309e, 0x4a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x309f, 0x4a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x30d2, 0x19},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x30d7, 0x03},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3128, 0x04},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3129, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x313b, 0x41},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x315e, 0x1a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3164, 0x1a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x317c, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x31ec, 0x0e},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3405, 0x10},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3407, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3414, 0x0a},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3418, 0x49},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3419, 0x04},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3441, 0x0c},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3442, 0x0c},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3443, 0x01},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3444, 0x20},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3445, 0x25},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3446, 0x57},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3447, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3448, 0x55},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3449, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344a, 0x1f},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344b, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344c, 0x1f},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344d, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344e, 0x1f},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x344f, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3450, 0x77},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3451, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3452, 0x1f},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3453, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3454, 0x17},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3455, 0x00},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3472, 0x9c},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3473, 0x07},
-	{IMX_CAMERA_MODULE_REG_TYPE_DATA_SINGLE, 0x3480, 0x49}
-};
-
-/* ======================================================================== */
-
-static struct imx_camera_module_config imx327_configs[] = {
-	{
-		.name = "1920x1080_30fps",
-		.frm_fmt = {
-			.width = 1920,
-			.height = 1080,
-			.code = V4L2_MBUS_FMT_SRGGB12_1X12
-		},
-		.frm_intrvl = {
-			.interval = {
-				.numerator = 1,
-				.denominator = 30
-			}
-		},
-		.auto_exp_enabled = false,
-		.auto_gain_enabled = false,
-		.auto_wb_enabled = false,
-		.reg_table = (void *)imx327_init_tab_1920_1080_30fps,
-		.reg_table_num_entries =
-			ARRAY_SIZE(imx327_init_tab_1920_1080_30fps),
-		.v_blanking_time_us = 5000,
-		PLTFRM_CAM_ITF_MIPI_CFG(0, 2, 446, IMX327_EXT_CLK)
-	}
-};
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_g_vts(struct imx_camera_module *cam_mod, u32 *vts)
-{
-	u32 hig, mid, low;
-	int ret;
-
-	ret = imx_camera_module_read_reg_table(cam_mod,
-		IMX327_TIMING_VTS_HIGH_REG, &hig);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = imx_camera_module_read_reg_table(cam_mod,
-		IMX327_TIMING_VTS_MID_REG, &mid);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = imx_camera_module_read_reg_table(cam_mod,
-		IMX327_TIMING_VTS_LOW_REG, &low);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	*vts = (hig << 16) | (mid << 8) | low;
-
-	return 0;
-err:
-	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_auto_adjust_fps(struct imx_camera_module *cam_mod,
-	u32 exp_time)
-{
-	int ret;
-	u32 vts;
-
-	if ((exp_time + IMX327_COARSE_INTG_TIME_MAX_MARGIN)
-		> cam_mod->vts_min)
-		vts = exp_time + IMX327_COARSE_INTG_TIME_MAX_MARGIN;
-	else
-		vts = cam_mod->vts_min;
-	ret = imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_MID_REG, (vts >> 8) & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_HIGH_REG, (vts >> 8) & 0x03);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		imx_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_set_vts(struct imx_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_MID_REG, (vts >> 8) & 0xFF);
-	ret |= imx_camera_module_write_reg(cam_mod,
-		IMX327_TIMING_VTS_HIGH_REG, (vts >> 8) & 0x03);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		imx_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_write_aec(struct imx_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	imx_camera_module_pr_debug(cam_mod,
-		"exp_time = %d, gain = %d, flash_mode = %d\n",
-		cam_mod->exp_config.exp_time,
-		cam_mod->exp_config.gain,
-		cam_mod->exp_config.flash_mode);
-
-	/*
-	 * if the sensor is already streaming, write to shadow registers,
-	 * if the sensor is in SW standby, write to active registers,
-	 * if the sensor is off/registers are not writeable, do nothing
-	 */
-	if ((cam_mod->state == IMX_CAMERA_MODULE_SW_STANDBY) ||
-		(cam_mod->state == IMX_CAMERA_MODULE_STREAMING)) {
-		u32 a_gain = cam_mod->exp_config.gain;
-		u32 exp_time = cam_mod->exp_config.exp_time;
-		a_gain = a_gain * cam_mod->exp_config.gain_percent / 100;
-
-		if (exp_time < 1)
-			exp_time = 1;
-
-		if (!IS_ERR_VALUE(ret) && cam_mod->auto_adjust_fps)
-			ret = imx327_auto_adjust_fps(cam_mod,
-				cam_mod->exp_config.exp_time);
-
-		/* Gain */
-		ret = imx_camera_module_write_reg(cam_mod,
-			IMX327_AEC_PK_GAIN_REG, a_gain);
-
-		/* Integration Time */
-		ret = imx_camera_module_write_reg(cam_mod,
-			IMX327_AEC_PK_EXPO_HIGH_REG,
-			IMX327_FETCH_HIGH_BYTE_EXP(exp_time));
-		ret |= imx_camera_module_write_reg(cam_mod,
-			IMX327_AEC_PK_EXPO_MID_REG,
-			IMX327_FETCH_MID_BYTE_EXP(exp_time));
-		ret |= imx_camera_module_write_reg(cam_mod,
-			IMX327_AEC_PK_EXPO_LOW_REG,
-			IMX327_FETCH_LOW_BYTE_EXP(exp_time));
-
-		if (!cam_mod->auto_adjust_fps)
-			ret |= imx327_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-	}
-
-	if (IS_ERR_VALUE(ret))
-		imx_camera_module_pr_err(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_g_ctrl(struct imx_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	imx_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-	case V4L2_CID_FLASH_LED_MODE:
-		/* nothing to be done here */
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		imx_camera_module_pr_debug(cam_mod,
-			"failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_filltimings(struct imx_camera_module_custom_config *custom)
-{
-	int i, j;
-	struct imx_camera_module_config *config;
-	struct imx_camera_module_timings *timings;
-	struct imx_camera_module_reg *reg_table;
-	int reg_table_num_entries;
-
-	for (i = 0; i < custom->num_configs; i++) {
-		config = &custom->configs[i];
-		reg_table = config->reg_table;
-		reg_table_num_entries = config->reg_table_num_entries;
-		timings = &config->timings;
-
-		for (j = 0; j < reg_table_num_entries; j++) {
-			switch (reg_table[j].reg) {
-			case IMX327_TIMING_VTS_HIGH_REG:
-				timings->frame_length_lines = reg_table[j].val << 16;
-				break;
-			case IMX327_TIMING_VTS_MID_REG:
-				timings->frame_length_lines = reg_table[j].val << 8;
-				break;
-			case IMX327_TIMING_VTS_LOW_REG:
-				timings->frame_length_lines |= reg_table[j].val;
-				break;
-			case IMX327_TIMING_HTS_HIGH_REG:
-				timings->line_length_pck = (reg_table[j].val << 8);
-				break;
-			case IMX327_TIMING_HTS_LOW_REG:
-				timings->line_length_pck |= reg_table[j].val;
-				break;
-			}
-		}
-
-		timings->line_length_pck = timings->line_length_pck >> 1;
-		timings->vt_pix_clk_freq_hz = config->frm_intrvl.interval.denominator
-			* timings->frame_length_lines
-			* timings->line_length_pck;
-
-		timings->coarse_integration_time_min = IMX327_COARSE_INTG_TIME_MIN;
-		timings->coarse_integration_time_max_margin = IMX327_COARSE_INTG_TIME_MAX_MARGIN;
-
-		/* IMX Sensor do not use fine integration time. */
-		timings->fine_integration_time_min = IMX327_FINE_INTG_TIME_MIN;
-		timings->fine_integration_time_max_margin = IMX327_FINE_INTG_TIME_MAX_MARGIN;
-	}
-
-	return 0;
-}
-
-static int imx327_g_timings(struct imx_camera_module *cam_mod,
-	struct imx_camera_module_timings *timings)
-{
-	int ret = 0;
-	unsigned int vts;
-
-	if (IS_ERR_OR_NULL(cam_mod->active_config))
-		goto err;
-
-	*timings = cam_mod->active_config->timings;
-
-	vts = (!cam_mod->vts_cur) ?
-		timings->frame_length_lines :
-		cam_mod->vts_cur;
-
-	if (cam_mod->frm_intrvl_valid)
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-	else
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-
-	timings->frame_length_lines = vts;
-
-	return ret;
-err:
-	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_set_flip(
-	struct imx_camera_module *cam_mod,
-	struct pltfrm_camera_module_reg reglist[],
-	int len)
-{
-	int i, mode = 0;
-	u32 orientation = 0;
-
-	mode = imx_camera_module_get_flip_mirror(cam_mod);
-	if (mode == -1) {
-		imx_camera_module_pr_info(cam_mod,
-			"dts don't set flip, return!\n");
-		return 0;
-	}
-
-	if (!IS_ERR_OR_NULL(cam_mod->active_config)) {
-		imx_camera_module_read_reg_table(cam_mod,
-			IMX327_MIRROR_FLIP_REG, &orientation);
-		orientation &= 0xfc;
-		if (PLTFRM_CAMERA_MODULE_IS_MIRROR(mode))
-			orientation |= IMX327_ORIENTATION_V;
-		if (PLTFRM_CAMERA_MODULE_IS_FLIP(mode))
-			orientation |= IMX327_ORIENTATION_H;
-		for (i = 0; i < len; i++) {
-			if (reglist[i].reg == IMX327_MIRROR_FLIP_REG)
-				reglist[i].val = orientation;
-		}
-	}
-
-	return 0;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_s_ctrl(struct imx_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	imx_camera_module_pr_debug(cam_mod, "\n");
-
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-		ret = imx327_write_aec(cam_mod);
-		break;
-	case V4L2_CID_FLASH_LED_MODE:
-		/* nothing to be done here */
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		imx_camera_module_pr_debug(cam_mod,
-			"failed with error (%d) 0x%x\n", ret, ctrl_id);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_s_ext_ctrls(struct imx_camera_module *cam_mod,
-	struct imx_camera_module_ext_ctrls *ctrls)
-{
-	int ret = 0;
-
-	/* Handles only exposure and gain together special case. */
-	if ((ctrls->ctrls[0].id == V4L2_CID_GAIN ||
-		ctrls->ctrls[0].id == V4L2_CID_EXPOSURE))
-		ret = imx327_write_aec(cam_mod);
-	else
-		ret = -EINVAL;
-
-	if (IS_ERR_VALUE(ret))
-		imx_camera_module_pr_debug(cam_mod,
-			"failed with error (%d)\n", ret);
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_start_streaming(struct imx_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	imx_camera_module_pr_info(cam_mod,
-		"active config=%s\n", cam_mod->active_config->name);
-
-	ret = imx327_g_vts(cam_mod, &cam_mod->vts_min);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = imx_camera_module_write_reg(cam_mod, 0x3000, 0);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	msleep(25);
-
-	return 0;
-err:
-	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_stop_streaming(struct imx_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	imx_camera_module_pr_info(cam_mod, "\n");
-
-	ret = imx_camera_module_write_reg(cam_mod, 0x3000, 1);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	msleep(25);
-
-	return 0;
-err:
-	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int imx327_check_camera_id(struct imx_camera_module *cam_mod)
-{
-	u32 pid;
-	int ret = 0;
-
-	ret |= imx_camera_module_read_reg(cam_mod, 1, IMX327_PID_ADDR, &pid);
-
-	if (IS_ERR_VALUE(ret)) {
-		imx_camera_module_pr_err(cam_mod,
-			"register read failed, camera module powered off?\n");
-		goto err;
-	}
-
-	if (pid == IMX327_PID_MAGIC) {
-		imx_camera_module_pr_info(cam_mod,
-			"successfully detected camera ID 0x%02x\n",
-			pid);
-	} else {
-		imx_camera_module_pr_err(cam_mod,
-			"wrong camera ID, expected 0x%02x, detected 0x%02x\n",
-			IMX327_PID_MAGIC, pid);
-		ret = -EINVAL;
-		goto err;
-	}
-
-	return 0;
-err:
-	imx_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/* ======================================================================== */
-/* This part is platform dependent */
-/* ======================================================================== */
-
-static struct v4l2_subdev_core_ops imx327_camera_module_core_ops = {
-	.g_ctrl = imx_camera_module_g_ctrl,
-	.s_ctrl = imx_camera_module_s_ctrl,
-	.s_ext_ctrls = imx_camera_module_s_ext_ctrls,
-	.s_power = imx_camera_module_s_power,
-	.ioctl = imx_camera_module_ioctl
-};
-
-static struct v4l2_subdev_video_ops imx327_camera_module_video_ops = {
-	.enum_frameintervals = imx_camera_module_enum_frameintervals,
-	.s_mbus_fmt = imx_camera_module_s_fmt,
-	.g_mbus_fmt = imx_camera_module_g_fmt,
-	.try_mbus_fmt = imx_camera_module_try_fmt,
-	.s_frame_interval = imx_camera_module_s_frame_interval,
-	.g_frame_interval = imx_camera_module_g_frame_interval,
-	.s_stream = imx_camera_module_s_stream
-};
-
-static struct v4l2_subdev_ops imx327_camera_module_ops = {
-	.core = &imx327_camera_module_core_ops,
-	.video = &imx327_camera_module_video_ops
-};
-
-static struct imx_camera_module_custom_config imx327_custom_config = {
-	.start_streaming = imx327_start_streaming,
-	.stop_streaming = imx327_stop_streaming,
-	.s_ctrl = imx327_s_ctrl,
-	.s_ext_ctrls = imx327_s_ext_ctrls,
-	.g_ctrl = imx327_g_ctrl,
-	.g_timings = imx327_g_timings,
-	.check_camera_id = imx327_check_camera_id,
-	.set_flip = imx327_set_flip,
-	.s_vts = imx327_auto_adjust_fps,
-	.configs = imx327_configs,
-	.num_configs = ARRAY_SIZE(imx327_configs),
-	.power_up_delays_ms = {5, 20, 0},
-	/*
-	 * 0: Exposure time valid fileds;
-	 * 1: Exposure gain valid fileds;
-	 * (2 fileds == 1 frames)
-	 */
-	.exposure_valid_frame = {4, 4}
-};
-
-static int imx327_probe(
-	struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	dev_info(&client->dev, "probing...\n");
-
-	imx327_filltimings(&imx327_custom_config);
-	v4l2_i2c_subdev_init(&imx327.sd, client, &imx327_camera_module_ops);
-	imx327.sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	imx327.custom = imx327_custom_config;
-
-	dev_info(&client->dev, "probing successful\n");
-	return 0;
-}
-
-static int imx327_remove(struct i2c_client *client)
-{
-	struct imx_camera_module *cam_mod = i2c_get_clientdata(client);
-
-	dev_info(&client->dev, "removing device...\n");
-
-	if (!client->adapter)
-		return -ENODEV;
-
-	imx_camera_module_release(cam_mod);
-
-	dev_info(&client->dev, "removed\n");
-	return 0;
-}
-
-static const struct i2c_device_id imx327_id[] = {
-	{ IMX327_DRIVER_NAME, 0 },
-	{ }
-};
-
-static struct of_device_id imx327_of_match[] = {
-	{.compatible = "sony,imx327-v4l2-i2c-subdev"},
-	{},
-};
-
-MODULE_DEVICE_TABLE(i2c, imx327_id);
-
-static struct i2c_driver imx327_i2c_driver = {
-	.driver = {
-		.name = IMX327_DRIVER_NAME,
-		.owner = THIS_MODULE,
-		.of_match_table = imx327_of_match
-	},
-	.probe = imx327_probe,
-	.remove = imx327_remove,
-	.id_table = imx327_id,
-};
-
-module_i2c_driver(imx327_i2c_driver);
-
-MODULE_DESCRIPTION("SoC Camera driver for IMX327");
-MODULE_AUTHOR("CAIN.CAI");
-MODULE_LICENSE("GPL");
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
index 4bcc2c9..bd8b46b 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
@@ -798,10 +798,6 @@ int imx_camera_module_s_ext_ctrls(
 			ctrl_updt = IMX_CAMERA_MODULE_CTRL_UPDT_GAIN;
 			cam_mod->exp_config.gain_percent = ctrl->value;
 			break;
-		case RK_V4L2_CID_VTS:
-			ctrl_updt = IMX_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE;
-			cam_mod->exp_config.vts_value = ctrl->value;
-			break;
 		case V4L2_CID_FLASH_LED_MODE:
 			ret = flash_light_ctrl(sd, cam_mod, ctrl->value);
 			if (ret == 0) {
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.h b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.h
index af47883..aace71c 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.h
+++ b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.h
@@ -40,7 +40,6 @@
 #define IMX_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP 0x20
 #define IMX_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE 0x40
 #define IMX_CAMERA_MODULE_CTRL_UPDT_PRESET_WB 0x80
-#define IMX_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE 0x100
 
 enum imx_camera_module_state {
 	IMX_CAMERA_MODULE_POWER_OFF = 0,
@@ -96,7 +95,6 @@ struct imx_camera_module_exp_config {
 	u16 gain_percent;
 	bool auto_gain;
 	enum v4l2_flash_led_mode flash_mode;
-	u32 vts_value;
 };
 
 struct imx_camera_module_wb_config {
@@ -197,7 +195,6 @@ struct imx_camera_module {
 	u32 rotation;
 	void *pltfm_data;
 	bool inited;
-	struct mutex lock;
 };
 
 #define imx_camera_module_pr_info(cam_mod, fmt, arg...) \
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov2710_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov2710_v4l2-i2c-subdev.c
index 7860c1d..488f4f5 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov2710_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov2710_v4l2-i2c-subdev.c
@@ -27,8 +27,6 @@
  *1. remove stream state judge before hold reg setting,
  *during stream on->aec->stream off->aec->stream on, stream state may be changed,
  *reg is hold but not release.
- *v0.1.4:
- *1.add dvp interface
  *
  */
 
@@ -111,115 +109,6 @@
 /* ======================================================================== */
 /* Base sensor configs */
 /* ======================================================================== */
-#ifdef DVP
-/* MCLK:24MHz  1920x1080  30fps DVP  10bit */
-static struct ov_camera_module_reg ov2710_init_tab_1920_1080_30fps[] = {
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x82},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x42},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4201, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4202, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3103, 0x93},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300f, 0xb0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3010, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3012, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3017, 0x7f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3018, 0xfc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3706, 0x61},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3712, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3630, 0x6d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3800, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3801, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3802, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3803, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3818, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3804, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3805, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3806, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3807, 0x38},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3808, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3809, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380a, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380b, 0x38},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3810, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3811, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3812, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3813, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3621, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3604, 0x60},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3603, 0xa7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3631, 0x26},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3600, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3620, 0x37},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3623, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3702, 0x9e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3703, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3704, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x370d, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3713, 0x9f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3714, 0x4c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3710, 0x9e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3800, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3801, 0xc4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380c, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x7d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380f, 0x65},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3605, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3606, 0x3f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x302d, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x370b, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3716, 0x31},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3707, 0x52},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5181, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x518f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4301, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4303, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a00, 0x78},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300f, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3011, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a1a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a18, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a19, 0x7a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a13, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x382e, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x381a, 0x1a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x401d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5688, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5684, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5685, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5686, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5687, 0x43},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a0f, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a10, 0x38},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a1b, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a1e, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a11, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3a1f, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3500, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3501, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3502, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3503, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x350a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x350b, 0x1f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5000, 0x5f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x5001, 0x4e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3406, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3400, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3401, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3402, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3403, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3404, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3405, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4201, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4202, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_TIMEOUT, 0x0000, 40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x42},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4201, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4202, 0x0f}
-};
-#else
 /* MCLK:24MHz  1920x1080  30fps   mipi 1lane   800Mbps/lane */
 static struct ov_camera_module_reg ov2710_init_tab_1920_1080_30fps[] = {
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x82},
@@ -331,7 +220,6 @@ static struct ov_camera_module_reg ov2710_init_tab_1920_1080_30fps[] = {
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4201, 0x00},
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x4202, 0x0f}
 };
-#endif
 
 /* ======================================================================== */
 static struct ov_camera_module_config ov2710_configs[] = {
@@ -358,17 +246,7 @@ static struct ov_camera_module_config ov2710_configs[] = {
 			sizeof(ov2710_init_tab_1920_1080_30fps[0]),
 		.v_blanking_time_us = 3078,
 		.ignore_measurement_check = 1,
-		#ifdef DVP
-		PLTFRM_CAM_ITF_DVP_CFG(
-			PLTFRM_CAM_ITF_BT601_10,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
-			PLTFRM_CAM_SDR_NEG_EDG,
-			82000000,
-			OV2710_EXT_CLK)
-		#else
 		PLTFRM_CAM_ITF_MIPI_CFG(0, 1, 800, 24000000)
-		#endif
 	}
 };
 
@@ -449,7 +327,6 @@ err:
 			"failed with error (%d)\n", ret);
 	return ret;
 }
-
 static int OV2710_auto_adjust_fps(struct ov_camera_module *cam_mod,
 	u32 exp_time)
 {
@@ -475,40 +352,16 @@ static int OV2710_auto_adjust_fps(struct ov_camera_module *cam_mod,
 		(vts >> 8) & 0x0F);
 
 	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		ov_camera_module_pr_info(cam_mod, "updated vts=%d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-static int ov2710_set_vts(struct ov_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = ov_camera_module_write_reg(cam_mod,
-		OV2710_TIMING_VTS_LOW_REG,
-		vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod,
-		OV2710_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0x0F);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+		ov_camera_module_pr_err(cam_mod,
+				"failed with error (%d)\n", ret);
 	} else {
-		ov_camera_module_pr_debug(cam_mod, "updated vts=%d,vts_min=%d\n", vts, cam_mod->vts_min);
+		ov_camera_module_pr_debug(cam_mod,
+					  "updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
 
 	return ret;
 }
-
 static int ov2710_write_aec(struct ov_camera_module *cam_mod)
 {
 	int ret = 0;
@@ -528,9 +381,8 @@ static int ov2710_write_aec(struct ov_camera_module *cam_mod)
 		u32 exp_time = cam_mod->exp_config.exp_time;
 		a_gain = a_gain * cam_mod->exp_config.gain_percent / 100;
 
-		mutex_lock(&cam_mod->lock);
 		/* hold reg en */
-		ret = ov_camera_module_write_reg(cam_mod,
+		ret |= ov_camera_module_write_reg(cam_mod,
 			OV2710_AEC_GROUP_UPDATE_ADDRESS,
 			OV2710_AEC_GROUP_UPDATE_START_DATA);
 
@@ -554,9 +406,6 @@ static int ov2710_write_aec(struct ov_camera_module *cam_mod)
 			OV2710_AEC_PK_LONG_EXPO_1ST_REG,
 			OV2710_FETCH_1ST_BYTE_EXP(exp_time));
 
-		if (!cam_mod->auto_adjust_fps)
-			ret |= ov2710_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-
 		/* hold reg end */
 		ret |= ov_camera_module_write_reg(cam_mod,
 			OV2710_AEC_GROUP_UPDATE_ADDRESS,
@@ -564,7 +413,6 @@ static int ov2710_write_aec(struct ov_camera_module *cam_mod)
 		ret |= ov_camera_module_write_reg(cam_mod,
 			OV2710_AEC_GROUP_UPDATE_ADDRESS,
 			OV2710_AEC_GROUP_UPDATE_END_LAUNCH);
-		mutex_unlock(&cam_mod->lock);
 	}
 
 	if (IS_ERR_VALUE(ret))
@@ -842,11 +690,10 @@ static int ov2710_start_streaming(struct ov_camera_module *cam_mod)
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
-	mutex_lock(&cam_mod->lock);
 	ret = ov_camera_module_write_reg(cam_mod, 0x3008, 0x02);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4201, 0x00);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4202, 0x00);
-	mutex_unlock(&cam_mod->lock);
+
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -864,11 +711,10 @@ static int ov2710_stop_streaming(struct ov_camera_module *cam_mod)
 	int ret = 0;
 
 	ov_camera_module_pr_info(cam_mod, "\n");
-	mutex_lock(&cam_mod->lock);
 	ret = ov_camera_module_write_reg(cam_mod, 0x3008, 0x42);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4201, 0x00);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4202, 0x0f);
-	mutex_unlock(&cam_mod->lock);
+
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -1006,7 +852,6 @@ static int ov2710_probe(
 
 	ov2710.custom = ov2710_custom_config;
 
-	mutex_init(&ov2710.lock);
 	dev_info(&client->dev, "probing successful\n");
 	return 0;
 }
@@ -1023,7 +868,6 @@ static int ov2710_remove(
 	if (!client->adapter)
 		return -ENODEV;	/* our client isn't attached */
 
-	mutex_destroy(&cam_mod->lock);
 	ov_camera_module_release(cam_mod);
 
 	dev_info(&client->dev, "removed\n");
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov2718_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov2718_v4l2-i2c-subdev.c
deleted file mode 100644
index 033c245..0000000
--- a/drivers/media/i2c/soc_camera/rockchip/ov2718_v4l2-i2c-subdev.c
+++ /dev/null
@@ -1,2666 +0,0 @@
-/*
- * ov2718 sensor driver
- *
- * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
- *
- * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
- *
- * Copyright (C) 2008 Texas Instruments.
- *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
- *
- * Note:
- *
- *v0.1.0:
- *1. Initialize version;
- */
-
-#include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/delay.h>
-#include <linux/module.h>
-#include <media/v4l2-subdev.h>
-#include <media/videobuf-core.h>
-#include <linux/slab.h>
-#include <media/v4l2-controls_rockchip.h>
-#include "ov_camera_module.h"
-
-#define OV2718_DRIVER_NAME "ov2718"
-
-#define OV2718_EXPO_H 0x30B6
-#define OV2718_EXPO_L 0x30B7
-#define OV2718_AGC 0x30BB
-#define OV2718_DGC_H 0x315A
-#define OV2718_DGC_L 0x315B
-
-#define OV2718_AEC_GROUP_UPDATE_ADDRESS 0x3464
-#define OV2718_AEC_GROUP_UPDATE_START_DATA 0x03
-#define OV2718_AEC_GROUP_UPDATE_END_DATA 0x10
-#define OV2718_AEC_GROUP_UPDATE_END_LAUNCH 0xA0
-
-#define OV2718_PIDH_ADDR 0x300A
-#define OV2718_PIDL_ADDR 0x300B
-
-/* High byte of product ID */
-#define OV2718_PIDH_MAGIC 0x27
-/* Low byte of product ID  */
-#define OV2718_PIDL_MAGIC 0x70
-
-#define OV2718_EXT_CLK 24000000
-#define OV2718_PLL_PREDIV0_REG 0x3088
-#define OV2718_PLL_PREDIV_REG  0x3080
-#define OV2718_PLL_MUL_HIGH_REG 0x3081
-#define OV2718_PLL_MUL_LOW_REG 0x3082
-#define OV2718_PLL_SPDIV_REG 0x3086
-#define OV2718_PLL_DIVSYS_REG 0x3084
-#define OV2718_TIMING_VTS_HIGH_REG 0x30b2
-#define OV2718_TIMING_VTS_LOW_REG 0x30b3
-#define OV2718_TIMING_HTS_HIGH_REG 0x30b0
-#define OV2718_TIMING_HTS_LOW_REG 0x30b1
-#define OV2718_FINE_INTG_TIME_MIN 0
-#define OV2718_FINE_INTG_TIME_MAX_MARGIN 0
-#define OV2718_COARSE_INTG_TIME_MIN 0
-#define OV2718_COARSE_INTG_TIME_MAX_MARGIN 4
-#define OV2718_TIMING_X_INC 0x3814
-#define OV2718_TIMING_Y_INC 0x3815
-#define OV2718_HORIZONTAL_START_HIGH_REG 0x30a0
-#define OV2718_HORIZONTAL_START_LOW_REG 0x30a1
-#define OV2718_VERTICAL_START_HIGH_REG 0x30a2
-#define OV2718_VERTICAL_START_LOW_REG 0x30a3
-#define OV2718_HORIZONTAL_END_HIGH_REG 0x30a4
-#define OV2718_HORIZONTAL_END_LOW_REG 0x30a5
-#define OV2718_VERTICAL_END_HIGH_REG 0x30a6
-#define OV2718_VERTICAL_END_LOW_REG 0x30a7
-#define OV2718_HORIZONTAL_OUTPUT_SIZE_HIGH_REG 0x30ac
-#define OV2718_HORIZONTAL_OUTPUT_SIZE_LOW_REG 0x30ad
-#define OV2718_VERTICAL_OUTPUT_SIZE_HIGH_REG 0x30ae
-#define OV2718_VERTICAL_OUTPUT_SIZE_LOW_REG 0x30af
-#define OV2718_H_WIN_OFF_HIGH_REG 0x30a8
-#define OV2718_H_WIN_OFF_LOW_REG 0x30a9
-#define OV2718_V_WIN_OFF_HIGH_REG 0x30aa
-#define OV2718_V_WIN_OFF_LOW_REG 0x30ab
-
-#define OV2718_READMODE 0x30C0
-#define OV2718_TIMING_CONCTROL_VH 0x30a9
-#define OV2718_CFA_PATTERN 0x3252
-
-/* ======================================================================== */
-/* Base sensor configs */
-/* ======================================================================== */
-/* MCLK:24MHz 1920x1080 30fps 10bit mipi 1lane 704Mbps/lane */
-static struct ov_camera_module_reg ov2718_init_tab_1920_1080_30fps[] = {
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3013, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_TIMEOUT, 0x0000, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3000, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3001, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3002, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3003, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3004, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3005, 0x56},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3006, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3007, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3008, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3009, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300c, 0x6c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300d, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300e, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x300f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3012, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3013, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3014, 0x84},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3015, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3017, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3018, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3019, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301b, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301e, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301f, 0x5f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3030, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3031, 0x63},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3032, 0xf0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3033, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3034, 0x34},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3035, 0x51},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3036, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3037, 0x9f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3038, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3039, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303a, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303b, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303c, 0xf0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303e, 0x0b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x303f, 0xe3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3040, 0xf3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3041, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3042, 0xf6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3043, 0x65},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3044, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3045, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3046, 0x55},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3047, 0xf7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3048, 0x31},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3049, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304a, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304b, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304c, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304d, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304e, 0x0b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304f, 0x3d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3050, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3060, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3061, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3062, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3063, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3064, 0x0b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3065, 0xf8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3066, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3080, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3081, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3082, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3083, 0xe3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3084, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3085, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3086, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3087, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3089, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x308a, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3093, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a4, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a5, 0x8f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a6, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a7, 0x47},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30aa, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ab, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ac, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ad, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ae, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30af, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b0, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b1, 0x98},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b2, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b3, 0x65},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b7, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b9, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ba, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30bb, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30bc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30bd, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30be, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30bf, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c0, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c2, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c4, 0x4a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30c8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30d1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30d2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30d3, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30d4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30d9, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30da, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30dd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30de, 0x16},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30df, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e0, 0x17},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e2, 0x18},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e4, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30e9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ea, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30eb, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ec, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ed, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3101, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3102, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3103, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3104, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3105, 0x6c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3106, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3107, 0x72},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3108, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3109, 0x6c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x310a, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x310b, 0x69},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x310c, 0x43},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x310d, 0x42},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x310e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3120, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3121, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3122, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3123, 0xf0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3124, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3125, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3126, 0x3f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3127, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3128, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3129, 0x3a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312b, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312d, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312e, 0x1d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x312f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3130, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3131, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3132, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3140, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3141, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3142, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3143, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3144, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3145, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3146, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3147, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3148, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3149, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314e, 0x1c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x314f, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3150, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3151, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3152, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3153, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3154, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3155, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3156, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3157, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3158, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3159, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315a, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315c, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3160, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3161, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3162, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3163, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3164, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3165, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3190, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3191, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3193, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3194, 0x13},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3195, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3196, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3197, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3198, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3199, 0x7f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319a, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319b, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319c, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319d, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319e, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x319f, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a0, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a1, 0x55},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31a7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b2, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b5, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31b9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ba, 0x00},
-/* MIPI timing */
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d0, 0x3c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d1, 0x34},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d2, 0x3c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d4, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d6, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d7, 0x86},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31d9, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31da, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31db, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31dc, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31dd, 0x69},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31de, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31df, 0x3c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e0, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e1, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e3, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e4, 0x0d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e5, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e7, 0x2b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e8, 0x6b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31e9, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ea, 0xeb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31eb, 0x3f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ec, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ed, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ee, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ef, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f0, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f1, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f2, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f3, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f4, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f5, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f6, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f7, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f8, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31f9, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31fa, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31fb, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31fd, 0xcb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31fe, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31ff, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3200, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3201, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3202, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3203, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3204, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3205, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3206, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3207, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3208, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3209, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320a, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320b, 0x1b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320c, 0x1f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320d, 0x1e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320e, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x320f, 0x2d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3210, 0x2c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3211, 0x2b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3212, 0x2a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3213, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3214, 0x22},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3215, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3216, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3217, 0x2b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3218, 0x6b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3219, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x321a, 0xeb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x321b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3230, 0x3a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3231, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3232, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3233, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3234, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3235, 0xaa},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3236, 0x55},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3237, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3238, 0x66},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3239, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x323a, 0x88},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x323b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x323c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x323d, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3250, 0x31},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3251, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3252, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3253, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3254, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3255, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3256, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3257, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3258, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3270, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3271, 0x60},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3272, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3273, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3274, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3275, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3276, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3277, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3278, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3279, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327b, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327c, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327d, 0x60},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327e, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x327f, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3288, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3289, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328a, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328c, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328e, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x328f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3290, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3291, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3292, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3293, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3294, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3295, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3296, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3297, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3298, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3299, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329a, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329c, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329e, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x329f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a0, 0x7f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a1, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a2, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a4, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a6, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32a9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32aa, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32ab, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32ac, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32ad, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32ae, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32af, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32b9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32ba, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32bb, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32bc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32bd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32be, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32bf, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c8, 0x87},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x32c9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3330, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3331, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3332, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3333, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3334, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3335, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3336, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3337, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3338, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3339, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333b, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x333f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3340, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3341, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3342, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3343, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3344, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3345, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3346, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3347, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3348, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3349, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x334a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x334b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x334c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x334d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x334e, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3360, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3361, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3362, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3363, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3364, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3365, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3366, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3367, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3368, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3369, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336a, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336c, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x336f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3370, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3371, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3372, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3373, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3374, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3375, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3376, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3377, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3378, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3379, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x337f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3380, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3381, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3382, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3383, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3384, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3385, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3386, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3387, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3388, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3389, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x338f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3390, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3391, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3392, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3393, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3394, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3395, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3396, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3397, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3398, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3399, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x339a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x339b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b1, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b2, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b3, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b4, 0xe0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b5, 0x6b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33b9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ba, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33bb, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33bc, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33bd, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33be, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33bf, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33c0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33c1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33c2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33c3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e0, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e1, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e2, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e3, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e4, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e5, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e7, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e8, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33e9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ea, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33eb, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ec, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ed, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ee, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ef, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f0, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f1, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f2, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f4, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f5, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f6, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f7, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33f9, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33fa, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33fb, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33fc, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33fd, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33fe, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x33ff, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3400, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3401, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3402, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3403, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3404, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3405, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3406, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3407, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3408, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3409, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340a, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340b, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340c, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x340f, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3410, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3411, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3412, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3413, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3414, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3415, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3416, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3417, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3418, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3419, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x341a, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x341b, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x341c, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x341d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x341e, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3440, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3441, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3442, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3443, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3444, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3445, 0xf0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3446, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3447, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3448, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3460, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3461, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3462, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3463, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3464, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3465, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3466, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3467, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3468, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3469, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x346a, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x346b, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3480, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3481, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3482, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3483, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3484, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3485, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3486, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3487, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3488, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3489, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x348a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x348b, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x348c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x348d, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x348f, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7000, 0xda},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7001, 0xcf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7002, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7003, 0xd0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7004, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7005, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7006, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7007, 0xb6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7008, 0xee},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7009, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700a, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700b, 0xdc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700c, 0xdf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700d, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700e, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x700f, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7010, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7011, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7012, 0x2e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7013, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7014, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7015, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7016, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7017, 0x1a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7018, 0xc1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7019, 0x0e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701a, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701c, 0xe6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701d, 0xb0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701e, 0x6e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x701f, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7020, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7021, 0xd7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7022, 0xed},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7023, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7024, 0x22},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7025, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7026, 0x66},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7027, 0x2c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7028, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7029, 0x19},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702a, 0xc1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702b, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702c, 0xa1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702d, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702e, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x702f, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7030, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7031, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7032, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7033, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7034, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7035, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7036, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7037, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7038, 0xdb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7039, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703a, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703b, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703c, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703d, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703e, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x703f, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7040, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7041, 0x17},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7042, 0xdb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7043, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7044, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7045, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7046, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7047, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7048, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7049, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704a, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704b, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704c, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704d, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x704f, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7050, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7051, 0xee},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7052, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7053, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7054, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7055, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7056, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7057, 0x17},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7058, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7059, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705a, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705b, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705c, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705d, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705e, 0x25},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x705f, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7060, 0xc1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7061, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7062, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7063, 0x42},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7064, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7065, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7066, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7067, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7068, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7069, 0xdb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706a, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706b, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706c, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706e, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x706f, 0x11},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7070, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7071, 0xc7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7072, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7073, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7074, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7075, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7076, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7077, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7078, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7079, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707b, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707c, 0xdb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707d, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707e, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x707f, 0xee},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7080, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7081, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7082, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7083, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7084, 0xec},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7085, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7086, 0x15},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7087, 0xc2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7088, 0x47},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7089, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708a, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708b, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708c, 0x43},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x708f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7090, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7091, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7092, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7093, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7094, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7095, 0x12},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7096, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7097, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7098, 0xd0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7099, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709a, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709b, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709c, 0x37},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709d, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709e, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x709f, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a0, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a1, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a2, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a4, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a6, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a7, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a8, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70a9, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70aa, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ab, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ac, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ad, 0xe0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ae, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70af, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b0, 0xcd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b1, 0x45},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b3, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b4, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b5, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b6, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b7, 0x1e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b8, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70b9, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ba, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70bb, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70bc, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70bd, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70be, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70bf, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c0, 0x15},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c1, 0xc2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c2, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c3, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c4, 0xcd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c5, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c6, 0x60},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c8, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70c9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ca, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70cb, 0x19},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70cc, 0xc1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70cd, 0x7e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ce, 0xa1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70cf, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d0, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d1, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d3, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d4, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d5, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d6, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d7, 0xd0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d8, 0xdc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70d9, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70da, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70db, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70dc, 0x37},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70dd, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70de, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70df, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e0, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e1, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e3, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e5, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e6, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e7, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e8, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70e9, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ea, 0xe0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70eb, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ec, 0xb5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ed, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ee, 0x45},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ef, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f0, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f1, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f3, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f4, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f5, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f6, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f7, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f8, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70f9, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70fa, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70fb, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70fc, 0xd5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70fd, 0xe3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70fe, 0x18},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x70ff, 0xc2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7100, 0xae},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7101, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7102, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7103, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7104, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7105, 0xdd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7106, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7107, 0xcf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7108, 0xdf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7109, 0xb6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710a, 0xee},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710b, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710c, 0x13},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710d, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710e, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x710f, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7110, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7111, 0x2e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7112, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7113, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7114, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7115, 0x2c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7116, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7117, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7118, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7119, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711b, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711c, 0x18},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711d, 0xc7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711e, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x711f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7120, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7121, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7122, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7123, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7124, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7125, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7126, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7127, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7128, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7129, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712b, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712c, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712d, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712e, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x712f, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7130, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7131, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7132, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7133, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7134, 0x64},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7135, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7136, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7137, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7138, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7139, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713b, 0xe6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713c, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713d, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713e, 0xec},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x713f, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7140, 0xe2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7141, 0x28},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7142, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7143, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7144, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7145, 0xe0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7146, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7147, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7148, 0xcd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7149, 0x45},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714a, 0xbe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714b, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714d, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714e, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x714f, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7150, 0x1c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7151, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7152, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7153, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7154, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7155, 0xad},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7156, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7157, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7158, 0x46},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7159, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715a, 0xd5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715c, 0x17},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715d, 0xc2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715e, 0xc6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x715f, 0xde},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7160, 0xcf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7161, 0xdf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7162, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7163, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7164, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7165, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7166, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7167, 0x76},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7168, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7169, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716a, 0xb6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716b, 0xfe},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716c, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716d, 0xbf},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716e, 0xd6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x716f, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7170, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7171, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7172, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7173, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7174, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7175, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7176, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7177, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7178, 0x5e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7179, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717a, 0x1d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717b, 0xaa},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717c, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717d, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717e, 0x45},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x717f, 0xe6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7180, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7181, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7182, 0xec},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7183, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7184, 0x7d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7185, 0xc3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7186, 0xd2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7187, 0x42},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7188, 0xb8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7189, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718a, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718b, 0xd5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718c, 0xb6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718e, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x718f, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7190, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7191, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7192, 0xb5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7193, 0x4b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7194, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7195, 0x58},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7196, 0x76},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7197, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7198, 0x6a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7199, 0xdd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719a, 0x1a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719b, 0xc2},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719c, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719d, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719e, 0xbd},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x719f, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a0, 0xe6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a1, 0xec},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a2, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a3, 0x19},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a4, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a5, 0xf6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a6, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a7, 0xc1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a8, 0xda},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71a9, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71aa, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ab, 0x37},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ac, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ad, 0x35},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ae, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71af, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b0, 0xe1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b1, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b2, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b3, 0xd3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b4, 0xb6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b5, 0x0c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b6, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b7, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b8, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71b9, 0xd9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ba, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71bb, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71bc, 0x56},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71bd, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71be, 0xe3},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71bf, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c0, 0x1d},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c1, 0x56},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c2, 0xaa},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c3, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c4, 0x1a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c6, 0xb5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c7, 0x48},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c8, 0x57},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71c9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ca, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71cb, 0xe7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71cc, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71cd, 0xb5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71ce, 0x13},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71cf, 0xd9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d1, 0xe8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d2, 0x56},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d3, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d4, 0xb4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d5, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d6, 0x57},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d8, 0x54},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71d9, 0xe7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71da, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71db, 0xab},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71dc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71dd, 0x66},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71de, 0x62},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71df, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e0, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e1, 0xb9},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e2, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e3, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e4, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e5, 0xbc},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e6, 0x26},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e7, 0xb7},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x71e9, 0xc8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7600, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7601, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7602, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7603, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7604, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7605, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7606, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7607, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7608, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7609, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760a, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760b, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760c, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760d, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x760f, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7610, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7611, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7612, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7613, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7614, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7615, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7616, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7617, 0x1c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7618, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7619, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761b, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761d, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761e, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x761f, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7620, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7621, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7622, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7623, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7624, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7625, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7626, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7627, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7628, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7629, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762b, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762c, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762d, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x762f, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7630, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7631, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7632, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7633, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7634, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7635, 0x0e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7636, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7637, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7638, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7639, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763b, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763d, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x763f, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7640, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7641, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7642, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7643, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7644, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7645, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7646, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7647, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7648, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7649, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764b, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764d, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x764f, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7650, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7651, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7652, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7653, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7654, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7655, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7656, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7657, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7658, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7659, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765b, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765c, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765e, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x765f, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7660, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7661, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7662, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7663, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7664, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7665, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7666, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7667, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7668, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7669, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766a, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x766f, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7670, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7671, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7672, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7673, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7674, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7675, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7676, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7677, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7678, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7679, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767b, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767c, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767d, 0xc4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x767f, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7680, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7681, 0xc4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7682, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7683, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7684, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7685, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7686, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7687, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7688, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7689, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768a, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768b, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x768f, 0xc4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7690, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7691, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7692, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7693, 0xc4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7694, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7695, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7696, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7697, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7698, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7699, 0x0b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769b, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769d, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x769f, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a0, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a1, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a4, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a5, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a7, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a8, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76a9, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76aa, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ab, 0x9a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ac, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ad, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ae, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76af, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b0, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b1, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b2, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b3, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b6, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b7, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76b9, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ba, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76bb, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76bc, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76bd, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76be, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76bf, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c1, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c2, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c3, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c4, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c5, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c8, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76c9, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ca, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76cb, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76cc, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76cd, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ce, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76cf, 0x98},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d0, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d1, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d3, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d4, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d5, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d6, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d7, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76d9, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76da, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76db, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76dc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76dd, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76de, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76df, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e0, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e1, 0x97},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e2, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e3, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e5, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e6, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e7, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e8, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76e9, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ea, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76eb, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ec, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ed, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ee, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ef, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f0, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f1, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f2, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f3, 0x96},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f4, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f5, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f7, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f8, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76f9, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76fa, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76fb, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76fc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76fd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76fe, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x76ff, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7700, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7701, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7702, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7703, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7704, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7705, 0x95},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7706, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7707, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7708, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7709, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770b, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770c, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770d, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x770f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7710, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7711, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7712, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7713, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7714, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7715, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7716, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7717, 0x94},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7718, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7719, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771b, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771c, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771d, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x771f, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7720, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7721, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7722, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7723, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7724, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7725, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7726, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7727, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7728, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7729, 0x93},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772b, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x772f, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7730, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7731, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7732, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7733, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7734, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7735, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7736, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7737, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7738, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7739, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773a, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773b, 0x92},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773c, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773d, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773e, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x773f, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7740, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7741, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7742, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7743, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7744, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7745, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7746, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7747, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7748, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7749, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774b, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774c, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774d, 0x91},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x774f, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7750, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7751, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7752, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7753, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7754, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7755, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7756, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7757, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7758, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7759, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775b, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775c, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775d, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775e, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x775f, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7760, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7761, 0x83},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7762, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7763, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7764, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7765, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7766, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7767, 0x32},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7768, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7769, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776b, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776d, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776e, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x776f, 0x74},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7770, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7771, 0x90},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7772, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7773, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7774, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7775, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7776, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7777, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7778, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7779, 0x31},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777a, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777b, 0xd1},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777c, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x777f, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7780, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7781, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7782, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7783, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7784, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7785, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7786, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7787, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7788, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7789, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778a, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778b, 0x1c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778e, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x778f, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7790, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7791, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7792, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7793, 0xac},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7794, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7795, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7796, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7797, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7798, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7799, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779d, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x779f, 0xe5},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a0, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a1, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77a9, 0xbb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77aa, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ab, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ac, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ad, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ae, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77af, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b0, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b1, 0xaa},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77b9, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ba, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77bb, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77bc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77bd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77be, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77bf, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c0, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c1, 0x88},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77c9, 0x77},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ca, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77cb, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77cc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77cd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ce, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77cf, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d0, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d1, 0x66},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77d9, 0x55},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77da, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77db, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77dc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77dd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77de, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77df, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e0, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e1, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77e9, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ea, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77eb, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ec, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ed, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ee, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ef, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f0, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f1, 0x22},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f2, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f3, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f4, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f6, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f8, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77f9, 0x11},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77fa, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77fb, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77fc, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77fd, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77fe, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x77ff, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7800, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7801, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7802, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7803, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7804, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7805, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7806, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7807, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7808, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7809, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780a, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780c, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780d, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780e, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x780f, 0x50},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7810, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7811, 0xe4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7812, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7813, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7814, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7815, 0x5c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7816, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7817, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7818, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7819, 0x1c},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781a, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781b, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781c, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781d, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781e, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x781f, 0x24},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7820, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7821, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7822, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7823, 0x20},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7824, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7825, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7826, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7827, 0x36},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7828, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7829, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x782f, 0xbb},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7830, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7831, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7832, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7833, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7834, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7835, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7836, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7837, 0xaa},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7838, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7839, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x783f, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7840, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7841, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7842, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7843, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7844, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7845, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7846, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7847, 0x88},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7848, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7849, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x784f, 0x77},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7850, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7851, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7852, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7853, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7854, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7855, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7856, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7857, 0x66},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7858, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7859, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x785f, 0x55},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7860, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7861, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7862, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7863, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7864, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7865, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7866, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7867, 0x44},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7868, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7869, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x786f, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7870, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7871, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7872, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7873, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7874, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7875, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7876, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7877, 0x22},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7878, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7879, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787a, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787d, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787e, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x787f, 0x11},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7880, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7881, 0x10},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7882, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7883, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7884, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7885, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7886, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7887, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7888, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7889, 0xff},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788b, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788c, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788d, 0x33},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788e, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x788f, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7890, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7891, 0x3b},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7892, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7893, 0x5e},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7894, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7895, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7896, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7897, 0xc0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7898, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x7899, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789a, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789b, 0x99},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789c, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789d, 0x14},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789e, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x789f, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a0, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a1, 0xa4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a3, 0x0a},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a4, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a5, 0xa6},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a6, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a8, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78a9, 0xa0},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78aa, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78ab, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78ac, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78ad, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78ae, 0x05},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78af, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b0, 0x06},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b2, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b4, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b5, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b6, 0x0f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x78b7, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a0, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a1, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a2, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a3, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a4, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a5, 0x8f},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a6, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a7, 0x47},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a9, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30aa, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ab, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ac, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ad, 0x88},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ae, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30af, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b0, 0x09},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b1, 0xd8},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b2, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30b3, 0x70},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30bb, 0x40},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3196, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3197, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3195, 0x29},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3190, 0x38},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x304d, 0xa4},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3033, 0x30},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3012, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315a, 0x02},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x315b, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a8, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30a9, 0x03},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30aa, 0x00},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ab, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ac, 0x07},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ad, 0x80},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30ae, 0x04},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x30af, 0x38},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31A3, 0x08},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x31FE, 0x01},
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3195, 0x04}
-};
-
-static struct ov_camera_module_config ov2718_configs[] = {
-	{
-		.name = "1920x1080_30fps",
-		.frm_fmt = {
-			.width = 1920,
-			.height = 1080,
-			.code = V4L2_MBUS_FMT_SBGGR10_1X10
-		},
-		.frm_intrvl = {
-			.interval = {
-				.numerator = 1,
-				.denominator = 30
-			}
-		},
-		.auto_exp_enabled = false,
-		.auto_gain_enabled = false,
-		.auto_wb_enabled = false,
-		.reg_table = (void *)ov2718_init_tab_1920_1080_30fps,
-		.reg_table_num_entries =
-			ARRAY_SIZE(ov2718_init_tab_1920_1080_30fps),
-		.v_blanking_time_us = 1600,
-		PLTFRM_CAM_ITF_MIPI_CFG(0, 1, 704, OV2718_EXT_CLK)
-	}
-};
-
-static int ov2718_set_flip(
-	struct ov_camera_module *cam_mod,
-	struct pltfrm_camera_module_reg reglist[],
-	int len)
-{
-	int i, mode = 0;
-	u16 match_reg[3];
-
-	mode = ov_camera_module_get_flip_mirror(cam_mod);
-
-	if (mode == -1) {
-		ov_camera_module_pr_debug(
-			cam_mod,
-			"dts don't set flip, return!\n");
-		return 0;
-	}
-
-	if (mode == OV_FLIP_BIT_MASK) {
-		match_reg[0] = 0x08;
-		match_reg[1] = 0x03;
-		match_reg[2] = 0x21;
-	} else if (mode == OV_MIRROR_BIT_MASK) {
-		match_reg[0] = 0x04;
-		match_reg[1] = 0x03;
-		match_reg[2] = 0x22;
-	} else if (mode == (OV_MIRROR_BIT_MASK |
-		OV_FLIP_BIT_MASK)) {
-		match_reg[0] = 0x0C;
-		match_reg[1] = 0x03;
-		match_reg[2] = 0x23;
-	} else {
-		match_reg[0] = 0x04;
-		match_reg[1] = 0x03;
-		match_reg[2] = 0x21;
-	}
-
-	for (i = len; i > 0; i--) {
-		if (reglist[i].reg == OV2718_READMODE)
-			reglist[i].val = match_reg[0];
-		else if (reglist[i].reg == OV2718_TIMING_CONCTROL_VH)
-			reglist[i].val = match_reg[1];
-		else if (reglist[i].reg == OV2718_CFA_PATTERN)
-			reglist[i].val = match_reg[2];
-	}
-
-	return 0;
-}
-
-static int OV2718_g_VTS(struct ov_camera_module *cam_mod, u32 *vts)
-{
-	u32 msb, lsb;
-	int ret;
-
-	ret = ov_camera_module_read_reg_table(
-		cam_mod,
-		OV2718_TIMING_VTS_HIGH_REG,
-		&msb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	ret = ov_camera_module_read_reg_table(
-		cam_mod,
-		OV2718_TIMING_VTS_LOW_REG,
-		&lsb);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	*vts = (msb << 8) | lsb;
-
-	return 0;
-err:
-	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int OV2718_auto_adjust_fps(struct ov_camera_module *cam_mod,
-	u32 exp_time)
-{
-	int ret;
-	u32 vts;
-
-	if ((exp_time + OV2718_COARSE_INTG_TIME_MAX_MARGIN)
-		> cam_mod->vts_min)
-		vts = exp_time + OV2718_COARSE_INTG_TIME_MAX_MARGIN;
-	else
-		vts = cam_mod->vts_min;
-
-	if (vts > 0xfff)
-		vts = 0xfff;
-	else
-		vts = vts;
-
-	ret = ov_camera_module_write_reg(cam_mod,
-		OV2718_TIMING_VTS_LOW_REG,
-		vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod,
-		OV2718_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0x0F);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		ov_camera_module_pr_info(cam_mod,
-			"updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-static int ov2718_set_vts(struct ov_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = ov_camera_module_write_reg(cam_mod,
-		OV2718_TIMING_VTS_LOW_REG,
-		vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod,
-		OV2718_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0x0F);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		ov_camera_module_pr_debug(cam_mod,
-			"updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-static void ov2718_gains_update(struct ov_camera_module *cam_mod, int again)
-{
-	static int again_table[8] = {100, 200, 410, 810, 1110, 2210, 4410, 8810};
-	int i = 0;
-	long ggain, dgain;
-
-	ggain = again;
-	for (i = 1; i < 8; i++) {
-		if (again < again_table[i]) {
-			again = i - 1;
-			break;
-		}
-	}
-
-	if (again < 1)
-		again = 0x0; //LCG 1024
-	else if (again < 2)
-		again = 0x1; //LCG 2048
-	else if (again < 3)
-		again = 0x2; //LCG 4096
-	else if (again < 4)
-		again = 0x3; //LCG 8192
-	else if (again < 5)
-		again = 0x40; //HCG 1024
-	else if (again < 6)
-		again = 0x41; //HCG 2048
-	else if (again < 7)
-		again = 0x42; //HCG 4096
-	else
-		again = 0x43; //HCG 8192
-
-	ov_camera_module_write_reg(cam_mod, OV2718_AGC, again);
-	dgain = (ggain << 8) / again_table[i - 1];
-	ov_camera_module_write_reg(cam_mod, OV2718_DGC_H, (dgain >> 8) & 0xff);
-	ov_camera_module_write_reg(cam_mod, OV2718_DGC_L, dgain & 0xff);
-}
-
-static int ov2718_write_aec(struct ov_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	ov_camera_module_pr_debug(cam_mod,
-		"exp_time = %d, gain = %d, flash_mode = %d\n",
-		cam_mod->exp_config.exp_time,
-		cam_mod->exp_config.gain,
-		cam_mod->exp_config.flash_mode);
-
-	if (cam_mod->state == OV_CAMERA_MODULE_SW_STANDBY ||
-		cam_mod->state == OV_CAMERA_MODULE_STREAMING) {
-		u32 a_gain = cam_mod->exp_config.gain;
-		u32 exp_time = cam_mod->exp_config.exp_time;
-
-		a_gain = a_gain * cam_mod->exp_config.gain_percent / 100;
-
-		if (!IS_ERR_VALUE(ret) && cam_mod->auto_adjust_fps)
-			ret |= OV2718_auto_adjust_fps(cam_mod, cam_mod->exp_config.exp_time);
-
-		mutex_lock(&cam_mod->lock);
-		ret |= ov_camera_module_write_reg(cam_mod,
-			OV2718_EXPO_H,
-			(exp_time >> 8) & 0xff);
-		ret |= ov_camera_module_write_reg(cam_mod,
-			OV2718_EXPO_L,
-			(exp_time >> 0) & 0xff);
-
-		ov2718_gains_update(cam_mod, a_gain);
-		if (!cam_mod->auto_adjust_fps)
-			ret |= ov2718_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-		mutex_unlock(&cam_mod->lock);
-	}
-
-	if (IS_ERR_VALUE(ret))
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int ov2718_g_ctrl(struct ov_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	ov_camera_module_pr_debug(cam_mod, "\n");
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-	case V4L2_CID_FLASH_LED_MODE:
-		/* nothing to be done here */
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		ov_camera_module_pr_debug(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int ov2718_filltimings(struct ov_camera_module_custom_config *custom)
-{
-	int i, j;
-	u32 win_h_off = 0, win_v_off = 0;
-	struct ov_camera_module_config *config;
-	struct ov_camera_module_timings *timings;
-	struct ov_camera_module_reg *reg_table;
-	int reg_table_num_entries;
-
-	for (i = 0; i < custom->num_configs; i++) {
-		config = &custom->configs[i];
-		reg_table = config->reg_table;
-		reg_table_num_entries = config->reg_table_num_entries;
-		timings = &config->timings;
-
-		memset(timings, 0x00, sizeof(*timings));
-		for (j = 0; j < reg_table_num_entries; j++) {
-			switch (reg_table[j].reg) {
-			case OV2718_TIMING_VTS_HIGH_REG:
-				timings->frame_length_lines =
-					((reg_table[j].val << 8) |
-					(timings->frame_length_lines & 0xff));
-				break;
-			case OV2718_TIMING_VTS_LOW_REG:
-				timings->frame_length_lines =
-					(reg_table[j].val |
-					(timings->frame_length_lines & 0xff00));
-				break;
-			case OV2718_TIMING_HTS_HIGH_REG:
-				timings->line_length_pck =
-					((reg_table[j].val << 8) |
-					timings->line_length_pck);
-				break;
-			case OV2718_TIMING_HTS_LOW_REG:
-				timings->line_length_pck =
-					(reg_table[j].val |
-					(timings->line_length_pck & 0xff00));
-				break;
-			case OV2718_TIMING_X_INC:
-				timings->binning_factor_x =
-					((reg_table[j].val >> 4) + 1) / 2;
-				if (timings->binning_factor_x == 0)
-					timings->binning_factor_x = 1;
-				break;
-			case OV2718_TIMING_Y_INC:
-				timings->binning_factor_y =
-					((reg_table[j].val >> 4) + 1) / 2;
-				if (timings->binning_factor_y == 0)
-					timings->binning_factor_y = 1;
-				break;
-			case OV2718_HORIZONTAL_START_HIGH_REG:
-				timings->crop_horizontal_start =
-					((reg_table[j].val << 8) |
-					(timings->crop_horizontal_start & 0xff));
-				break;
-			case OV2718_HORIZONTAL_START_LOW_REG:
-				timings->crop_horizontal_start =
-					(reg_table[j].val |
-					(timings->crop_horizontal_start & 0xff00));
-				break;
-			case OV2718_VERTICAL_START_HIGH_REG:
-				timings->crop_vertical_start =
-					((reg_table[j].val << 8) |
-					(timings->crop_vertical_start & 0xff));
-				break;
-			case OV2718_VERTICAL_START_LOW_REG:
-				timings->crop_vertical_start =
-					((reg_table[j].val) |
-					(timings->crop_vertical_start & 0xff00));
-				break;
-			case OV2718_HORIZONTAL_END_HIGH_REG:
-				timings->crop_horizontal_end =
-					((reg_table[j].val << 8) |
-					(timings->crop_horizontal_end & 0xff));
-				break;
-			case OV2718_HORIZONTAL_END_LOW_REG:
-				timings->crop_horizontal_end =
-					(reg_table[j].val |
-					(timings->crop_horizontal_end & 0xff00));
-				break;
-			case OV2718_VERTICAL_END_HIGH_REG:
-				timings->crop_vertical_end =
-					((reg_table[j].val << 8) |
-					(timings->crop_vertical_end & 0xff));
-				break;
-			case OV2718_VERTICAL_END_LOW_REG:
-				timings->crop_vertical_end =
-					(reg_table[j].val |
-					(timings->crop_vertical_end & 0xff00));
-				break;
-			case OV2718_H_WIN_OFF_HIGH_REG:
-				win_h_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case OV2718_H_WIN_OFF_LOW_REG:
-				win_h_off |= (reg_table[j].val & 0xff);
-				break;
-			case OV2718_V_WIN_OFF_HIGH_REG:
-				win_v_off = (reg_table[j].val & 0xf) << 8;
-				break;
-			case OV2718_V_WIN_OFF_LOW_REG:
-				win_v_off |= (reg_table[j].val & 0xff);
-				break;
-			case OV2718_HORIZONTAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_width =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_width & 0xff));
-				break;
-			case OV2718_HORIZONTAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_width =
-					(reg_table[j].val |
-					(timings->sensor_output_width & 0xff00));
-				break;
-			case OV2718_VERTICAL_OUTPUT_SIZE_HIGH_REG:
-				timings->sensor_output_height =
-					((reg_table[j].val << 8) |
-					(timings->sensor_output_height & 0xff));
-				break;
-			case OV2718_VERTICAL_OUTPUT_SIZE_LOW_REG:
-				timings->sensor_output_height =
-					(reg_table[j].val |
-					(timings->sensor_output_height & 0xff00));
-				break;
-			}
-		}
-
-		timings->crop_horizontal_start += win_h_off;
-		timings->crop_horizontal_end -= win_h_off;
-		timings->crop_vertical_start += win_v_off;
-		timings->crop_vertical_end -= win_v_off;
-
-		timings->exp_time >>= 4;
-		timings->vt_pix_clk_freq_hz =
-			config->frm_intrvl.interval.denominator
-			* timings->frame_length_lines
-			* timings->line_length_pck;
-
-		timings->coarse_integration_time_min =
-			OV2718_COARSE_INTG_TIME_MIN;
-		timings->coarse_integration_time_max_margin =
-			OV2718_COARSE_INTG_TIME_MAX_MARGIN;
-
-		/* OV Sensor do not use fine integration time. */
-		timings->fine_integration_time_min =
-			OV2718_FINE_INTG_TIME_MIN;
-		timings->fine_integration_time_max_margin =
-			OV2718_FINE_INTG_TIME_MAX_MARGIN;
-	}
-
-	return 0;
-}
-
-static int ov2718_g_timings(struct ov_camera_module *cam_mod,
-			    struct ov_camera_module_timings *timings)
-{
-	int ret = 0;
-	unsigned int vts;
-
-	if (IS_ERR_OR_NULL(cam_mod->active_config))
-		goto err;
-
-	*timings = cam_mod->active_config->timings;
-
-	vts = (!cam_mod->vts_cur) ?
-		timings->frame_length_lines :
-		cam_mod->vts_cur;
-
-	if (cam_mod->frm_intrvl_valid)
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-	else
-		timings->vt_pix_clk_freq_hz =
-			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
-			* timings->line_length_pck;
-
-	timings->frame_length_lines = vts;
-
-	return ret;
-err:
-	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int ov2718_s_ctrl(struct ov_camera_module *cam_mod, u32 ctrl_id)
-{
-	int ret = 0;
-
-	ov_camera_module_pr_debug(cam_mod, "\n");
-	switch (ctrl_id) {
-	case V4L2_CID_GAIN:
-	case V4L2_CID_EXPOSURE:
-		ret = ov2718_write_aec(cam_mod);
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	if (IS_ERR_VALUE(ret))
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int ov2718_s_ext_ctrls(struct ov_camera_module *cam_mod,
-				 struct ov_camera_module_ext_ctrls *ctrls)
-{
-	int ret = 0;
-
-	if ((ctrls->ctrls[0].id == V4L2_CID_GAIN ||
-		ctrls->ctrls[0].id == V4L2_CID_EXPOSURE))
-		ret = ov2718_write_aec(cam_mod);
-	else
-		ret = -EINVAL;
-
-	if (IS_ERR_VALUE(ret))
-		ov_camera_module_pr_debug(cam_mod, "failed with error (%d)\n", ret);
-
-	return ret;
-}
-
-static int ov2718_start_streaming(struct ov_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	ov_camera_module_pr_info(cam_mod, "active config=%s\n", cam_mod->active_config->name);
-	ret = OV2718_g_VTS(cam_mod, &cam_mod->vts_min);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	mutex_lock(&cam_mod->lock);
-	ret = ov_camera_module_write_reg(cam_mod, 0x3012, 0x01);
-	mutex_unlock(&cam_mod->lock);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n",
-		ret);
-	return ret;
-}
-
-static int ov2718_stop_streaming(struct ov_camera_module *cam_mod)
-{
-	int ret = 0;
-
-	ov_camera_module_pr_info(cam_mod, "\n");
-	mutex_lock(&cam_mod->lock);
-	ret = ov_camera_module_write_reg(cam_mod, 0x3012, 0x00);
-	mutex_unlock(&cam_mod->lock);
-	if (IS_ERR_VALUE(ret))
-		goto err;
-
-	return 0;
-err:
-	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-static int ov2718_check_camera_id(struct ov_camera_module *cam_mod)
-{
-	u32 pidh, pidl;
-	int ret = 0;
-
-	ov_camera_module_pr_debug(cam_mod, "\n");
-
-	ret |= ov_camera_module_read_reg(cam_mod, 1, OV2718_PIDH_ADDR, &pidh);
-	ret |= ov_camera_module_read_reg(cam_mod, 1, OV2718_PIDL_ADDR, &pidl);
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod,
-			"register read failed, camera module powered off?\n");
-		goto err;
-	}
-
-	if (pidh == OV2718_PIDH_MAGIC && pidl == OV2718_PIDL_MAGIC) {
-		ov_camera_module_pr_info(cam_mod,
-			"successfully detected camera ID 0x%02x%02x\n",
-			pidh, pidl);
-	} else {
-		ov_camera_module_pr_err(cam_mod,
-			"wrong camera ID, expected 0x%02x%02x, detected 0x%02x%02x\n",
-			OV2718_PIDH_MAGIC, OV2718_PIDL_MAGIC, pidh, pidl);
-		ret = -EINVAL;
-		goto err;
-	}
-
-	return 0;
-err:
-	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	return ret;
-}
-
-/* ======================================================================== */
-/* This part is platform dependent */
-/* ======================================================================== */
-
-static struct v4l2_subdev_core_ops ov2718_camera_module_core_ops = {
-	.g_ctrl = ov_camera_module_g_ctrl,
-	.s_ctrl = ov_camera_module_s_ctrl,
-	.s_ext_ctrls = ov_camera_module_s_ext_ctrls,
-	.s_power = ov_camera_module_s_power,
-	.ioctl = ov_camera_module_ioctl
-};
-
-static struct v4l2_subdev_video_ops ov2718_camera_module_video_ops = {
-	.enum_frameintervals = ov_camera_module_enum_frameintervals,
-	.s_mbus_fmt = ov_camera_module_s_fmt,
-	.g_mbus_fmt = ov_camera_module_g_fmt,
-	.try_mbus_fmt = ov_camera_module_try_fmt,
-	.s_frame_interval = ov_camera_module_s_frame_interval,
-	.g_frame_interval = ov_camera_module_g_frame_interval,
-	.s_stream = ov_camera_module_s_stream
-};
-
-static struct v4l2_subdev_ops ov2718_camera_module_ops = {
-	.core = &ov2718_camera_module_core_ops,
-	.video = &ov2718_camera_module_video_ops
-};
-
-static struct ov_camera_module ov2718;
-
-static struct ov_camera_module_custom_config ov2718_custom_config = {
-	.start_streaming = ov2718_start_streaming,
-	.stop_streaming = ov2718_stop_streaming,
-	.s_ctrl = ov2718_s_ctrl,
-	.g_ctrl = ov2718_g_ctrl,
-	.s_ext_ctrls = ov2718_s_ext_ctrls,
-	.g_timings = ov2718_g_timings,
-	.set_flip = ov2718_set_flip,
-	.check_camera_id = ov2718_check_camera_id,
-	.s_vts = OV2718_auto_adjust_fps,
-	.configs = ov2718_configs,
-	.num_configs = ARRAY_SIZE(ov2718_configs),
-	.power_up_delays_ms = {5, 30, 30},
-	/*
-	 * 0: Exposure time valid fileds;
-	 * 1: Exposure gain valid fileds;
-	 * (2 fileds == 1 frames)
-	 */
-	.exposure_valid_frame = {4, 4}
-};
-
-#ifdef OV2718_REG_TEST
-static int reg = 0x30B600;
-static struct ov_camera_module *g_cam_mod;
-
-static ssize_t	reg_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-	int ret = 0;
-
-	reg = reg >> 8;
-	ov_camera_module_read_reg(g_cam_mod, 1, reg, &ret);
-	reg = (reg << 8) | (ret & 0xff);
-	return sprintf(buf, "%06x\n", reg);
-}
-
-static ssize_t	reg_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
-{
-	int value;
-
-	if (sscanf(buf, "%x\n", &value) == 1) {
-		if ((value >> 16) == 0x00) {
-			reg = value << 8;
-			pr_info("0reg = %x\n", reg);
-		} else {
-			reg = value;
-			pr_info("1reg = %x  %x  %x\n", reg, (reg >> 8) & 0xffff, (reg & 0xff));
-			ov_camera_module_write_reg(g_cam_mod, (reg >> 8) & 0xffff, (reg & 0xff));
-		}
-		return size;
-	}
-	return -1;
-}
-
-static DEVICE_ATTR(reg, 0644, reg_show, reg_store);
-static struct device_attribute *ov2718_attributes[] = {
-	&dev_attr_reg,
-	NULL
-};
-#endif
-
-static int ov2718_probe(
-	struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	dev_info(&client->dev, "probing...\n");
-
-	ov2718_filltimings(&ov2718_custom_config);
-
-	v4l2_i2c_subdev_init(&ov2718.sd, client,
-				&ov2718_camera_module_ops);
-	ov2718.sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-
-	ov2718.custom = ov2718_custom_config;
-	mutex_init(&ov2718.lock);
-	dev_info(&client->dev, "probing successful\n");
-#ifdef OV2718_REG_TEST
-	g_cam_mod = i2c_get_clientdata(client);
-	device_create_file(&client->dev, ov2718_attributes[0]);
-#endif
-	return 0;
-}
-
-static int ov2718_remove(
-	struct i2c_client *client)
-{
-	struct ov_camera_module *cam_mod = i2c_get_clientdata(client);
-
-	dev_info(&client->dev, "removing device...\n");
-
-	if (!client->adapter)
-		return -ENODEV;
-	mutex_destroy(&cam_mod->lock);
-	ov_camera_module_release(cam_mod);
-
-	return 0;
-}
-
-static const struct i2c_device_id ov2718_id[] = {
-	{ OV2718_DRIVER_NAME, 0 },
-	{ }
-};
-
-static const struct of_device_id ov2718_of_match[] = {
-	{.compatible = "omnivision,ov2718-v4l2-i2c-subdev"},
-	{},
-};
-
-MODULE_DEVICE_TABLE(i2c, ov2718_id);
-
-static struct i2c_driver ov2718_i2c_driver = {
-	.driver = {
-		.name = OV2718_DRIVER_NAME,
-		.owner = THIS_MODULE,
-		.of_match_table = ov2718_of_match
-	},
-	.probe = ov2718_probe,
-	.remove = ov2718_remove,
-	.id_table = ov2718_id,
-};
-
-module_i2c_driver(ov2718_i2c_driver);
-
-MODULE_DESCRIPTION("SoC Camera driver for ov2718");
-MODULE_AUTHOR("Eike Grimpe");
-MODULE_LICENSE("GPL");
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov4689_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov4689_v4l2-i2c-subdev.c
index 588b46b..48d4860 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov4689_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov4689_v4l2-i2c-subdev.c
@@ -255,10 +255,10 @@ static struct ov_camera_module_reg ov4689_init_tab_2688_1520_30fps[] = {
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3809, 0x80},/* h output size [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380a, 0x05},/* v output size [11:8]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380b, 0xf0},/* v output size [7:0]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380c, 0x08},/* h total size [14:8]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x6a},/* h total size [7:0]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380e, 0x07},/* v total size [14:8]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380f, 0x48},/* v total size [7:0]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380c, 0x0a},/* h total size [14:8]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x18},/* h total size [7:0]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380e, 0x06},/* v total size [14:8]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380f, 0x12},/* v total size [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3810, 0x00},/* h win offset [11:8]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3811, 0x08},/* h win offset [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3812, 0x00},/* v win offset [11:8]*/
@@ -511,10 +511,10 @@ static struct ov_camera_module_reg ov4689_init_tab_2688_1520_60fps[] = {
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3809, 0x80},/* h output size [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380a, 0x05},/* v output size [11:8]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380b, 0xf0},/* v output size [7:0]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380c, 0x04},/* h total size [14:8]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x32},/* h total size [7:0]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380e, 0x07},/* v total size [14:8]*/
-{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380f, 0x48},/* v total size [7:0]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380c, 0x05},/* h total size [14:8]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380d, 0x12},/* h total size [7:0]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380e, 0x06},/* v total size [14:8]*/
+{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x380f, 0x12},/* v total size [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3810, 0x00},/* h win offset [11:8]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3811, 0x08},/* h win offset [7:0]*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3812, 0x00},/* v win offset [11:8]*/
@@ -612,7 +612,6 @@ static struct ov_camera_module_reg ov4689_init_tab_2688_1520_60fps[] = {
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x8008, 0x00},/* TEST CTRL9*/
 {OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3638, 0x00}
 };
-
 /* ======================================================================== */
 
 static struct ov_camera_module_config ov4689_configs[] = {
@@ -634,7 +633,7 @@ static struct ov_camera_module_config ov4689_configs[] = {
 		.auto_wb_enabled = false,
 		.reg_table = (void *)ov4689_init_tab_2688_1520_30fps,
 		.reg_table_num_entries = ARRAY_SIZE(ov4689_init_tab_2688_1520_30fps),
-		.v_blanking_time_us = 6100,
+		.v_blanking_time_us = 5000,
 		PLTFRM_CAM_ITF_MIPI_CFG(0, 2, 999, ov4689_EXT_CLK)
 	},
 	{
@@ -655,7 +654,7 @@ static struct ov_camera_module_config ov4689_configs[] = {
 		.auto_wb_enabled = false,
 		.reg_table = (void *)ov4689_init_tab_2688_1520_60fps,
 		.reg_table_num_entries = ARRAY_SIZE(ov4689_init_tab_2688_1520_60fps),
-		.v_blanking_time_us = 3000,
+		.v_blanking_time_us = 5000,
 		PLTFRM_CAM_ITF_MIPI_CFG(0, 4, 800, ov4689_EXT_CLK)
 	}
 };
@@ -709,29 +708,6 @@ static int ov4689_auto_adjust_fps(struct ov_camera_module *cam_mod,
 	if (IS_ERR_VALUE(ret)) {
 		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
 	} else {
-		ov_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int ov4689_set_vts(struct ov_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = ov_camera_module_write_reg(cam_mod, ov4689_TIMING_VTS_LOW_REG, vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod, ov4689_TIMING_VTS_HIGH_REG, (vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
 		ov_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
@@ -744,7 +720,6 @@ static int ov4689_set_vts(struct ov_camera_module *cam_mod,
 static int ov4689_write_aec(struct ov_camera_module *cam_mod)
 {
 	int ret = 0;
-	u32 vts;
 
 	ov_camera_module_pr_debug(cam_mod,
 		  "exp_time = %d, gain = %d, flash_mode = %d\n",
@@ -761,15 +736,8 @@ static int ov4689_write_aec(struct ov_camera_module *cam_mod)
 		u32 exp_time = cam_mod->exp_config.exp_time;
 		a_gain = a_gain * cam_mod->exp_config.gain_percent / 100;
 
-		mutex_lock(&cam_mod->lock);
-		vts = cam_mod->vts_cur == 0 ? cam_mod->vts_min : cam_mod->vts_cur;
-		if (!cam_mod->auto_adjust_fps &&
-			exp_time > vts - ov4689_COARSE_INTG_TIME_MAX_MARGIN) {
-			exp_time = vts - ov4689_COARSE_INTG_TIME_MAX_MARGIN;
-		}
-
 		/* hold reg en */
-		ret = ov_camera_module_write_reg(cam_mod,
+		ret |= ov_camera_module_write_reg(cam_mod,
 			ov4689_AEC_GROUP_UPDATE_ADDRESS,
 			ov4689_AEC_GROUP_UPDATE_START_DATA);
 
@@ -793,9 +761,6 @@ static int ov4689_write_aec(struct ov_camera_module *cam_mod)
 			ov4689_AEC_PK_LONG_EXPO_1ST_REG,
 			ov4689_FETCH_1ST_BYTE_EXP(exp_time));
 
-		if (!cam_mod->auto_adjust_fps)
-			ret |= ov4689_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-
 		/* hold reg end */
 		ret |= ov_camera_module_write_reg(cam_mod,
 			ov4689_AEC_GROUP_UPDATE_ADDRESS,
@@ -803,7 +768,6 @@ static int ov4689_write_aec(struct ov_camera_module *cam_mod)
 		ret |= ov_camera_module_write_reg(cam_mod,
 			ov4689_AEC_GROUP_UPDATE_ADDRESS,
 			ov4689_AEC_GROUP_UPDATE_END_LAUNCH);
-		mutex_unlock(&cam_mod->lock);
 	}
 
 	if (IS_ERR_VALUE(ret))
@@ -949,12 +913,12 @@ static int ov4689_g_timings(struct ov_camera_module *cam_mod,
 	if (cam_mod->frm_intrvl_valid)
 		timings->vt_pix_clk_freq_hz =
 			cam_mod->frm_intrvl.interval.denominator
-			* vts
+			* timings->frame_length_lines
 			* timings->line_length_pck;
 	else
 		timings->vt_pix_clk_freq_hz =
 			cam_mod->active_config->frm_intrvl.interval.denominator
-			* vts
+			* timings->frame_length_lines
 			* timings->line_length_pck;
 
 	timings->frame_length_lines = vts;
@@ -1085,10 +1049,7 @@ static int ov4689_start_streaming(struct ov_camera_module *cam_mod)
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
-	mutex_lock(&cam_mod->lock);
-	ret = ov_camera_module_write_reg(cam_mod, 0x0100, 1);
-	mutex_unlock(&cam_mod->lock);
-	if (IS_ERR_VALUE(ret))
+	if (IS_ERR_VALUE(ov_camera_module_write_reg(cam_mod, 0x0100, 1)))
 		goto err;
 
 	msleep(25);
@@ -1108,9 +1069,7 @@ static int ov4689_stop_streaming(struct ov_camera_module *cam_mod)
 
 	ov_camera_module_pr_info(cam_mod, "\n");
 
-	mutex_lock(&cam_mod->lock);
 	ret = ov_camera_module_write_reg(cam_mod, 0x0100, 0);
-	mutex_unlock(&cam_mod->lock);
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -1210,13 +1169,15 @@ static int ov4689_probe(
 	struct ov_camera_module *tmp_ov4689 = NULL;
 
 	dev_info(&client->dev, "probing[%d]...\n", num_cameras);
+
 	tmp_ov4689 = (num_cameras == 0) ? &ov4689 : &ov4689_1;
+
 	ov4689_filltimings(&ov4689_custom_config);
 	v4l2_i2c_subdev_init(&tmp_ov4689->sd, client, &ov4689_camera_module_ops);
 	tmp_ov4689->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	tmp_ov4689->custom = ov4689_custom_config;
 	num_cameras++;
-	mutex_init(&tmp_ov4689->lock);
+
 	dev_info(&client->dev, "probing successful\n");
 	return 0;
 }
@@ -1230,7 +1191,6 @@ static int ov4689_remove(struct i2c_client *client)
 	if (!client->adapter)
 		return -ENODEV;	/* our client isn't attached */
 
-	mutex_destroy(&cam_mod->lock);
 	ov_camera_module_release(cam_mod);
 
 	dev_info(&client->dev, "removed\n");
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov7251bw_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov7251bw_v4l2-i2c-subdev.c
index 4973e49..53798db 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov7251bw_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov7251bw_v4l2-i2c-subdev.c
@@ -31,16 +31,16 @@
 
 #define OV7251_DRIVER_NAME "ov7251"
 
-#define OV7251_FETCH_LSB_GAIN(VAL) ((VAL) & 0x00FF)     /* gain[7:0] */
-#define OV7251_FETCH_MSB_GAIN(VAL) (((VAL) >> 8) & 0x3) /* gain[9:8] */
-#define OV7251_AEC_PK_LONG_GAIN_HIGH_REG 0x350a	/* Bit 8 - 9 */
+#define OV7251_FETCH_LSB_GAIN(VAL) ((VAL) & 0x00FF)       /* gain[7:0] */
+#define OV7251_FETCH_MSB_GAIN(VAL) (((VAL) >> 8) & 0x1)	/* gain[10:8] */
+#define OV7251_AEC_PK_LONG_GAIN_HIGH_REG 0x350a	/* Bit 8 */
 #define OV7251_AEC_PK_LONG_GAIN_LOW_REG	 0x350b	/* Bits 0 -7 */
 
 #define OV7251_AEC_PK_LONG_EXPO_3RD_REG 0x3500	/* Exposure Bits 16-19 */
 #define OV7251_AEC_PK_LONG_EXPO_2ND_REG 0x3501	/* Exposure Bits 8-15 */
 #define OV7251_AEC_PK_LONG_EXPO_1ST_REG 0x3502	/* Exposure Bits 0-7 */
 
-#define OV7251_AEC_GROUP_UPDATE_ADDRESS 0x3208
+#define OV7251_AEC_GROUP_UPDATE_ADDRESS 0x3212
 #define OV7251_AEC_GROUP_UPDATE_START_DATA 0x00
 #define OV7251_AEC_GROUP_UPDATE_END_DATA 0x10
 #define OV7251_AEC_GROUP_UPDATE_END_LAUNCH 0xA0
@@ -71,7 +71,7 @@
 #define OV7251_FINE_INTG_TIME_MIN 0
 #define OV7251_FINE_INTG_TIME_MAX_MARGIN 0
 #define OV7251_COARSE_INTG_TIME_MIN 1
-#define OV7251_COARSE_INTG_TIME_MAX_MARGIN 20
+#define OV7251_COARSE_INTG_TIME_MAX_MARGIN 4
 #define OV7251_TIMING_X_INC		0x3814
 #define OV7251_TIMING_Y_INC		0x3815
 #define OV7251_HORIZONTAL_START_HIGH_REG 0x3800
@@ -113,7 +113,7 @@ static struct ov_camera_module_reg OV7251_init_tab_640_480_100fps[] = {
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3018, 0x00},
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301a, 0x00},
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301b, 0x00},
-	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301c, 0x20},
+	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x301c, 0x00},
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3023, 0x05},
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3037, 0xf0},/* sclk control */
 	{OV_CAMERA_MODULE_REG_TYPE_DATA, 0x3098, 0x04},/* PLL */
@@ -361,8 +361,8 @@ static int OV7251_auto_adjust_fps(struct ov_camera_module *cam_mod,
 	else
 		vts = cam_mod->vts_min;
 
-	if (vts > 0xffff)
-		vts = 0xffff;
+	if (vts > 0xfff)
+		vts = 0xfff;
 	else
 		vts = vts;  /*VTS value is 0x380e[3:0]/380f[7:0]*/
 
@@ -371,42 +371,14 @@ static int OV7251_auto_adjust_fps(struct ov_camera_module *cam_mod,
 		vts & 0xFF);
 	ret |= ov_camera_module_write_reg(cam_mod,
 		OV7251_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0xFF);
+		(vts >> 8) & 0x0F);
 
 	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		ov_camera_module_pr_debug(cam_mod, "updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-static int OV7251_set_vts(struct ov_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts > 0xffff)
-		vts = 0xffff;
-	else
-		vts = vts;  /*VTS value is 0x380e[3:0]/380f[7:0]*/
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = ov_camera_module_write_reg(cam_mod,
-		OV7251_TIMING_VTS_LOW_REG,
-		vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod,
-		OV7251_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+		ov_camera_module_pr_err(cam_mod,
+				"failed with error (%d)\n", ret);
 	} else {
-		ov_camera_module_pr_debug(cam_mod, "updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
+		ov_camera_module_pr_debug(cam_mod,
+					  "updated vts = 0x%x,vts_min=0x%x\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
 
@@ -430,17 +402,17 @@ static int OV7251_write_aec(struct ov_camera_module *cam_mod)
 	 */
 	if ((cam_mod->state == OV_CAMERA_MODULE_SW_STANDBY) ||
 		(cam_mod->state == OV_CAMERA_MODULE_STREAMING)) {
+
 		u32 a_gain = cam_mod->exp_config.gain;
 		u32 exp_time = cam_mod->exp_config.exp_time;
 		a_gain = a_gain * cam_mod->exp_config.gain_percent / 100;
 
-		mutex_lock(&cam_mod->lock);
-		ret = ov_camera_module_write_reg(cam_mod,
-			OV7251_AEC_GROUP_UPDATE_ADDRESS,
-			OV7251_AEC_GROUP_UPDATE_START_DATA);
-
+		if (cam_mod->state == OV_CAMERA_MODULE_STREAMING)
+			ret = ov_camera_module_write_reg(cam_mod,
+				OV7251_AEC_GROUP_UPDATE_ADDRESS,
+				OV7251_AEC_GROUP_UPDATE_START_DATA);
 		if (!IS_ERR_VALUE(ret) && cam_mod->auto_adjust_fps)
-			ret |= OV7251_auto_adjust_fps(cam_mod,
+			ret = OV7251_auto_adjust_fps(cam_mod,
 					cam_mod->exp_config.exp_time);
 		ret |= ov_camera_module_write_reg(cam_mod,
 			OV7251_AEC_PK_LONG_GAIN_HIGH_REG,
@@ -448,7 +420,7 @@ static int OV7251_write_aec(struct ov_camera_module *cam_mod)
 		ret |= ov_camera_module_write_reg(cam_mod,
 			OV7251_AEC_PK_LONG_GAIN_LOW_REG,
 			OV7251_FETCH_LSB_GAIN(a_gain));
-		ret |= ov_camera_module_write_reg(cam_mod,
+		ret = ov_camera_module_write_reg(cam_mod,
 			OV7251_AEC_PK_LONG_EXPO_3RD_REG,
 			OV7251_FETCH_3RD_BYTE_EXP(exp_time));
 		ret |= ov_camera_module_write_reg(cam_mod,
@@ -457,17 +429,14 @@ static int OV7251_write_aec(struct ov_camera_module *cam_mod)
 		ret |= ov_camera_module_write_reg(cam_mod,
 			OV7251_AEC_PK_LONG_EXPO_1ST_REG,
 			OV7251_FETCH_1ST_BYTE_EXP(exp_time));
-
-		if (!cam_mod->auto_adjust_fps)
-			ret |= OV7251_set_vts(cam_mod, cam_mod->exp_config.vts_value);
-
-		ret |= ov_camera_module_write_reg(cam_mod,
-			OV7251_AEC_GROUP_UPDATE_ADDRESS,
-			OV7251_AEC_GROUP_UPDATE_END_DATA);
-		ret |= ov_camera_module_write_reg(cam_mod,
-			OV7251_AEC_GROUP_UPDATE_ADDRESS,
-			OV7251_AEC_GROUP_UPDATE_END_LAUNCH);
-		mutex_unlock(&cam_mod->lock);
+		if (cam_mod->state == OV_CAMERA_MODULE_STREAMING) {
+			ret = ov_camera_module_write_reg(cam_mod,
+				OV7251_AEC_GROUP_UPDATE_ADDRESS,
+				OV7251_AEC_GROUP_UPDATE_END_DATA);
+			ret = ov_camera_module_write_reg(cam_mod,
+				OV7251_AEC_GROUP_UPDATE_ADDRESS,
+				OV7251_AEC_GROUP_UPDATE_END_LAUNCH);
+		}
 	}
 
 	if (IS_ERR_VALUE(ret))
@@ -592,13 +561,13 @@ static int OV7251_filltimings(struct ov_camera_module_custom_config *custom)
 					(timings->crop_vertical_end & 0xff00));
 				break;
 			case OV7251_H_WIN_OFF_HIGH_REG:
-				win_h_off = (reg_table[j].val & 0xff) << 8;
+				win_h_off = (reg_table[j].val & 0xf) << 8;
 				break;
 			case OV7251_H_WIN_OFF_LOW_REG:
 				win_h_off |= (reg_table[j].val & 0xff);
 				break;
 			case OV7251_V_WIN_OFF_HIGH_REG:
-				win_v_off = (reg_table[j].val & 0xff) << 8;
+				win_v_off = (reg_table[j].val & 0xf) << 8;
 				break;
 			case OV7251_V_WIN_OFF_LOW_REG:
 				win_v_off |= (reg_table[j].val & 0xff);
@@ -668,7 +637,6 @@ static int OV7251_g_timings(struct ov_camera_module *cam_mod,
 	vts = (!cam_mod->vts_cur) ?
 		timings->frame_length_lines :
 		cam_mod->vts_cur;
-
 	if (cam_mod->frm_intrvl_valid)
 		timings->vt_pix_clk_freq_hz =
 			cam_mod->frm_intrvl.interval.denominator
@@ -680,8 +648,6 @@ static int OV7251_g_timings(struct ov_camera_module *cam_mod,
 			* vts
 			* timings->line_length_pck;
 
-	timings->frame_length_lines = vts;
-
 	return ret;
 err:
 	ov_camera_module_pr_err(cam_mod,
@@ -750,12 +716,10 @@ static int OV7251_start_streaming(struct ov_camera_module *cam_mod)
 	ret = OV7251_g_VTS(cam_mod, &cam_mod->vts_min);
 	if (IS_ERR_VALUE(ret))
 		goto err;
-
-	mutex_lock(&cam_mod->lock);
 	ret = ov_camera_module_write_reg(cam_mod, 0x0100, 0x01);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4241, 0x00);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4242, 0x00);
-	mutex_unlock(&cam_mod->lock);
+
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -773,11 +737,10 @@ static int OV7251_stop_streaming(struct ov_camera_module *cam_mod)
 	int ret = 0;
 
 	ov_camera_module_pr_debug(cam_mod, "\n");
-	mutex_lock(&cam_mod->lock);
 	ret = ov_camera_module_write_reg(cam_mod, 0x0100, 0x00);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4241, 0x00);
 	ret |= ov_camera_module_write_reg(cam_mod, 0x4242, 0x0f);
-	mutex_unlock(&cam_mod->lock);
+
 	if (IS_ERR_VALUE(ret))
 		goto err;
 
@@ -909,7 +872,6 @@ static int OV7251_probe(
 
 	OV7251.custom = OV7251_custom_config;
 
-	mutex_init(&OV7251.lock);
 	dev_info(&client->dev, "probing successful\n");
 	return 0;
 }
@@ -926,7 +888,6 @@ static int OV7251_remove(
 	if (!client->adapter)
 		return -ENODEV;	/* our client isn't attached */
 
-	mutex_destroy(&cam_mod->lock);
 	ov_camera_module_release(cam_mod);
 
 	dev_info(&client->dev, "removed\n");
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
index 0994709..ade884f 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
@@ -2100,36 +2100,11 @@ static int ov8858_auto_adjust_fps(struct ov_camera_module *cam_mod,
 		(vts >> 8) & 0xFF);
 
 	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
-	} else {
-		ov_camera_module_pr_info(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
-		cam_mod->vts_cur = vts;
-	}
-
-	return ret;
-}
-
-/*--------------------------------------------------------------------------*/
-
-static int ov8858_set_vts(struct ov_camera_module *cam_mod,
-	u32 vts)
-{
-	int ret = 0;
-
-	if (vts < cam_mod->vts_min)
-		return ret;
-
-	ret = ov_camera_module_write_reg(cam_mod,
-		ov8858_TIMING_VTS_LOW_REG,
-		vts & 0xFF);
-	ret |= ov_camera_module_write_reg(cam_mod,
-		ov8858_TIMING_VTS_HIGH_REG,
-		(vts >> 8) & 0xFF);
-
-	if (IS_ERR_VALUE(ret)) {
-		ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+		ov_camera_module_pr_err(cam_mod,
+			"failed with error (%d)\n", ret);
 	} else {
-		ov_camera_module_pr_debug(cam_mod, "updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
+		ov_camera_module_pr_debug(cam_mod,
+			"updated vts = %d,vts_min=%d\n", vts, cam_mod->vts_min);
 		cam_mod->vts_cur = vts;
 	}
 
@@ -2180,8 +2155,6 @@ static int ov8858_write_aec(struct ov_camera_module *cam_mod)
 		ret |= ov_camera_module_write_reg(cam_mod,
 			ov8858_AEC_PK_LONG_EXPO_1ST_REG,
 			ov8858_FETCH_1ST_BYTE_EXP(exp_time));
-		if (!cam_mod->auto_adjust_fps)
-			ret |= ov8858_set_vts(cam_mod, cam_mod->exp_config.vts_value);
 		if (cam_mod->state == OV_CAMERA_MODULE_STREAMING) {
 			ret = ov_camera_module_write_reg(cam_mod,
 				ov8858_AEC_GROUP_UPDATE_ADDRESS,
@@ -2404,8 +2377,6 @@ static int ov8858_g_timings(struct ov_camera_module *cam_mod,
 			*vts
 			* timings->line_length_pck;
 
-	timings->frame_length_lines = vts;
-
 	return ret;
 err:
 	ov_camera_module_pr_err(cam_mod,
@@ -3041,6 +3012,10 @@ err:
 	return ret;
 }
 
+static int ov8858_g_exposure_valid_frame(struct ov_camera_module *cam_mod)
+{
+	return ov8858_EXP_VALID_FRAMES;
+}
 /* ======================================================================== */
 /* This part is platform dependent */
 /* ======================================================================== */
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
index 6e79870..31ce823 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
@@ -683,16 +683,6 @@ int ov_camera_module_g_ctrl(struct v4l2_subdev *sd,
 		return 0;
 	}
 
-	if (ctrl->id == V4L2_CID_BAND_STOP_FILTER) {
-		struct v4l2_subdev *ircut_ctrl;
-
-		ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl(sd);
-		if (!IS_ERR_OR_NULL(ircut_ctrl)) {
-			ret = v4l2_subdev_call(ircut_ctrl, core, g_ctrl, ctrl);
-			return ret;
-		}
-	}
-
 	if ((cam_mod->state != OV_CAMERA_MODULE_SW_STANDBY) &&
 		(cam_mod->state != OV_CAMERA_MODULE_STREAMING)) {
 		pltfrm_camera_module_pr_err(&cam_mod->sd,
@@ -710,6 +700,16 @@ int ov_camera_module_g_ctrl(struct v4l2_subdev *sd,
 		}
 	}
 
+	if (ctrl->id == V4L2_CID_BAND_STOP_FILTER) {
+		struct v4l2_subdev *ircut_ctrl;
+
+		ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl(sd);
+		if (!IS_ERR_OR_NULL(ircut_ctrl)) {
+			ret = v4l2_subdev_call(ircut_ctrl, core, g_ctrl, ctrl);
+			return ret;
+		}
+	}
+
 	if (!IS_ERR_OR_NULL(cam_mod->custom.g_ctrl)) {
 		ret = cam_mod->custom.g_ctrl(cam_mod, ctrl->id);
 		if (IS_ERR_VALUE(ret))
@@ -819,10 +819,6 @@ int ov_camera_module_s_ext_ctrls(
 			ctrl_updt = OV_CAMERA_MODULE_CTRL_UPDT_GAIN;
 			cam_mod->exp_config.gain_percent = ctrl->value;
 			break;
-		case RK_V4L2_CID_VTS:
-			ctrl_updt = OV_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE;
-			cam_mod->exp_config.vts_value = ctrl->value;
-			break;
 		case V4L2_CID_FLASH_LED_MODE:
 			ret = flash_light_ctrl(sd, cam_mod, ctrl->value);
 			if (ret == 0) {
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.h b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.h
index 41d30d5..1e8afe6 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.h
+++ b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.h
@@ -39,7 +39,7 @@
 #define OV_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP			0x20
 #define OV_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE	0x40
 #define OV_CAMERA_MODULE_CTRL_UPDT_PRESET_WB		0x80
-#define OV_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE		0x100
+
 
 enum ov_camera_module_state {
 	OV_CAMERA_MODULE_POWER_OFF = 0,
@@ -98,7 +98,6 @@ struct ov_camera_module_exp_config {
 	u16 gain_percent;
 	bool auto_gain;
 	enum v4l2_flash_led_mode flash_mode;
-	u32 vts_value;
 };
 
 struct ov_camera_module_wb_config {
@@ -201,7 +200,6 @@ struct ov_camera_module {
 	u32 rotation;
 	void *pltfm_data;
 	bool inited;
-	struct mutex lock;
 };
 
 #define ov_camera_module_pr_info(cam_mod, fmt, arg...) \
diff --git a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
index a1a2f27..e30e951 100644
--- a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
@@ -1012,6 +1012,8 @@ err:
 	return ret;
 }
 
+
+
 /* ======================================================================== */
 
 const char *pltfrm_dev_string(
@@ -1076,61 +1078,6 @@ int pltfrm_camera_module_read_reg(
 	return ret;
 }
 
-int pltfrm_camera_module_read_reg_ex(
-	struct v4l2_subdev *sd,
-	u16 data_length,
-	u32 flag,
-	u16 reg,
-	u32 *val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	int ret = 0;
-	struct i2c_msg msg[1];
-	unsigned char data[4] = { 0, 0, 0, 0 };
-
-	if (!client->adapter) {
-		pltfrm_camera_module_pr_err(sd, "client->adapter NULL\n");
-		return -ENODEV;
-	}
-
-	msg->addr = client->addr;
-	msg->flags = I2C_M_WR;
-	msg->buf = data;
-
-	if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1) {
-		data[0] = (u8)(reg & 0xff);
-		msg->len = 1;
-	} else {
-		/* High byte goes out first */
-		data[0] = (u8)(reg >> 8);
-		data[1] = (u8)(reg & 0xff);
-		msg->len = 2;
-	}
-
-	ret = i2c_transfer(client->adapter, msg, 1);
-	if (ret >= 0) {
-		mdelay(3);
-		msg->flags = I2C_M_RD;
-		msg->len = data_length;
-		i2c_transfer(client->adapter, msg, 1);
-	}
-	if (ret >= 0) {
-		*val = 0;
-		/* High byte comes first */
-		if (data_length == 1)
-			*val = data[0];
-		else if (data_length == 2)
-			*val = data[1] + (data[0] << 8);
-		else
-			*val = data[3] + (data[2] << 8) +
-			    (data[1] << 16) + (data[0] << 24);
-		return 0;
-	}
-	pltfrm_camera_module_pr_err(sd,
-		"i2c read from offset 0x%08x failed with error %d\n", reg, ret);
-	return ret;
-}
-
 /* ======================================================================== */
 
 int pltfrm_camera_module_write_reg(
@@ -1176,75 +1123,9 @@ int pltfrm_camera_module_write_reg(
 	return ret;
 }
 
-int pltfrm_camera_module_write_reg_ex(
-	struct v4l2_subdev *sd,
-	u32 flag, u16 reg, u16 val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	int ret = 0;
-	struct i2c_msg msg[1];
-	unsigned char data[4];
-	int retries;
-
-	if (!client->adapter) {
-		pltfrm_camera_module_pr_err(sd, "client->adapter NULL\n");
-		return -ENODEV;
-	}
-
-	for (retries = 0; retries < 5; retries++) {
-		msg->addr = client->addr;
-		msg->flags = I2C_M_WR;
-		msg->buf = data;
-
-		if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1 &&
-			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 1) {
-			data[0] = (u8)(reg & 0xff);
-			data[1] = val;
-			msg->len = 2;
-		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 2 &&
-			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 1) {
-			data[0] = (u8)(reg >> 8);
-			data[1] = (u8)(reg & 0xff);
-			data[2] = val;
-			msg->len = 3;
-		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1 &&
-			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 2) {
-			data[0] = (u8)(reg & 0xff);
-			data[1] = (u8)(val >> 8);
-			data[2] = (u8)(val & 0xff);
-			msg->len = 3;
-		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 2 &&
-			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 2) {
-			data[0] = (u8)(reg >> 8);
-			data[1] = (u8)(reg & 0xff);
-			data[2] = (u8)(val >> 8);
-			data[3] = (u8)(val & 0xff);
-			msg->len = 4;
-		} else {
-			pltfrm_camera_module_pr_err(sd,
-				"i2c write flag 0x%x error\n", flag);
-			return -EINVAL;
-		}
-
-		ret = i2c_transfer(client->adapter, msg, 1);
-		if (ret == 1) {
-			pltfrm_camera_module_pr_debug(sd,
-				"i2c write to offset 0x%08x success\n", reg);
-			return 0;
-		}
-
-		pltfrm_camera_module_pr_debug(sd,
-			"retrying I2C... %d\n", retries);
-		set_current_state(TASK_UNINTERRUPTIBLE);
-		schedule_timeout(msecs_to_jiffies(20));
-	}
-	pltfrm_camera_module_pr_err(sd,
-		"i2c write to offset 0x%08x failed with error %d\n", reg, ret);
-	return ret;
-}
-
 /* ======================================================================== */
 
+
 int pltfrm_camera_module_write_reglist(
 	struct v4l2_subdev *sd,
 	const struct pltfrm_camera_module_reg reglist[],
@@ -1270,42 +1151,17 @@ int pltfrm_camera_module_write_reglist(
 	}
 
 	for (i = 0; i < max_entries; i++) {
-		switch (reglist[i].flag & PLTFRM_CAMERA_MODULE_WR_CONTINUE_MASK) {
-		case PLTFRM_CAMERA_MODULE_WR_CONTINUE:
+		switch (reglist[i].flag) {
+		case PLTFRM_CAMERA_MODULE_REG_TYPE_DATA:
 			(msg + j)->addr = client->addr;
 			(msg + j)->flags = I2C_M_WR;
+			(msg + j)->len = 3;
 			(msg + j)->buf = (data + k);
 
-			if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
-				data[k + 0] = (u8)(reglist[i].reg & 0xFF);
-				data[k + 1] = (u8)(reglist[i].val & 0xFF);
-				k = k + 2;
-				(msg + j)->len = 2;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
-				data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
-				data[k + 1] = (u8)(reglist[i].reg & 0xFF);
-				data[k + 2] = (u8)(reglist[i].val & 0xFF);
-				k = k + 3;
-				(msg + j)->len = 3;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
-				data[k + 0] = (u8)(reglist[i].reg & 0xFF);
-				data[k + 1] = (u8)((reglist[i].val & 0xFF00) >> 8);
-				data[k + 2] = (u8)(reglist[i].val & 0xFF);
-				k = k + 3;
-				(msg + j)->len = 3;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
-				data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
-				data[k + 1] = (u8)(reglist[i].reg & 0xFF);
-				data[k + 2] = (u8)((reglist[i].val & 0xFF00) >> 8);
-				data[k + 3] = (u8)(reglist[i].val & 0xFF);
-				k = k + 4;
-				(msg + j)->len = 4;
-			}
-
+			data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+			data[k + 1] = (u8)(reglist[i].reg & 0xFF);
+			data[k + 2] = (u8)(reglist[i].val & 0xFF);
+			k = k + 3;
 			j++;
 			if (j == (I2C_MSG_MAX - 1)) {
 				/* Bulk I2C transfer */
@@ -1327,36 +1183,15 @@ int pltfrm_camera_module_write_reglist(
 					"i2c_transfer return %d\n", ret);
 			}
 			break;
-		case PLTFRM_CAMERA_MODULE_WR_SINGLE:
+		case PLTFRM_CAMERA_MODULE_REG_TYPE_DATA_SINGLE:
 			msg->addr = client->addr;
 			msg->flags = I2C_M_WR;
+			msg->len = 3;
 			msg->buf = data;
 
-			if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
-				data[0] = (u8)(reglist[i].reg & 0xFF);
-				data[1] = (u8)(reglist[i].val & 0xFF);
-				msg->len = 2;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
-				data[0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
-				data[1] = (u8)(reglist[i].reg & 0xFF);
-				data[2] = (u8)(reglist[i].val & 0xFF);
-				msg->len = 3;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
-				data[0] = (u8)(reglist[i].reg & 0xFF);
-				data[1] = (u8)((reglist[i].val & 0xFF00) >> 8);
-				data[2] = (u8)(reglist[i].val & 0xFF);
-				msg->len = 3;
-			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
-				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
-				data[0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
-				data[1] = (u8)(reglist[i].reg & 0xFF);
-				data[2] = (u8)((reglist[i].val & 0xFF00) >> 8);
-				data[3] = (u8)(reglist[i].val & 0xFF);
-				msg->len = 4;
-			}
+			data[0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+			data[1] = (u8)(reglist[i].reg & 0xFF);
+			data[2] = (u8)(reglist[i].val & 0xFF);
 
 			pltfrm_camera_module_pr_debug(sd,
 				"messages transfers 1 0x%p msg\n", msg);
@@ -1398,6 +1233,7 @@ int pltfrm_camera_module_write_reglist(
 			kfree(data);
 			return -1;
 		}
+
 	}
 
 	if (j != 0) {		/*Remaining I2C message*/
diff --git a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module_version.h b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module_version.h
index 33f9725..141f249 100644
--- a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module_version.h
+++ b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module_version.h
@@ -25,12 +25,8 @@
  * 2. Update sensor configuration after power up sensor in ov_camera_module_s_power.
  * Because mipi datalane may be no still on LP11 state when sensor configuration;
  *
- * v0.1.1:
- * 1. Fix some errors in ov7251bw_v4l2-i2c-subdev.c according to
- * ov7251 sensor datasheet;
- *
  */
 
-#define CONFIG_RK_CAMERA_MODULE_VERSION KERNEL_VERSION(0, 1, 1)
+#define CONFIG_RK_CAMERA_MODULE_VERSION KERNEL_VERSION(0, 1, 0)
 
 #endif
diff --git a/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.c
index e15b904..6b2f137 100644
--- a/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.c
@@ -705,16 +705,6 @@ int xc9080_camera_module_g_ctrl(struct v4l2_subdev *sd,
 		return 0;
 	}
 
-	if (ctrl->id == V4L2_CID_BAND_STOP_FILTER) {
-		struct v4l2_subdev *ircut_ctrl;
-
-		ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl(sd);
-		if (!IS_ERR_OR_NULL(ircut_ctrl)) {
-			ret = v4l2_subdev_call(ircut_ctrl, core, g_ctrl, ctrl);
-			return ret;
-		}
-	}
-
 	if ((cam_mod->state != XC9080_CAMERA_MODULE_SW_STANDBY) &&
 		(cam_mod->state != XC9080_CAMERA_MODULE_STREAMING)) {
 		pltfrm_camera_module_pr_err(&cam_mod->sd,
@@ -732,6 +722,16 @@ int xc9080_camera_module_g_ctrl(struct v4l2_subdev *sd,
 		}
 	}
 
+	if (ctrl->id == V4L2_CID_BAND_STOP_FILTER) {
+		struct v4l2_subdev *ircut_ctrl;
+
+		ircut_ctrl = pltfrm_camera_module_get_ircut_ctrl(sd);
+		if (!IS_ERR_OR_NULL(ircut_ctrl)) {
+			ret = v4l2_subdev_call(ircut_ctrl, core, g_ctrl, ctrl);
+			return ret;
+		}
+	}
+
 	if (!IS_ERR_OR_NULL(cam_mod->custom.g_ctrl)) {
 		ret = cam_mod->custom.g_ctrl(cam_mod, ctrl->id);
 		if (IS_ERR_VALUE(ret))
@@ -840,10 +840,6 @@ int xc9080_camera_module_s_ext_ctrls(
 			ctrl_updt = XC9080_CAMERA_MODULE_CTRL_UPDT_GAIN;
 			cam_mod->exp_config.gain_percent = ctrl->value;
 			break;
-		case RK_V4L2_CID_VTS:
-			ctrl_updt = XC9080_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE;
-			cam_mod->exp_config.vts_value = ctrl->value;
-			break;
 		case V4L2_CID_FLASH_LED_MODE:
 			ret = flash_light_ctrl(sd, cam_mod, ctrl->value);
 			if (ret == 0) {
diff --git a/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.h b/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.h
index f4f5647..07840b5 100644
--- a/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.h
+++ b/drivers/media/i2c/soc_camera/rockchip/xc9080_camera_module.h
@@ -39,8 +39,6 @@
 #define XC9080_CAMERA_MODULE_CTRL_UPDT_AUTO_EXP		0x20
 #define XC9080_CAMERA_MODULE_CTRL_UPDT_FOCUS_ABSOLUTE	0x40
 #define XC9080_CAMERA_MODULE_CTRL_UPDT_PRESET_WB	0x80
-#define XC9080_CAMERA_MODULE_CTRL_UPDT_VTS_VALUE	0x100
-
 
 enum xc9080_sub_i2c_bypass_mode {
 	XC9080_SUB_I2C_BYPASS_OFF = 0,
@@ -110,7 +108,6 @@ struct xc9080_camera_module_exp_config {
 	u16 gain_percent;
 	bool auto_gain;
 	enum v4l2_flash_led_mode flash_mode;
-	u32 vts_value;
 };
 
 struct xc9080_camera_module_wb_config {
diff --git a/drivers/media/platform/preisp_driver/cif-preisp.c b/drivers/media/platform/preisp_driver/cif-preisp.c
index cb44645..240296e 100644
--- a/drivers/media/platform/preisp_driver/cif-preisp.c
+++ b/drivers/media/platform/preisp_driver/cif-preisp.c
@@ -131,15 +131,15 @@ int doInitSensor(struct spi_rk_preisp_data *pdata, int camId)
 	msg_init_sensor_ret_t ret;
 	int err = 0;
 
-	cif_preisp_pltfrm_pr_info(NULL, "%s: enter!\n", __FUNCTION__);	
+	cif_preisp_pltfrm_pr_info(NULL, "%s: enter!\n", __FUNCTION__);
 	msg.size = sizeof(msg_init_sensor_t) / 4;
-    	msg.type = id_msg_init_sensor_t;
-    	msg.camera_id = camId;
+	msg.type = id_msg_init_sensor_t;
+	msg.camera_id = camId;
 	msg.sync = 1;
 	msg.in_mipi_phy = 0 == camId ? 0:2;
-        msg.out_mipi_phy = 0;
-        msg.mipi_lane = 2;
-        msg.bayer = 1;
+	msg.out_mipi_phy = 0;
+	msg.mipi_lane = 2;
+	msg.bayer = 1;
 	strcpy(msg.sensor_name, "OV4689");
 	ret.size = sizeof(msg_init_sensor_ret_t) / 4;
 	ret.type = id_msg_init_sensor_ret_t;
@@ -216,10 +216,10 @@ int doSetOutputSize(struct spi_rk_preisp_data *pdata, int camId)
 	ret.camera_id = -1;
 	err = sendMsgAndWait(camId, pdata, (struct msg*)&msg, &ret, 1000);
 	err = !err ? err : ret.err;
-        if (err) {
+	if (err) {
 		cif_preisp_pltfrm_pr_err(NULL, "%s: sendMsgAndWait failed!\n", __FUNCTION__);
 		err = -EFAULT;
-        }
+	}
 
 	return err;
 }
diff --git a/drivers/media/platform/preisp_driver/cif-preisp.h b/drivers/media/platform/preisp_driver/cif-preisp.h
index 1555c8e..3eaf147 100644
--- a/drivers/media/platform/preisp_driver/cif-preisp.h
+++ b/drivers/media/platform/preisp_driver/cif-preisp.h
@@ -232,7 +232,6 @@ typedef struct {
 	int8_t mipi_lane;
 	int8_t bayer;
 	uint8_t sensor_name[32];
-	uint8_t i2c_slave_addr;
 } msg_init_sensor_t;
 
 typedef struct {
diff --git a/drivers/media/platform/rk-cif/cif_cif10_pltfrm.h b/drivers/media/platform/rk-cif/cif_cif10_pltfrm.h
index 689bd03..7d1a207c 100644
--- a/drivers/media/platform/rk-cif/cif_cif10_pltfrm.h
+++ b/drivers/media/platform/rk-cif/cif_cif10_pltfrm.h
@@ -21,7 +21,6 @@
 #include <linux/device.h>
 #include <linux/delay.h>
 #include <linux/wait.h>
-#include <linux/slab.h>
 #include <linux/string.h>
 #include <linux/platform_data/rk_cif10_platform.h>
 
diff --git a/drivers/media/platform/rk-isp11/cif_isp11.c b/drivers/media/platform/rk-isp11/cif_isp11.c
index 0699fd3..cfaa897 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11.c
+++ b/drivers/media/platform/rk-isp11/cif_isp11.c
@@ -1650,8 +1650,7 @@ static int cif_isp11_config_isp(
 	output = &dev->config.isp_config.output;
 	cam_itf = &dev->config.cam_itf;
 
-	if (CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt) ||
-		(in_pix_fmt == CIF_Y10)) {
+	if (CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt)) {
 		if (!dev->config.mi_config.raw_enable) {
 			output->pix_fmt = CIF_YUV422I;
 
@@ -1672,9 +1671,6 @@ static int cif_isp11_config_isp(
 			if (dev->sp_stream.state == CIF_ISP11_STATE_READY) {
 				output->quantization =
 					dev->config.mi_config.sp.output.quantization;
-
-				if (in_pix_fmt == CIF_Y10)
-					output->pix_fmt = CIF_YUV400;
 			}
 
 			if (dev->mp_stream.state == CIF_ISP11_STATE_READY) {
@@ -1686,13 +1682,8 @@ static int cif_isp11_config_isp(
 					dev->config.mi_config.y12.output.quantization;
 			}
 
-			if (in_pix_fmt == CIF_Y10) {
-				cif_iowrite32(0x40c,
-					dev->config.base_addr + CIF_ISP_DEMOSAIC);
-			} else {
-				cif_iowrite32(0xc,
-					dev->config.base_addr + CIF_ISP_DEMOSAIC);
-			}
+			cif_iowrite32(0xc,
+				dev->config.base_addr + CIF_ISP_DEMOSAIC);
 
 			if (PLTFRM_CAM_ITF_IS_BT656(dev->config.cam_itf.type)) {
 				cif_iowrite32(CIF_ISP_CTRL_ISP_MODE_BAYER_ITU656,
@@ -1733,34 +1724,31 @@ static int cif_isp11_config_isp(
 		}
 
 		bpp = CIF_ISP11_PIX_FMT_GET_BPP(in_pix_fmt);
-		if (bpp == 8) {
+		if (bpp == 8)
 			isp_input_sel = CIF_ISP_ACQ_PROP_IN_SEL_8B_MSB;
-		} else if (bpp == 10) {
+		else if (bpp == 10)
 			isp_input_sel = CIF_ISP_ACQ_PROP_IN_SEL_10B_MSB;
-		} else if (bpp == 12) {
+		else if (bpp == 12)
 			isp_input_sel = CIF_ISP_ACQ_PROP_IN_SEL_12B;
-		} else {
+		else {
 			cif_isp11_pltfrm_pr_err(dev->dev,
 				"%d bits per pixel not supported\n", bpp);
 			ret = -EINVAL;
 			goto err;
 		}
-
-		if (CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt)) {
-			if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_BGGR(in_pix_fmt)) {
-				isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_BGGR;
-			} else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_GBRG(in_pix_fmt)) {
-				isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_GBRG;
-			} else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_GRBG(in_pix_fmt)) {
-				isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_GRBG;
-			} else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_RGGB(in_pix_fmt)) {
-				isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_RGGB;
-			} else {
-				cif_isp11_pltfrm_pr_err(dev->dev,
-					"BAYER pattern not supported\n");
-				ret = -EINVAL;
-				goto err;
-			}
+		if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_BGGR(in_pix_fmt))
+			isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_BGGR;
+		else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_GBRG(in_pix_fmt))
+			isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_GBRG;
+		else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_GRBG(in_pix_fmt))
+			isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_GRBG;
+		else if (CIF_ISP11_PIX_FMT_BAYER_PAT_IS_RGGB(in_pix_fmt))
+			isp_bayer_pat = CIF_ISP_ACQ_PROP_BAYER_PAT_RGGB;
+		else {
+			cif_isp11_pltfrm_pr_err(dev->dev,
+				"BAYER pattern not supported\n");
+			ret = -EINVAL;
+			goto err;
 		}
 	} else if (CIF_ISP11_PIX_FMT_IS_YUV(in_pix_fmt)) {
 		output->pix_fmt = in_pix_fmt;
@@ -1918,11 +1906,7 @@ static int cif_isp11_config_isp(
 		CIF_ISP_FRAME |
 		CIF_ISP_PIC_SIZE_ERROR |
 		CIF_ISP_FRAME_IN |
-		CIF_ISP_V_START |
-		CIF_ISP_AWB_DONE |
-		CIF_ISP_AFM_FIN |
-		CIF_ISP_EXP_END |
-		CIF_ISP_HIST_MEASURE_RDY;
+		CIF_ISP_V_START;
 	cif_iowrite32(irq_mask,
 		dev->config.base_addr + CIF_ISP_IMSC);
 
@@ -2039,8 +2023,6 @@ static int cif_isp11_config_mipi(
 			(CIF_ISP11_PIX_FMT_YUV_GET_Y_SUBS(in_pix_fmt) == 4) &&
 			(CIF_ISP11_PIX_FMT_GET_BPP(in_pix_fmt) == 20))
 			data_type = CSI2_DT_YUV422_10b;
-		else if (in_pix_fmt == CIF_Y10)
-			data_type = CSI2_DT_RAW10;
 		else {
 			cif_isp11_pltfrm_pr_err(dev->dev,
 				"unsupported format %s\n",
@@ -2415,10 +2397,6 @@ static int cif_isp11_config_mi_sp(
 			CIF_ISP11_PIX_FMT_YUV_GET_NUM_CPLANES(out_pix_fmt);
 		if (num_cplanes == 0) {
 			writeformat = CIF_ISP11_BUFF_FMT_INTERLEAVED;
-
-			if (out_pix_fmt == CIF_YUV400)
-				writeformat = CIF_ISP11_BUFF_FMT_PLANAR;
-
 		} else {
 			dev->config.mi_config.sp.y_size =
 				(dev->config.mi_config.sp.y_size * 4)
@@ -3652,7 +3630,6 @@ static void cif_isp11_init_stream(
 	stream->updt_cfg = false;
 	stream->stop = false;
 	stream->stall = false;
-	spin_lock_init(&stream->metadata.spinlock);
 
 	cif_isp11_pltfrm_event_clear(dev->dev, &stream->done);
 	stream->state = CIF_ISP11_STATE_INACTIVE;
@@ -4059,18 +4036,6 @@ static int cif_isp11_s_fmt_mp(
 		strm_fmt->frm_fmt.quantization);
 
 	/* TBD: check whether format is a valid format for MP */
-	if (strm_fmt->frm_fmt.pix_fmt == CIF_YUV400) {
-		cif_isp11_pltfrm_pr_err(dev->dev,
-			"format %s %dx%d@%d/%dfps, stride = %d not supported on MP\n",
-			cif_isp11_pix_fmt_string(strm_fmt->frm_fmt.pix_fmt),
-			strm_fmt->frm_fmt.width,
-			strm_fmt->frm_fmt.height,
-			strm_fmt->frm_intrvl.numerator,
-			strm_fmt->frm_intrvl.denominator,
-			stride);
-		ret = -EINVAL;
-		goto err;
-	}
 
 	if (CIF_ISP11_PIX_FMT_IS_JPEG(strm_fmt->frm_fmt.pix_fmt))
 		dev->config.jpeg_config.enable = true;
@@ -4457,25 +4422,15 @@ static int cif_isp11_mi_frame_end(
 				stream->curr_buf->state = VIDEOBUF_DONE;
 			wake_now = false;
 
-			spin_lock(&stream->metadata.spinlock);
 			if (stream->metadata.d && dev->isp_dev.streamon) {
 				struct v4l2_buffer_metadata_s *metadata;
-				unsigned int meta_read_id;
 
 				metadata = (struct v4l2_buffer_metadata_s *)
 					(stream->metadata.d +
 					stream->curr_buf->i*CAMERA_METADATA_LEN);
-
-				meta_read_id = dev->isp_dev.meta_info.read_id;
-				metadata->frame_id = dev->isp_dev.meta_info.frame_id[meta_read_id];
-				metadata->frame_t.vs_t = dev->isp_dev.meta_info.vs_t[meta_read_id];
-				metadata->frame_t.fi_t = dev->isp_dev.meta_info.fi_t[meta_read_id];
-				dev->isp_dev.meta_info.read_cnt++;
-				if (dev->isp_dev.meta_info.read_cnt >= dev->isp_dev.meta_info.read_max) {
-					dev->isp_dev.meta_info.read_cnt = 0;
-					dev->isp_dev.meta_info.read_id = (meta_read_id + 1) % CIF_ISP11_META_INFO_NUM;
-				}
-				spin_unlock(&stream->metadata.spinlock);
+				metadata->frame_id = dev->isp_dev.frame_id;
+				metadata->frame_t.vs_t = dev->isp_dev.vs_t;
+				metadata->frame_t.fi_t = dev->isp_dev.fi_t;
 
 				work = (struct cif_isp11_isp_readout_work *)
 					kmalloc(
@@ -4489,7 +4444,7 @@ static int cif_isp11_mi_frame_end(
 					work->isp_dev =
 						&dev->isp_dev;
 					work->frame_id =
-						metadata->frame_id;
+						dev->isp_dev.frame_id;
 					if (stream->next_buf != NULL)
 						work->vb = stream->curr_buf;
 					else
@@ -4510,7 +4465,6 @@ static int cif_isp11_mi_frame_end(
 					wake_now = true;
 				}
 			} else {
-				spin_unlock(&stream->metadata.spinlock);
 				wake_now = true;
 			}
 
@@ -4580,11 +4534,9 @@ static void cif_isp11_stream_metadata_reset(
 )
 {
 	unsigned int i;
-	unsigned long flags = 0;
 	struct v4l2_buffer_metadata_s *metadata;
 	struct cifisp_isp_metadata *isp_metadata;
 
-	spin_lock_irqsave(&stream_dev->metadata.spinlock, flags);
 	if (stream_dev->metadata.d) {
 		for (i = 0; i < stream_dev->metadata.cnt; i++) {
 			metadata = (struct v4l2_buffer_metadata_s *)
@@ -4596,7 +4548,6 @@ static void cif_isp11_stream_metadata_reset(
 			isp_metadata->meas_cfg.s_frame_id = 0xffffffff;
 		}
 	}
-	spin_unlock_irqrestore(&stream_dev->metadata.spinlock, flags);
 
 	return;
 }
@@ -4981,8 +4932,6 @@ static int cif_isp11_stop(
 		};
 		local_irq_restore(flags);
 
-		cifisp_clr_readout_wq(&dev->isp_dev);
-
 		if (!CIF_ISP11_INP_IS_DMA(dev->config.input_sel)) {
 			if (IS_ERR_VALUE(cif_isp11_img_src_set_state(dev,
 				CIF_ISP11_IMG_SRC_STATE_SW_STNDBY)))
@@ -5196,16 +5145,6 @@ static int cif_isp11_start(
 		dev->dma_stream.stop = false;
 		cif_isp11_dma_next_buff(dev);
 	}
-
-	dev->isp_dev.meta_info.read_cnt = 0;
-	dev->isp_dev.meta_info.read_max = 0;
-	if (dev->sp_stream.state == CIF_ISP11_STATE_STREAMING)
-		dev->isp_dev.meta_info.read_max++;
-	if (dev->mp_stream.state == CIF_ISP11_STATE_STREAMING)
-		dev->isp_dev.meta_info.read_max++;
-	if (dev->y12_stream.state == CIF_ISP11_STATE_STREAMING)
-		dev->isp_dev.meta_info.read_max++;
-
 	cif_isp11_pltfrm_pr_dbg(dev->dev,
 		"SP state = %s, MP state = %s, Y12 state = %s, DMA state = %s, img_src state = %s\n"
 		"  MI_CTRL 0x%08x\n"
@@ -5572,6 +5511,7 @@ static void cif_isp11_vs_work(struct work_struct *work)
 	struct cif_isp11_device *dev = vs_wk->dev;
 	unsigned int v_frame_id;
 
+
 	switch (vs_wk->cmd) {
 	case CIF_ISP11_VS_EXP: {
 		struct cif_isp11_img_src_exp *exp =
@@ -6158,7 +6098,6 @@ int cif_isp11_release(
 	int stream_ids)
 {
 	int ret;
-	unsigned long flags = 0;
 	struct cif_isp11_stream *strm_dev;
 
 	cif_isp11_pltfrm_pr_dbg(NULL, "0x%08x\n", stream_ids);
@@ -6187,13 +6126,11 @@ int cif_isp11_release(
 		strm_dev = NULL;
 
 	if (strm_dev) {
-		spin_lock_irqsave(&strm_dev->metadata.spinlock, flags);
 		if (strm_dev->metadata.d != NULL) {
 			vfree(strm_dev->metadata.d);
 			strm_dev->metadata.d = NULL;
 			strm_dev->metadata.cnt = 0;
 		}
-		spin_unlock_irqrestore(&strm_dev->metadata.spinlock, flags);
 	}
 
 	if (stream_ids & CIF_ISP11_STREAM_SP) {
@@ -6450,7 +6387,6 @@ int cif_isp11_reqbufs(
 	enum cif_isp11_stream_id strm,
 	struct v4l2_requestbuffers *req)
 {
-	unsigned long flags = 0;
 	struct cif_isp11_stream *strm_dev;
 
 	switch (strm) {
@@ -6469,9 +6405,7 @@ int cif_isp11_reqbufs(
 		break;
 	}
 
-	spin_lock_irqsave(&strm_dev->metadata.spinlock, flags);
 	strm_dev->metadata.cnt = req->count;
-	spin_unlock_irqrestore(&strm_dev->metadata.spinlock, flags);
 
 	return 0;
 
@@ -6483,7 +6417,7 @@ int cif_isp11_s_exp(
 	struct cif_isp11_img_src_ctrl  *ctrl_exp_t = NULL, *ctrl_exp_g = NULL;
 	struct cif_isp11_img_src_exp *exp = NULL, *exp_t = NULL, *exp_g = NULL;
 	unsigned long lock_flags;
-	int retval, i, exp_cnt;
+	int retval, i;
 
 	if (!dev->vs_wq)
 		return -ENODEV;
@@ -6506,7 +6440,7 @@ int cif_isp11_s_exp(
 			retval = -ENOMEM;
 			goto failed;
 		}
-		ctrl_exp_t = kmalloc(sizeof(struct cif_isp11_img_src_ctrl) * 2, GFP_KERNEL);
+		ctrl_exp_t = kmalloc(sizeof(struct cif_isp11_img_src_ctrl), GFP_KERNEL);
 		if (!ctrl_exp_t) {
 			retval = -ENOMEM;
 			goto failed;
@@ -6523,15 +6457,9 @@ int cif_isp11_s_exp(
 			goto failed;
 		}
 
-		exp_cnt = 0;
 		for (i = 0; i < exp_ctrl->cnt; i++) {
 			if (exp_ctrl->ctrls[i].id == V4L2_CID_EXPOSURE) {
 				*ctrl_exp_t = exp_ctrl->ctrls[i];
-				exp_cnt++;
-			}
-			if (exp_ctrl->ctrls[i].id == RK_V4L2_CID_VTS) {
-				*(ctrl_exp_t + 1) = exp_ctrl->ctrls[i];
-				exp_cnt++;
 			}
 			if (exp_ctrl->ctrls[i].id == V4L2_CID_GAIN) {
 				*ctrl_exp_g = exp_ctrl->ctrls[i];
@@ -6543,7 +6471,7 @@ int cif_isp11_s_exp(
 		kfree(exp_ctrl->ctrls);
 		exp_ctrl->ctrls = NULL;
 
-		exp_t->exp.cnt = exp_cnt;
+		exp_t->exp.cnt = 1;
 		exp_t->exp.class = exp_ctrl->class;
 		exp_t->exp.ctrls = ctrl_exp_t;
 		exp_g->exp.cnt = 2;
@@ -6593,7 +6521,6 @@ int cif_isp11_s_vb_metadata(
 	struct cif_isp11_device *dev,
 	struct cif_isp11_isp_readout_work *readout_work)
 {
-	unsigned long flags = 0;
 	unsigned int stream_id =
 		readout_work->stream_id;
 	struct videobuf_buffer *vb =
@@ -6615,39 +6542,23 @@ int cif_isp11_s_vb_metadata(
 	default:
 		cif_isp11_pltfrm_pr_err(dev->dev,
 			"unknown stream id%d\n", stream_id);
-		return -1;
-	}
-
-	if (strm_dev->state != CIF_ISP11_STATE_STREAMING) {
-		cif_isp11_pltfrm_pr_err(dev->dev,
-			"stream id%d is not streaming\n", stream_id);
-		return -1;
+		break;
 	}
 
-	cif_isp11_sensor_mode_data_sync(dev,
-			readout_work->frame_id,
-			&sensor_mode);
-
-	spin_lock_irqsave(&strm_dev->metadata.spinlock, flags);
 	if (vb && strm_dev->metadata.d) {
-		if (vb->i >= strm_dev->metadata.cnt) {
-			cif_isp11_pltfrm_pr_err(dev->dev,
-				"vb->i %d is bigger than metadata.cnt %d\n",
-				vb->i, strm_dev->metadata.cnt);
-			spin_unlock_irqrestore(&strm_dev->metadata.spinlock, flags);
-			return -1;
-		}
 		metadata = (struct v4l2_buffer_metadata_s *)
 			(strm_dev->metadata.d +
 			vb->i*CAMERA_METADATA_LEN);
 
 		metadata->frame_id = readout_work->frame_id;
+		cif_isp11_sensor_mode_data_sync(dev,
+			metadata->frame_id,
+			&sensor_mode);
 		metadata->sensor.exp_time =
 			sensor_mode.exp_time;
 		metadata->sensor.gain =
 			sensor_mode.gain;
 	}
-	spin_unlock_irqrestore(&strm_dev->metadata.spinlock, flags);
 
 	if (vb) {
 		cif_isp11_pltfrm_pr_dbg(NULL,
@@ -6666,7 +6577,6 @@ int cif_isp11_mmap(
 	void *mem_vaddr;
 	int retval = 0, pages;
 	unsigned long mem_size;
-	unsigned long flags = 0;
 
 	switch (stream_id) {
 	case CIF_ISP11_STREAM_MP:
@@ -6714,9 +6624,7 @@ int cif_isp11_mmap(
 		goto done;
 	}
 
-	spin_lock_irqsave(&strm_dev->metadata.spinlock, flags);
 	strm_dev->metadata.d = (unsigned char *)mem_vaddr;
-	spin_unlock_irqrestore(&strm_dev->metadata.spinlock, flags);
 
 	vma->vm_private_data = (void *)&strm_dev->metadata;
 
diff --git a/drivers/media/platform/rk-isp11/cif_isp11.h b/drivers/media/platform/rk-isp11/cif_isp11.h
index c4602d6..8a0bea6 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11.h
+++ b/drivers/media/platform/rk-isp11/cif_isp11.h
@@ -129,7 +129,6 @@ enum cif_isp11_cid {
 	CIF_ISP11_CID_VBLANKING = 17,
 	CIF_ISP11_CID_ISO_SENSITIVITY = 18,
 	CIF_ISP11_CID_BAND_STOP_FILTER = 19,
-	CIF_ISP11_CID_VTS = 20,
 };
 
 /* correspond to bit field values */
@@ -448,7 +447,6 @@ struct cif_isp11_buffer {
 struct cif_isp11_metadata_s {
 	unsigned int cnt;
 	unsigned int vmas;
-	spinlock_t spinlock;
 	unsigned char *d;
 };
 
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_img_src_v4l2-subdev.c b/drivers/media/platform/rk-isp11/cif_isp11_img_src_v4l2-subdev.c
index de8b199..42dd019 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_img_src_v4l2-subdev.c
+++ b/drivers/media/platform/rk-isp11/cif_isp11_img_src_v4l2-subdev.c
@@ -245,8 +245,6 @@ static int cif_isp11_v4l2_cid2v4l2_cid(u32 cif_isp11_cid)
 		return V4L2_CID_VFLIP;
 	case CIF_ISP11_CID_BAND_STOP_FILTER:
 		return V4L2_CID_BAND_STOP_FILTER;
-	case CIF_ISP11_CID_VTS:
-		return RK_V4L2_CID_VTS;
 	default:
 		cif_isp11_pltfrm_pr_err(NULL,
 			"unknown/unsupported CIF ISP20 ID %d\n",
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_isp.c b/drivers/media/platform/rk-isp11/cif_isp11_isp.c
index 56fcf17..f4be899 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_isp.c
+++ b/drivers/media/platform/rk-isp11/cif_isp11_isp.c
@@ -41,10 +41,6 @@
 #define CIFISP_MODULE_CLR_UPDATE(v, m) 		(v &= ~m)
 #define CIFISP_MODULE_IS_UPDATE(v, m)		((v & m) == m)
 
-#define CIFISP_MODULE_UNACTIVE(v, m)		((v) |= (m))
-#define CIFISP_MODULE_ACTIVE(v, m)		((v) &= ~(m))
-#define CIFISP_MODULE_IS_UNACTIVE(v, m)	        (((v) & (m)) == (m))
-
 /* Demosaic */
 #define CIFISP_BDM_BYPASS_EN(val)  ((val) << 10)
 /* HIST */
@@ -317,7 +313,7 @@ static int cifisp_module_enable(struct cif_isp11_isp_dev *isp_dev,
 	bool flag, __s32 *value, unsigned int module)
 {
 	unsigned int curr_id, new_id;
-	unsigned int *updates, *curr_ens, *new_ens, *actives;
+	unsigned int *updates, *curr_ens, *new_ens;
 	unsigned long lock_flags = 0;
 
 	if (module >= CIFISP_MODULE_MAX)
@@ -329,14 +325,12 @@ static int cifisp_module_enable(struct cif_isp11_isp_dev *isp_dev,
 		curr_id = isp_dev->meas_cfgs.log[module].curr_id;
 		new_id = isp_dev->meas_cfgs.log[module].new_id;
 		updates = &isp_dev->meas_cfgs.module_updates;
-		actives = &isp_dev->meas_cfgs.module_actives;
 		curr_ens = &isp_dev->meas_cfgs.cfgs[curr_id].module_ens;
 		new_ens = &isp_dev->meas_cfgs.cfgs[new_id].module_ens;
 	} else {
 		curr_id = isp_dev->other_cfgs.log[module].curr_id;
 		new_id = isp_dev->other_cfgs.log[module].new_id;
 		updates = &isp_dev->other_cfgs.module_updates;
-		actives = &isp_dev->other_cfgs.module_actives;
 		curr_ens = &isp_dev->other_cfgs.cfgs[curr_id].module_ens;
 		new_ens = &isp_dev->other_cfgs.cfgs[new_id].module_ens;
 	}
@@ -347,9 +341,6 @@ static int cifisp_module_enable(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(*actives, (1 << module)) && *value)
-		goto end;
-
 	if ((CIFISP_MODULE_IS_EN(*curr_ens, (1 << module)) != *value) ||
 		(CIFISP_MODULE_IS_UPDATE(*updates, (1 << module)))) {
 		if (*value)
@@ -394,13 +385,6 @@ static int cifisp_dpcc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_DPCC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_DPCC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -423,7 +407,7 @@ static int cifisp_dpcc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	method = &arg->methods[0];
+	method = &arg->methods[i];
 	for (i = 0; i < CIFISP_DPCC_METHODS_MAX; i++) {
 		if ((method->method & CIFISP_DPCC_METHODS_SET_RESERVED) ||
 			(method->line_thresh & CIFISP_DPCC_LINE_THRESH_RESERVED) ||
@@ -473,13 +457,6 @@ static int cifisp_bls_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_BLS)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_BLS);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -550,13 +527,6 @@ static int cifisp_lsc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_LSC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_LSC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -645,13 +615,6 @@ static int cifisp_flt_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_FLT)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_FLT);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -719,13 +682,6 @@ static int cifisp_bdm_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_BDM)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_BDM);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -779,13 +735,6 @@ static int cifisp_sdg_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_SDG)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_SDG);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -851,13 +800,6 @@ static int cifisp_goc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_GOC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_GOC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -912,13 +854,6 @@ static int cifisp_wdr_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_WDR)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_WDR);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -973,13 +908,6 @@ static int cifisp_ctk_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_CTK)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_CTK);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1045,13 +973,6 @@ static int cifisp_awb_meas_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->meas_cfgs.module_actives,
-		CIFISP_MODULE_AWB)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_AWB);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1115,13 +1036,6 @@ static int cifisp_awb_gain_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_AWB_GAIN)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_AWB_GAIN);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1177,13 +1091,6 @@ static int cifisp_aec_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->meas_cfgs.module_actives,
-		CIFISP_MODULE_AEC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_AEC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1229,13 +1136,6 @@ static int cifisp_cproc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_CPROC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_CPROC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1295,13 +1195,6 @@ static int cifisp_hst_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->meas_cfgs.module_actives,
-		CIFISP_MODULE_HST)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	if (CIFISP_MODULE_IS_EN(
 		isp_dev->meas_cfgs.cfgs[cfg_log->curr_id].module_ens,
 		CIFISP_MODULE_HST) &&
@@ -1369,13 +1262,6 @@ static int cifisp_afc_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->meas_cfgs.module_actives,
-		CIFISP_MODULE_AFC)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_AFC);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1446,13 +1332,6 @@ static int cifisp_ie_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_IE)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_IE);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1519,13 +1398,6 @@ static int cifisp_dpf_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_DPF)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_DPF);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -1625,13 +1497,6 @@ static int cifisp_dpf_strength_param(struct cif_isp11_isp_dev *isp_dev,
 		goto end;
 	}
 
-	if (CIFISP_MODULE_IS_UNACTIVE(isp_dev->other_cfgs.module_actives,
-		CIFISP_MODULE_DPF_STRENGTH)) {
-		CIFISP_DPRINT(CIFISP_ERROR,
-			      "module is unactive in function: %s\n", __func__);
-		goto end;
-	}
-
 	cifisp_param_dump(arg, CIFISP_MODULE_DPF_STRENGTH);
 
 	if (CIFISP_MODULE_IS_EN(
@@ -3041,7 +2906,10 @@ static int __cifisp_streamoff(struct cif_isp11_isp_dev *isp_dev)
 {
 	int ret;
 
+	drain_workqueue(isp_dev->readout_wq);
+
 	ret = videobuf_streamoff(&isp_dev->vbq_stat);
+
 	if (ret == 0)
 		isp_dev->streamon = false;
 
@@ -3343,9 +3211,6 @@ static int cifisp_reset(struct file *file)
 	isp_dev->active_meas = 0;
 	isp_dev->frame_id = 0;
 	isp_dev->cif_ism_cropping = false;
-
-	isp_dev->meta_info.write_id = 0;
-	isp_dev->meta_info.read_id = 0;
 	return 0;
 }
 static int cifisp_open(struct file *file)
@@ -3502,53 +3367,14 @@ static void cifisp_dump_reg(struct cif_isp11_isp_dev *isp_dev, int level)
 #endif
 }
 
-static void cifisp_set_isp_modules_actives(struct cif_isp11_isp_dev *isp_dev,
-	enum cif_isp11_pix_fmt in_pix_fmt)
-{
-	isp_dev->other_cfgs.module_actives = 0;
-	isp_dev->meas_cfgs.module_actives = 0;
-	if (CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt)) {
-		/* unlimited */
-	} else if (in_pix_fmt == CIF_Y10) {
-		CIFISP_MODULE_UNACTIVE(
-			isp_dev->other_cfgs.module_actives,
-			CIFISP_MODULE_LSC |
-			CIFISP_MODULE_AWB_GAIN |
-			CIFISP_MODULE_BDM |
-			CIFISP_MODULE_CTK);
-
-		CIFISP_MODULE_UNACTIVE(
-			isp_dev->meas_cfgs.module_actives,
-			CIFISP_MODULE_AWB);
-	} else {
-		CIFISP_MODULE_UNACTIVE(
-			isp_dev->other_cfgs.module_actives,
-			CIFISP_MODULE_DPCC |
-			CIFISP_MODULE_BLS |
-			CIFISP_MODULE_SDG |
-			CIFISP_MODULE_LSC |
-			CIFISP_MODULE_FLT |
-			CIFISP_MODULE_BDM |
-			CIFISP_MODULE_CTK |
-			CIFISP_MODULE_GOC |
-			CIFISP_MODULE_WDR |
-			CIFISP_MODULE_DPF);
-
-		CIFISP_MODULE_UNACTIVE(
-			isp_dev->meas_cfgs.module_actives,
-			CIFISP_MODULE_HST |
-			CIFISP_MODULE_AFC |
-			CIFISP_MODULE_AWB |
-			CIFISP_MODULE_AEC);
-	}
-}
-
 /* Not called when the camera active, thus not isr protection. */
 void cifisp_configure_isp(
 	struct cif_isp11_isp_dev *isp_dev,
 	enum cif_isp11_pix_fmt in_pix_fmt,
 	enum cif_isp11_pix_fmt_quantization quantization)
 {
+	unsigned int *other_ens;
+	unsigned int *other_updates, *meas_updates;
 	unsigned int time_left = 3000;
 	unsigned int i, curr_id;
 	CIFISP_DPRINT(CIFISP_DEBUG, "%s\n", __func__);
@@ -3557,69 +3383,139 @@ void cifisp_configure_isp(
 	spin_lock(&isp_dev->config_lock);
 
 	isp_dev->quantization = quantization;
-
-	cifisp_set_isp_modules_actives(isp_dev, in_pix_fmt);
-
-	/*
-	 * Must config isp, Hardware may has been reseted.
-	 */
-	for (i = 0; i < CIFISP_MEAS_ID; i++) {
-		if (CIFISP_MODULE_IS_UNACTIVE(
-			isp_dev->other_cfgs.module_actives,
-			(1 << i)))
-			continue;
-
-		if (CIFISP_MODULE_IS_UPDATE(
-			isp_dev->other_cfgs.module_updates,
-			(1 << i)))
-			continue;
-
-		curr_id = isp_dev->other_cfgs.log[i].curr_id;
-		if (CIFISP_MODULE_IS_EN(
-			isp_dev->other_cfgs.cfgs[curr_id].module_ens,
-			(1 << i))) {
-			isp_dev->other_cfgs.log[i].new_id = curr_id;
-			CIFISP_MODULE_UPDATE(
+	if (CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt)) {
+		/*
+		*Must config isp, Hardware may has been reseted.
+		*/
+		for (i = 0; i < CIFISP_MEAS_ID; i++) {
+			if (CIFISP_MODULE_IS_UPDATE(
 				isp_dev->other_cfgs.module_updates,
-				(1 << i));
-
-			if (i == CIFISP_DPF_ID) {
-				isp_dev->other_cfgs.log[CIFISP_DPF_STRENGTH_ID].new_id = curr_id;
+				(1 << i)))
+				continue;
+
+			curr_id = isp_dev->other_cfgs.log[i].curr_id;
+			if (CIFISP_MODULE_IS_EN(
+				isp_dev->other_cfgs.cfgs[curr_id].module_ens,
+				(1 << i))) {
+				isp_dev->other_cfgs.log[i].new_id = curr_id;
 				CIFISP_MODULE_UPDATE(
 					isp_dev->other_cfgs.module_updates,
-					(1 << CIFISP_DPF_STRENGTH_ID));
+					(1 << i));
+
+				if (i == CIFISP_DPF_ID) {
+					isp_dev->other_cfgs.log[CIFISP_DPF_STRENGTH_ID].new_id = curr_id;
+					CIFISP_MODULE_UPDATE(
+						isp_dev->other_cfgs.module_updates,
+						(1 << CIFISP_DPF_STRENGTH_ID));
+				}
 			}
 		}
-	}
-	for (i = CIFISP_MEAS_ID; i < CIFISP_MODULE_MAX; i++) {
-		if (CIFISP_MODULE_IS_UNACTIVE(
-			isp_dev->meas_cfgs.module_actives,
-			(1 << i)))
-			continue;
-
-		if (CIFISP_MODULE_IS_UPDATE(
-			isp_dev->meas_cfgs.module_updates,
-			(1 << i)))
-			continue;
-
-		curr_id = isp_dev->meas_cfgs.log[i].curr_id;
-		if (CIFISP_MODULE_IS_EN(
-			isp_dev->meas_cfgs.cfgs[curr_id].module_ens,
-			(1 << i))) {
-			isp_dev->meas_cfgs.log[i].new_id = curr_id;
-			CIFISP_MODULE_UPDATE(
+		for (i = CIFISP_MEAS_ID; i < CIFISP_MODULE_MAX; i++) {
+			if (CIFISP_MODULE_IS_UPDATE(
 				isp_dev->meas_cfgs.module_updates,
-				(1 << i));
+				(1 << i)))
+				continue;
+
+			curr_id = isp_dev->meas_cfgs.log[i].curr_id;
+			if (CIFISP_MODULE_IS_EN(
+				isp_dev->meas_cfgs.cfgs[curr_id].module_ens,
+				(1 << i))) {
+				isp_dev->meas_cfgs.log[i].new_id = curr_id;
+				CIFISP_MODULE_UPDATE(
+					isp_dev->meas_cfgs.module_updates,
+					(1 << i));
+			}
+		}
+		cifisp_isp_isr_other_config(isp_dev, &time_left);
+		cifisp_csm_config(isp_dev, quantization);
+		cifisp_isp_isr_meas_config(isp_dev, &time_left);
+	} else {
+		other_updates = &isp_dev->other_cfgs.module_updates;
+		meas_updates = &isp_dev->meas_cfgs.module_updates;
+		other_ens = &isp_dev->other_cfgs.cfgs[0].module_ens;
+
+		/* Disable modules for yuv */
+		cifisp_dpcc_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_DPCC);
+
+		cifisp_lsc_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_LSC);
+
+		cifisp_bls_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_BLS);
+
+		cifisp_sdg_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_SDG);
+
+		cifisp_goc_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_GOC);
+
+		cifisp_wdr_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_WDR);
+
+		cifisp_bdm_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_BDM);
+
+		cifisp_flt_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_FLT);
+
+		cifisp_awb_meas_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*meas_updates,
+				CIFISP_MODULE_AWB);
+
+		cifisp_aec_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*meas_updates,
+				CIFISP_MODULE_AEC);
+
+		cifisp_ctk_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_CTK);
+
+		cifisp_dpf_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_DPF);
+
+		/* cproc can be used for yuv in reduced range */
+		if (CIFISP_MODULE_IS_EN(*other_ens, CIFISP_MODULE_CPROC)) {
+			cifisp_cproc_config(isp_dev, false);
+			cifisp_cproc_en(isp_dev);
+			CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_CPROC);
+			isp_dev->other_cfgs.log[CIFISP_CPROC_ID].curr_id = 0;
+			isp_dev->other_cfgs.log[CIFISP_CPROC_ID].new_id = 1;
+		}
+
+		cifisp_hst_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*meas_updates,
+				CIFISP_MODULE_HST);
+
+		cifisp_afc_end(isp_dev);
+		CIFISP_MODULE_CLR_UPDATE(*meas_updates,
+				CIFISP_MODULE_AFC);
+		/* ie can be used for yuv */
+		if (CIFISP_MODULE_IS_EN(*other_ens, CIFISP_MODULE_IE)) {
+			cifisp_ie_config(isp_dev);
+			cifisp_ie_en(isp_dev);
+			CIFISP_MODULE_CLR_UPDATE(*other_updates,
+				CIFISP_MODULE_IE);
+			isp_dev->other_cfgs.log[CIFISP_IE_ID].curr_id = 0;
+			isp_dev->other_cfgs.log[CIFISP_IE_ID].new_id = 1;
+		} else {
+			cifisp_ie_end(isp_dev);
 		}
-	}
-	cifisp_isp_isr_other_config(isp_dev, &time_left);
-	cifisp_csm_config(isp_dev, quantization);
-	cifisp_isp_isr_meas_config(isp_dev, &time_left);
 
-	if (!(CIF_ISP11_PIX_FMT_IS_RAW_BAYER(in_pix_fmt)) &&
-		!(in_pix_fmt == CIF_Y10))
 		__cifisp_streamoff(isp_dev);
 
+	}
+
 	cifisp_dump_reg(isp_dev, CIFISP_DEBUG);
 
 	spin_unlock(&isp_dev->config_lock);
@@ -3630,27 +3526,17 @@ void cifisp_frame_in(
 	struct cif_isp11_isp_dev *isp_dev,
 	const struct timeval *fi_t)
 {
-	unsigned int write_id;
 	/* Called in an interrupt context. */
 	isp_dev->fi_t = *fi_t;
-
-	write_id = isp_dev->meta_info.write_id;
-	isp_dev->meta_info.fi_t[write_id] = *fi_t;
-	isp_dev->meta_info.write_id = (write_id + 1) % CIF_ISP11_META_INFO_NUM;
 }
 
 void cifisp_v_start(
 	struct cif_isp11_isp_dev *isp_dev,
 	const struct timeval *vs_t)
 {
-	unsigned int write_id;
 	/* Called in an interrupt context. */
 	isp_dev->frame_id += 2;
 	isp_dev->vs_t = *vs_t;
-
-	write_id = isp_dev->meta_info.write_id;
-	isp_dev->meta_info.frame_id[write_id] = isp_dev->frame_id;
-	isp_dev->meta_info.vs_t[write_id] = *vs_t;
 }
 
 void cifisp_frame_id_reset(
@@ -3669,9 +3555,6 @@ void cifisp_frame_id_reset(
 			0x00,
 			sizeof(isp_dev->meas_cfgs.log[i].s_frame_id));
 	}
-
-	isp_dev->meta_info.read_id = 0;
-	isp_dev->meta_info.write_id = 0;
 }
 
 /* Not called when the camera active, thus not isr protection. */
@@ -3724,6 +3607,11 @@ static void cifisp_send_measurement(
 	struct pltfrm_cam_ls  cam_ls;
 
 	spin_lock_irqsave(&isp_dev->irq_lock, lock_flags);
+	if (isp_dev->frame_id != meas_work->frame_id) {
+		spin_unlock_irqrestore(&isp_dev->irq_lock, lock_flags);
+		goto end;
+	}
+
 	if (!list_empty(&isp_dev->stat)) {
 		vb = list_first_entry(&isp_dev->stat, struct videobuf_buffer, queue);
 	} else {
@@ -3739,40 +3627,65 @@ static void cifisp_send_measurement(
 	stat_buf = (struct cifisp_stat_buffer *)videobuf_to_vmalloc(vb);
 	memset(stat_buf, 0x00, sizeof(struct cifisp_stat_buffer));
 
+	if (active_meas & CIF_ISP_AWB_DONE) {
+		cifisp_get_awb_meas(isp_dev, stat_buf);
+	}
+
+	if (active_meas & CIF_ISP_AFM_FIN) {
+		cifisp_get_afc_meas(isp_dev, stat_buf);
+	}
+
+	if (active_meas & CIF_ISP_EXP_END) {
+		cifisp_get_aec_meas(isp_dev, stat_buf);
+		cifisp_bls_get_meas(isp_dev, stat_buf);
+	}
+
+	if (active_meas & CIF_ISP_HIST_MEASURE_RDY) {
+		cifisp_get_hst_meas(isp_dev, stat_buf);
+	}
 	spin_lock_irqsave(&isp_dev->irq_lock, lock_flags);
+
+	if (isp_dev->frame_id != meas_work->frame_id) {
+		spin_unlock_irqrestore(&isp_dev->irq_lock, lock_flags);
+		goto end;
+	}
+
 	vb->ts = isp_dev->vs_t;
 	list_del(&vb->queue);
 	spin_unlock_irqrestore(&isp_dev->irq_lock, lock_flags);
 
 	if (active_meas & CIF_ISP_AWB_DONE) {
-		memcpy(&stat_buf->params.awb,
-			&isp_dev->meas_stats.stat.params.awb,
+		memcpy(&isp_dev->meas_stats.stat.params.awb,
+			&stat_buf->params.awb,
 			sizeof(struct cifisp_awb_stat));
-		stat_buf->meas_type |= CIFISP_STAT_AWB;
+		isp_dev->meas_stats.stat.meas_type |= CIFISP_STAT_AWB;
 	}
 	if (active_meas & CIF_ISP_AFM_FIN) {
-		memcpy(&stat_buf->params.af,
-			&isp_dev->meas_stats.stat.params.af,
+		memcpy(&isp_dev->meas_stats.stat.params.af,
+			&stat_buf->params.af,
 			sizeof(struct cifisp_af_stat));
-		stat_buf->meas_type |= CIFISP_STAT_AFM_FIN;
+		isp_dev->meas_stats.stat.meas_type |= CIFISP_STAT_AFM_FIN;
 	}
 	if (active_meas & CIF_ISP_EXP_END) {
-		memcpy(&stat_buf->params.ae,
-			&isp_dev->meas_stats.stat.params.ae,
-			sizeof(struct cifisp_ae_stat));
-
 		cif_isp11_sensor_mode_data_sync(cif_dev,
 			meas_work->frame_id,
 			&stat_buf->sensor_mode);
+		memcpy(&isp_dev->meas_stats.stat.params.ae,
+			&stat_buf->params.ae,
+			sizeof(struct cifisp_ae_stat));
+		memcpy(&isp_dev->meas_stats.stat.sensor_mode,
+			&stat_buf->sensor_mode,
+			sizeof(struct isp_supplemental_sensor_mode_data));
 
-		stat_buf->meas_type |= CIFISP_STAT_AUTOEXP;
+		isp_dev->meas_stats.stat.meas_type |= CIFISP_STAT_AUTOEXP;
 	}
 	if (active_meas & CIF_ISP_HIST_MEASURE_RDY) {
-		memcpy(&stat_buf->params.hist,
-			&isp_dev->meas_stats.stat.params.hist,
+		memcpy(&isp_dev->meas_stats.stat.params.hist,
+			&stat_buf->params.hist,
 			sizeof(struct cifisp_hist_stat));
-		stat_buf->meas_type |= CIFISP_STAT_HIST;
+		isp_dev->meas_stats.stat.meas_type |= CIFISP_STAT_HIST;
 	}
+	isp_dev->meas_stats.g_frame_id = meas_work->frame_id;
 	vb->field_count = meas_work->frame_id;
 
 	cif_isp11_img_src_ioctl(cif_dev->img_src,
@@ -3812,10 +3725,6 @@ static int cifisp_s_vb_metadata(
 	unsigned int i, j, match_id;
 	unsigned long int lock_flags;
 
-	cif_isp11_sensor_mode_data_sync(cif_dev,
-			readout_work->frame_id,
-			&isp_dev->meas_stats.stat.sensor_mode);
-
 	spin_lock_irqsave(&isp_dev->config_lock, lock_flags);
 	other_cfg->module_ens = 0;
 	for (i = 0; i < CIFISP_MEAS_ID; i++) {
@@ -4050,12 +3959,8 @@ static inline bool cifisp_isp_isr_other_config(
 	unsigned int new_id;
 	unsigned int i, j;
 	unsigned int *ens;
-	unsigned int *actives = &isp_dev->other_cfgs.module_actives;
 
 	for (i = 0; i < CIFISP_MEAS_ID; i++) {
-		if (CIFISP_MODULE_IS_UNACTIVE(*actives, (1 << i)))
-			continue;
-
 		if (CIFISP_MODULE_IS_UPDATE(
 			isp_dev->other_cfgs.module_updates,
 			(1 << i))) {
@@ -4222,12 +4127,8 @@ static inline bool cifisp_isp_isr_meas_config(
 	unsigned int new_id;
 	unsigned int i, j;
 	unsigned int *ens;
-	unsigned int *actives = &isp_dev->meas_cfgs.module_actives;
 
 	for (i = CIFISP_MEAS_ID; i < CIFISP_MODULE_MAX; i++) {
-		if (CIFISP_MODULE_IS_UNACTIVE(*actives, (1 << i)))
-			continue;
-
 		if (CIFISP_MODULE_IS_UPDATE(
 			isp_dev->meas_cfgs.module_updates,
 			(1 << i))) {
@@ -4307,40 +4208,30 @@ int cifisp_isp_isr(struct cif_isp11_isp_dev *isp_dev, u32 isp_mis)
 	if (isp_mis & (CIF_ISP_DATA_LOSS | CIF_ISP_PIC_SIZE_ERROR))
 		return 0;
 
-	cifisp_iowrite32(
-		(isp_mis & (CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN |
-		CIF_ISP_EXP_END | CIF_ISP_HIST_MEASURE_RDY)),
-		CIF_ISP_ICR);
-
-	isp_mis_tmp = cifisp_ioread32(CIF_ISP_MIS);
-	if (isp_mis_tmp &
-		(isp_mis & (CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN |
-		CIF_ISP_EXP_END | CIF_ISP_HIST_MEASURE_RDY)))
-		CIFISP_DPRINT(CIFISP_ERROR,
-			"isp icr 3A info err: 0x%x\n",
-			 isp_mis_tmp);
-
-	if (isp_mis & CIF_ISP_AWB_DONE)
-		cifisp_get_awb_meas(isp_dev, &isp_dev->meas_stats.stat);
-
-	if (isp_mis & CIF_ISP_AFM_FIN)
-		cifisp_get_afc_meas(isp_dev, &isp_dev->meas_stats.stat);
+	if (isp_mis & CIF_ISP_FRAME) {
+		u32 isp_ris = cifisp_ioread32(CIF_ISP_RIS);
 
-	if (isp_mis & CIF_ISP_EXP_END) {
-		cifisp_get_aec_meas(isp_dev, &isp_dev->meas_stats.stat);
-		cifisp_bls_get_meas(isp_dev, &isp_dev->meas_stats.stat);
-		isp_dev->meas_stats.g_frame_id = isp_dev->frame_id;
-	}
+		cifisp_iowrite32(
+			(CIF_ISP_AWB_DONE|CIF_ISP_AFM_FIN|
+			CIF_ISP_EXP_END|CIF_ISP_HIST_MEASURE_RDY),
+			CIF_ISP_ICR);
+		isp_mis_tmp = cifisp_ioread32(CIF_ISP_MIS);
+		if (isp_mis_tmp &
+			(CIF_ISP_AWB_DONE|CIF_ISP_AFM_FIN|
+			CIF_ISP_EXP_END|CIF_ISP_HIST_MEASURE_RDY))
+			CIFISP_DPRINT(CIFISP_ERROR,
+				      "isp icr 3A info err: 0x%x\n",
+				      isp_mis_tmp);
 
-	if (isp_mis & CIF_ISP_HIST_MEASURE_RDY)
-		cifisp_get_hst_meas(isp_dev, &isp_dev->meas_stats.stat);
+		CIFISP_DPRINT(CIFISP_DEBUG, "isp_ris 0x%x\n", isp_ris);
 
-	if (isp_mis & CIF_ISP_FRAME) {
 		if (((isp_dev->meas_cfgs.module_updates &
 			(CIFISP_MODULE_AWB |
 			CIFISP_MODULE_AEC |
 			CIFISP_MODULE_AFC)) == 0) &&
-			isp_dev->active_meas) {
+			isp_dev->active_meas &&
+			((isp_dev->active_meas & isp_ris) ==
+			isp_dev->active_meas)) {
 
 			work = (struct cif_isp11_isp_readout_work *)
 				kmalloc(sizeof(struct cif_isp11_isp_readout_work), GFP_ATOMIC);
@@ -4389,11 +4280,6 @@ int cifisp_isp_isr(struct cif_isp11_isp_dev *isp_dev, u32 isp_mis)
 	return 0;
 }
 
-void cifisp_clr_readout_wq(struct cif_isp11_isp_dev *isp_dev)
-{
-	drain_workqueue(isp_dev->readout_wq);
-}
-
 static void cifisp_param_dump(const void *config, unsigned int module)
 {
 #ifdef CIFISP_DEBUG_PARAM
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_isp.h b/drivers/media/platform/rk-isp11/cif_isp11_isp.h
index 7eb2f3d..d759d29 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_isp.h
+++ b/drivers/media/platform/rk-isp11/cif_isp11_isp.h
@@ -25,8 +25,6 @@
 /****************************************************************************
 *                                                     ISP device struct
 ****************************************************************************/
-#define CIF_ISP11_META_INFO_NUM		2
-
 enum cif_isp11_pix_fmt;
 
 enum cif_isp11_pix_fmt_quantization {
@@ -45,14 +43,12 @@ struct cif_isp11_isp_other_cfgs {
 	struct cif_isp11_isp_cfgs_log log[CIFISP_MODULE_MAX];
 	struct cifisp_isp_other_cfg cfgs[3];
 	unsigned int module_updates;
-	unsigned int module_actives;
 };
 
 struct cif_isp11_isp_meas_cfgs {
 	struct cif_isp11_isp_cfgs_log log[CIFISP_MODULE_MAX];
 	struct cifisp_isp_meas_cfg cfgs[3];
 	unsigned int module_updates;
-	unsigned int module_actives;
 };
 
 struct cif_isp11_isp_meas_stats {
@@ -60,16 +56,6 @@ struct cif_isp11_isp_meas_stats {
 	struct cifisp_stat_buffer stat;
 };
 
-struct cif_isp11_isp_meta_info {
-	unsigned int write_id;
-	unsigned int read_id;
-	unsigned int read_cnt;
-	unsigned int read_max;
-	unsigned int frame_id[CIF_ISP11_META_INFO_NUM];
-	struct timeval vs_t[CIF_ISP11_META_INFO_NUM];
-	struct timeval fi_t[CIF_ISP11_META_INFO_NUM];
-};
-
 struct cif_isp11_isp_dev {
 	/* Purpose of mutex is to protect and serialize use
 		of isp data structure and CIF API calls. */
@@ -107,7 +93,6 @@ struct cif_isp11_isp_dev {
 	struct timeval vs_t;	/* updated each frame */
 	struct timeval fi_t;	/* updated each frame */
 	struct workqueue_struct *readout_wq;
-	struct cif_isp11_isp_meta_info meta_info;
 
 	unsigned int *dev_id;
 };
@@ -139,7 +124,6 @@ void cifisp_configure_isp(
 	enum cif_isp11_pix_fmt_quantization quantization);
 void cifisp_disable_isp(struct cif_isp11_isp_dev *isp_dev);
 int cifisp_isp_isr(struct cif_isp11_isp_dev *isp_dev, u32 isp_mis);
-void cifisp_clr_readout_wq(struct cif_isp11_isp_dev *isp_dev);
 void cifisp_v_start(struct cif_isp11_isp_dev *isp_dev,
 	const struct timeval *timestamp);
 void cifisp_frame_in(
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_pltfrm.h b/drivers/media/platform/rk-isp11/cif_isp11_pltfrm.h
index 2867d15..806e416 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_pltfrm.h
+++ b/drivers/media/platform/rk-isp11/cif_isp11_pltfrm.h
@@ -21,7 +21,6 @@
 #include <linux/device.h>
 #include <linux/delay.h>
 #include <linux/wait.h>
-#include <linux/slab.h>
 #include <linux/string.h>
 #include <linux/platform_data/rk_isp11_platform.h>
 
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_rv1108.c b/drivers/media/platform/rk-isp11/cif_isp11_rv1108.c
index d0c1317..97b9bf0 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_rv1108.c
+++ b/drivers/media/platform/rk-isp11/cif_isp11_rv1108.c
@@ -25,7 +25,6 @@
 #include <linux/kernel.h>
 #include <linux/platform_device.h>
 #include <linux/platform_data/rk_isp11_platform.h>
-#include <linux/rockchip/dvfs.h>
 #include "cif_isp11_pltfrm.h"
 #include "cif_isp11_regs.h"
 
@@ -81,8 +80,6 @@ struct cif_isp11_clk_rst_rv1108 {
 	struct clk *pclk_mipi_csi;
 	struct clk *pclk_isp_in;
 
-	struct dvfs_node *dvfs_core;
-
 	struct reset_control *isp_rst;
 	struct reset_control *isp_niu_arst;
 	struct reset_control *isp_niu_hrst;
@@ -226,12 +223,7 @@ static int soc_clk_enable(void)
 
 	clk_prepare_enable(clk_rst->hclk_isp);
 	clk_prepare_enable(clk_rst->aclk_isp);
-	if (clk_rst->dvfs_core) {
-		clk_enable_dvfs(clk_rst->dvfs_core);
-		dvfs_clk_prepare_enable(clk_rst->dvfs_core);
-	} else {
-		clk_prepare_enable(clk_rst->sclk_isp);
-	}
+	clk_prepare_enable(clk_rst->sclk_isp);
 	clk_prepare_enable(clk_rst->sclk_isp_jpe);
 	clk_prepare_enable(clk_rst->sclk_mipidsi_24m);
 	clk_prepare_enable(clk_rst->pclk_isp_in);
@@ -256,12 +248,7 @@ static int soc_clk_disable(void)
 
 	clk_disable_unprepare(clk_rst->hclk_isp);
 	clk_disable_unprepare(clk_rst->aclk_isp);
-	if (clk_rst->dvfs_core) {
-		dvfs_clk_disable_unprepare(clk_rst->dvfs_core);
-		clk_disable_dvfs(clk_rst->dvfs_core);
-	} else {
-		clk_disable_unprepare(clk_rst->sclk_isp);
-	}
+	clk_disable_unprepare(clk_rst->sclk_isp);
 	clk_disable_unprepare(clk_rst->sclk_isp_jpe);
 	clk_disable_unprepare(clk_rst->sclk_mipidsi_24m);
 	clk_disable_unprepare(clk_rst->pclk_isp_in);
@@ -275,8 +262,9 @@ static int soc_isp_clk_cfg(int *data_rate)
 	int tmp, i;
 	struct cif_isp11_clk_rst_rv1108 *clk_rst;
 
+	
 	pr_warn("prv1108: %p\n", rv1108);
-
+	
 	if (IS_ERR_OR_NULL(rv1108))
 		return 0;
 
@@ -293,13 +281,8 @@ static int soc_isp_clk_cfg(int *data_rate)
 		pr_warn("rv1108 isp signoff is 360MHz, using %dMHz maybe unstable\n",
 			isp_clk[i]);
 
-	if (clk_rst->dvfs_core)
-		dvfs_clk_set_rate(clk_rst->dvfs_core, isp_clk[i] * 1000000);
-	else
-		clk_set_rate(clk_rst->sclk_isp, isp_clk[i] * 1000000);
-
+	clk_set_rate(clk_rst->sclk_isp, isp_clk[i] * 1000000);
 	clk_set_rate(clk_rst->sclk_isp_jpe, isp_clk[i] * 1000000);
-	printk(KERN_INFO "%s: set isp clk = %dMHz\n", __func__, isp_clk[i]);
 	return 0;
 }
 
@@ -362,14 +345,6 @@ static int soc_init(struct pltfrm_soc_init_para *init)
 	clk_rst->isp_niu_hrst = devm_reset_control_get(&pdev->dev, "rst_isp_niu_h");
 	clk_rst->isp_hrst = devm_reset_control_get(&pdev->dev, "rst_isp_h");
 
-	clk_rst->dvfs_core = clk_get_dvfs_node("clk_isp");
-	if (IS_ERR_OR_NULL(clk_rst->dvfs_core)) {
-		dev_info(&pdev->dev, "without dvfs node\n");
-		clk_rst->dvfs_core = NULL;
-	} else {
-		dev_info(&pdev->dev, "with dvfs node\n");
-	}
-
 	if (IS_ERR_OR_NULL(clk_rst->aclk_isp) ||
 		IS_ERR_OR_NULL(clk_rst->hclk_isp) ||
 		IS_ERR_OR_NULL(clk_rst->sclk_isp) ||
@@ -386,6 +361,8 @@ static int soc_init(struct pltfrm_soc_init_para *init)
 		goto clk_failed;
 	}
 
+	clk_set_rate(clk_rst->sclk_isp, 300000000);
+	clk_set_rate(clk_rst->sclk_isp_jpe, 300000000);
 	reset_control_deassert(clk_rst->isp_rst);
 
 	rv1108->isp_base = init->isp_base;
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_v4l2.c b/drivers/media/platform/rk-isp11/cif_isp11_v4l2.c
index 68836d3..b6408f6 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_v4l2.c
+++ b/drivers/media/platform/rk-isp11/cif_isp11_v4l2.c
@@ -275,8 +275,6 @@ static int cif_isp11_v4l2_cid2cif_isp11_cid(u32 v4l2_cid)
 		return CIF_ISP11_CID_ISO_SENSITIVITY;
 	case RK_V4L2_CID_AUTO_FPS:
 		return CIF_ISP11_CID_AUTO_FPS;
-	case RK_V4L2_CID_VTS:
-		return CIF_ISP11_CID_VTS;
 	case V4L2_CID_BAND_STOP_FILTER:
 		return CIF_ISP11_CID_BAND_STOP_FILTER;
 	default:
@@ -324,9 +322,9 @@ static enum cif_isp11_pix_fmt cif_isp11_v4l2_pix_fmt2cif_isp11_pix_fmt(
 	switch (v4l2_pix_fmt) {
 	case V4L2_PIX_FMT_GREY:
 		#if (CIF_ISP11_PIX_FMT_Y_AS_BAYER)
-		return CIF_BAYER_SBGGR8;
-		#else
 		return CIF_YUV400;
+		#else
+		return CIF_BAYER_SBGGR8;
 		#endif
 	case V4L2_PIX_FMT_Y10:
 		#if (CIF_ISP11_PIX_FMT_Y_AS_BAYER)
@@ -1129,25 +1127,19 @@ static unsigned int cif_isp11_v4l2_poll(
 
 static void cif_isp11_v4l2_vm_open(struct vm_area_struct *vma)
 {
-	unsigned long flags = 0;
 	struct cif_isp11_metadata_s *metadata =
 		(struct cif_isp11_metadata_s *)vma->vm_private_data;
 
-	spin_lock_irqsave(&metadata->spinlock, flags);
 	metadata->vmas++;
-	spin_unlock_irqrestore(&metadata->spinlock, flags);
 	return;
 }
 
 static void cif_isp11_v4l2_vm_close(struct vm_area_struct *vma)
 {
-	unsigned long flags = 0;
 	struct cif_isp11_metadata_s *metadata =
 		(struct cif_isp11_metadata_s *)vma->vm_private_data;
 
-	spin_lock_irqsave(&metadata->spinlock, flags);
 	metadata->vmas--;
-	spin_unlock_irqrestore(&metadata->spinlock, flags);
 	return;
 }
 
@@ -1739,11 +1731,6 @@ static int cif_isp11_v4l2_drv_probe(struct platform_device *pdev)
 	struct cif_isp11_v4l2_device *cif_isp11_v4l2_dev;
 	int ret;
 
-	cif_isp11_pltfrm_pr_info(NULL, "CIF ISP11 driver version: v%x.%x.%x\n",
-		CONFIG_CIFISP11_DRIVER_VERSION >> 16,
-		(CONFIG_CIFISP11_DRIVER_VERSION & 0xff00) >> 8,
-		CONFIG_CIFISP11_DRIVER_VERSION & 0x00ff);
-
 	cif_isp11_v4l2_dev = devm_kzalloc(
 				&pdev->dev,
 				sizeof(struct cif_isp11_v4l2_device),
diff --git a/drivers/media/platform/rk-isp11/cif_isp11_version.h b/drivers/media/platform/rk-isp11/cif_isp11_version.h
index bee305a..1808adf 100644
--- a/drivers/media/platform/rk-isp11/cif_isp11_version.h
+++ b/drivers/media/platform/rk-isp11/cif_isp11_version.h
@@ -124,35 +124,9 @@
 *
 *v0.2.9:
 *1. fix dpf enable may be set when dpf strength config;
-*
-*v0.2.a:
-*1. Support Y8 for AEC;
-*
-*v0.2.b:
-*1. Add error judgement and spinlock to fix kernel crash in long time test;
-*Change the call of drain_workqueue;
-*
-*v0.2.c:
-*1. Fix the issue that the frame time of different frame is same;
-*2. Fix the issue that 3A information is not correct when v-blank time of
-* sensor data is too short;
-*
-*v0.2.d:
-*1. Add check of AE window;
-*
-*v0.2.e:
-*1. Remove check of AE window;
-* The check function will move to CameraHal;
-*
-*v0.2.f:
-*1. Add support for dvfs;
-*
-*v0.3.0:
-*1. Set vts with exposure time and gain;
-*
 */
 
-#define CONFIG_CIFISP11_DRIVER_VERSION KERNEL_VERSION(0, 3, 0x0)
+#define CONFIG_CIFISP11_DRIVER_VERSION KERNEL_VERSION(0, 2, 9)
 
 
 #endif
diff --git a/drivers/media/usb/uvc/uvc_driver.c b/drivers/media/usb/uvc/uvc_driver.c
index b0153a0..363cdbf 100644
--- a/drivers/media/usb/uvc/uvc_driver.c
+++ b/drivers/media/usb/uvc/uvc_driver.c
@@ -17,7 +17,6 @@
 #include <linux/module.h>
 #include <linux/slab.h>
 #include <linux/usb.h>
-#include <linux/usb/quirks.h>
 #include <linux/videodev2.h>
 #include <linux/vmalloc.h>
 #include <linux/wait.h>
@@ -1915,10 +1914,7 @@ static int uvc_probe(struct usb_interface *intf,
 	}
 
 	uvc_trace(UVC_TRACE_PROBE, "UVC device initialized.\n");
-	if (udev->quirks & USB_QUIRK_AUTO_SUSPEND)
-		uvc_printk(KERN_INFO, "auto-suspend is blacklisted for this device\n");
-	else
-		usb_enable_autosuspend(udev);
+	usb_enable_autosuspend(udev);
 	return 0;
 
 error:
diff --git a/drivers/media/video/adv7181.c b/drivers/media/video/adv7181.c
index ddfe854..02af091 100644
--- a/drivers/media/video/adv7181.c
+++ b/drivers/media/video/adv7181.c
@@ -1285,21 +1285,6 @@ static ssize_t adv7181_debugfs_reg_write(struct file *file,
 	return count;
 }
 
-static ssize_t adv7181_debugfs_reg_read(struct file *file,
-					char __user *buf,
-					size_t count, loff_t *ppos)
-{
-	SENSOR_DG("%s(%d): input_mode: %s\n",
-		  __func__, __LINE__,
-		  input_mode);
-
-	if (copy_to_user(buf, input_mode, strlen(input_mode) + 1))
-		return -EFAULT;
-	count = strlen(input_mode) + 1;
-
-	return count;
-}
-
 static int adv7181_debugfs_reg_show(struct seq_file *s, void *v)
 {
 	int i, ret;
@@ -1328,7 +1313,7 @@ static int adv7181_debugfs_open(struct inode *inode, struct file *file)
 	return single_open(file, adv7181_debugfs_reg_show, spsensor);
 }
 
-static const struct file_operations debugfs_register_fops = {
+static const struct file_operations adv7181_debugfs_fops = {
 	.owner			= THIS_MODULE,
 	.open			= adv7181_debugfs_open,
 	.read			= seq_read,
@@ -1337,15 +1322,6 @@ static const struct file_operations debugfs_register_fops = {
 	.release		= single_release
 };
 
-static const struct file_operations debugfs_status_fops = {
-	.owner			= THIS_MODULE,
-	.open			= adv7181_debugfs_open,
-	.read			= adv7181_debugfs_reg_read,
-	.write			= adv7181_debugfs_reg_write,
-	.llseek			= seq_lseek,
-	.release		= single_release
-};
-
 static void adv7181_check_state_work(struct work_struct *work)
 {
 	struct rk_state_check_work *state_check_work =
@@ -1357,13 +1333,12 @@ static void adv7181_check_state_work(struct work_struct *work)
 	struct i2c_client *client = sensor->client;
 	static v4l2_std_id std_old = V4L2_STD_NTSC;
 	v4l2_std_id std;
-	u32 status;
 
 	if (sensor->info_priv.dev_sig_cnf.type == RK_CAMERA_DEVICE_BT601_8)
 		return;
 
-	adv7181_status(client, &status, &std);
-	if ((status != V4L2_IN_ST_NO_SIGNAL) && (std_old != std)) {
+	adv7181_status(client, NULL, &std);
+	if (std_old != std) {
 		adv7181_reinit_parameter(std, sensor);
 		adv7181_send_uevent(sensor);
 		std_old = std;
@@ -1454,17 +1429,13 @@ static void sensor_init_parameters_user(struct specific_sensor *spsensor,
 
 	/* init debugfs */
 	debugfs_dir = debugfs_create_dir("adv7181", NULL);
-	if (IS_ERR(debugfs_dir)) {
+	if (IS_ERR(debugfs_dir))
 		SENSOR_TR("%s(%d): create debugfs dir failed\n",
 			  __func__, __LINE__);
-	} else {
+	else
 		debugfs_create_file("register", S_IRUSR, debugfs_dir, spsensor,
-				    &debugfs_register_fops);
+				    &adv7181_debugfs_fops);
 
-		debugfs_create_file("video_state", 0400,
-				    debugfs_dir, spsensor,
-				    &debugfs_status_fops);
-	}
 	/* init work_queue for state_check */
 	INIT_DELAYED_WORK(&spsensor->common_sensor.state_check_work.work,
 			  adv7181_check_state_work);
diff --git a/drivers/media/video/rk30_camera_oneframe.c b/drivers/media/video/rk30_camera_oneframe.c
index 32ba0ef..11ac0fe 100644
--- a/drivers/media/video/rk30_camera_oneframe.c
+++ b/drivers/media/video/rk30_camera_oneframe.c
@@ -250,12 +250,8 @@ static u32 CHIP_NAME;
 *v0.4.0:
 		1. cif_clk_out 24M can disable directly by disable clk_cif_pll,
 		no need switching to 36M before.
-*v0.5.0:
-		1. prepare clk_cif_pll before disable to avoid warning.
-*v0.6.0:
-		1. revert v0.4.0&v0.5.0 commit.
 */
-#define RK_CAM_VERSION_CODE KERNEL_VERSION(0, 6, 0)
+#define RK_CAM_VERSION_CODE KERNEL_VERSION(0, 4, 0)
 static int version = RK_CAM_VERSION_CODE;
 module_param(version, int, S_IRUGO);
 
@@ -357,6 +353,7 @@ struct rk_cif_clk
     struct clk *cif_clk_in;
     struct clk *cif_clk_out;
 	struct clk *pclk_cif;
+	struct clk *clk_cif_pll;
 	/************must modify end************/
 
    // spinlock_t lock;
@@ -1367,7 +1364,6 @@ static int rk_camera_mclk_ctrl(int cif_idx, int on, int clk_rate)
         clk_set_rate(clk->cif_clk_out,clk_rate);
         clk->on = true;
     } else if (!on && clk->on) {
-		clk_set_rate(clk->cif_clk_out, 36000000);/*just for close clk which base on XIN24M */
 		clk_disable_unprepare(clk->aclk_cif);
 		clk_disable_unprepare(clk->hclk_cif);
 		if (CHIP_NAME != 3228)
@@ -1377,7 +1373,11 @@ static int rk_camera_mclk_ctrl(int cif_idx, int on, int clk_rate)
 			write_cru_reg(CRU_CLK_OUT, 0x00800080);
 		}
 
-		clk_disable_unprepare(clk->cif_clk_out);
+		if (clk->clk_cif_pll)
+			clk_disable(clk->clk_cif_pll);
+		else
+			RKCAMERA_TR(KERN_ERR "clk->clk_cif_pll is NULL, cif_clk_out maybe not disabled\n");
+
 		if (CHIP_NAME != 3228)
 			clk_disable_unprepare(clk->pd_cif);
 		if (CHIP_NAME == 3368)
@@ -3273,6 +3273,7 @@ static int rk_camera_probe(struct platform_device *pdev)
 		if (CHIP_NAME != 3228)
 			cif_clk[0].cif_clk_in = devm_clk_get(dev_cif, "cif0_in");
 		cif_clk[0].cif_clk_out = devm_clk_get(dev_cif, "cif0_out");
+		cif_clk[0].clk_cif_pll = clk_get(NULL, "clk_cif_pll");
 		/* spin_lock_init(&cif_clk[0].lock); */
 		cif_clk[0].on = false;
 		rk_camera_cif_iomux(dev_cif);
@@ -3286,6 +3287,7 @@ static int rk_camera_probe(struct platform_device *pdev)
 		if (CHIP_NAME != 3228)
 			cif_clk[1].cif_clk_in = devm_clk_get(dev_cif, "cif0_in");
         cif_clk[1].cif_clk_out = devm_clk_get(dev_cif, "cif0_out");
+		cif_clk[1].clk_cif_pll = clk_get(NULL, "clk_cif_pll");
         //spin_lock_init(&cif_clk[1].lock);
         cif_clk[1].on = false;
         rk_camera_cif_iomux(dev_cif);
@@ -3411,7 +3413,7 @@ exit_free_irq:
 exit_reqirq:
     iounmap(pcdev->base);
 exit_ioremap_vip:
-    release_mem_region(res->start, resource_size(res));
+    release_mem_region(res->start, res->end - res->start + 1);
 exit_reqmem_vip:
     kfree(pcdev);
 exit_alloc:
@@ -3451,7 +3453,7 @@ static int rk_camera_remove(struct platform_device *pdev)
 
     res = pcdev->res;
     iounmap((void __iomem*)pcdev->base);
-    release_mem_region(res->start, resource_size(res));
+    release_mem_region(res->start, res->end - res->start + 1);
     if (pcdev->pdata && pcdev->pdata->io_deinit) {         /* ddl@rock-chips.com : Free IO in deinit function */
         pcdev->pdata->io_deinit(0);
         pcdev->pdata->io_deinit(1);
diff --git a/drivers/media/video/rk30_camera_pingpong.c b/drivers/media/video/rk30_camera_pingpong.c
index db273fb..9a30ffb 100644
--- a/drivers/media/video/rk30_camera_pingpong.c
+++ b/drivers/media/video/rk30_camera_pingpong.c
@@ -300,12 +300,8 @@ static u32 CHIP_NAME;
 *v0.3.0:
 		1. cif_clk_out 24M can disable directly by disable clk_cif_pll,
 		no need switching to 36M before.
-*v0.4.0:
-		1. prepare clk_cif_pll before disable to avoid warning.
-*v0.5.0:
-		1. revert v0.3.0&v0.4.0 commit.
 */
-#define RK_CAM_VERSION_CODE KERNEL_VERSION(0, 5, 0)
+#define RK_CAM_VERSION_CODE KERNEL_VERSION(0, 3, 0)
 static int version = RK_CAM_VERSION_CODE;
 module_param(version, int, S_IRUGO);
 
@@ -407,6 +403,7 @@ struct rk_cif_clk
 	struct clk *cif_clk_in;
 	struct clk *cif_clk_out;
 	struct clk *pclk_cif;
+	struct clk *clk_cif_pll;
 	/************must modify end************/
 
    // spinlock_t lock;
@@ -1396,7 +1393,11 @@ static int rk_camera_mclk_ctrl(int cif_idx, int on, int clk_rate)
 			write_cru_reg(CRU_CLKSEL29_CON, 0x007c0000);
 			write_cru_reg(CRU_CLK_OUT, 0x00800080);
 		}
-		clk_disable_unprepare(clk->cif_clk_out);
+		if (clk->clk_cif_pll)
+			clk_disable(clk->clk_cif_pll);
+		else
+			RKCAMERA_TR(KERN_ERR"clk->clk_cif_pll is NULL, cif_clk_out maybe not disabled\n");
+
 		if (CHIP_NAME != 3228)
 			clk_disable_unprepare(clk->pd_cif);
 		if (CHIP_NAME == 3368)
@@ -3302,6 +3303,7 @@ static int rk_camera_probe(struct platform_device *pdev)
 			cif_clk[0].cif_clk_in =
 				devm_clk_get(dev_cif, "cif0_in");
 		cif_clk[0].cif_clk_out = devm_clk_get(dev_cif, "cif0_out");
+		cif_clk[0].clk_cif_pll = clk_get(NULL, "clk_cif_pll");
 		/* spin_lock_init(&cif_clk[0].lock); */
 		cif_clk[0].on = false;
 		rk_camera_cif_iomux(dev_cif);/*yzm*/
@@ -3314,6 +3316,7 @@ static int rk_camera_probe(struct platform_device *pdev)
 		if (CHIP_NAME != 3228)
 			cif_clk[1].cif_clk_in = devm_clk_get(dev_cif, "cif0_in");
         cif_clk[1].cif_clk_out = devm_clk_get(dev_cif, "cif0_out");
+		cif_clk[1].clk_cif_pll = clk_get(NULL, "clk_cif_pll");
 		if (CHIP_NAME != 3228)
 			cif_clk[1].pclk_cif = devm_clk_get(dev_cif, "pclk_cif");
 	/*spin_lock_init(&cif_clk[1].lock);*/
@@ -3443,7 +3446,7 @@ exit_free_irq:
 exit_reqirq:
     iounmap(pcdev->base);
 exit_ioremap_vip:
-    release_mem_region(res->start, resource_size(res));
+    release_mem_region(res->start, res->end - res->start + 1);
 exit_reqmem_vip:
 #if 0
     if (clk) {
@@ -3499,7 +3502,7 @@ static int /* __exit */ rk_camera_remove(struct platform_device *pdev)
 
     res = pcdev->res;
     iounmap((void __iomem*)pcdev->base);
-    release_mem_region(res->start, resource_size(res));
+    release_mem_region(res->start, res->end - res->start + 1);
     if (pcdev->pdata && pcdev->pdata->io_deinit) {         /* ddl@rock-chips.com : Free IO in deinit function */
         pcdev->pdata->io_deinit(0);
         pcdev->pdata->io_deinit(1);
diff --git a/drivers/media/video/rk_camsys/camsys_internal.h b/drivers/media/video/rk_camsys/camsys_internal.h
index be05e80..b796b8c 100755
--- a/drivers/media/video/rk_camsys/camsys_internal.h
+++ b/drivers/media/video/rk_camsys/camsys_internal.h
@@ -130,10 +130,8 @@
 *v0.0x23.0:
 	1) modify phy frequency table of 3368.
 	2) add phy timing seting for 3368.
-*v0.0x24.0:
-        1) switch D-PHY0 to RX status before it's initialization to avoid conflicting with sensor output.
 */
-#define CAMSYS_DRIVER_VERSION                   KERNEL_VERSION(0, 0x24, 0)
+#define CAMSYS_DRIVER_VERSION                   KERNEL_VERSION(0, 0x23, 0)
 
 
 #define CAMSYS_PLATFORM_DRV_NAME                "RockChip-CamSys"
diff --git a/drivers/media/video/rk_camsys/camsys_soc_rk3288.c b/drivers/media/video/rk_camsys/camsys_soc_rk3288.c
index 27342f3..e27b681 100755
--- a/drivers/media/video/rk_camsys/camsys_soc_rk3288.c
+++ b/drivers/media/video/rk_camsys/camsys_soc_rk3288.c
@@ -235,7 +235,6 @@ int camsys_rk3288_cfg (camsys_soc_cfg_t cfg_cmd, void* cfg_para)
         {
             para_int = (unsigned int*)cfg_para;
             __raw_writel((((*para_int)&0x03)<<3)|(0x03<<3), RK_GRF_VIRT+0x01d4);
-            __raw_writel(0xa000a000, RK_GRF_VIRT + 0x027c);//D-PHY0 switch to RX
             break;
         }
 
-- 
1.9.1

